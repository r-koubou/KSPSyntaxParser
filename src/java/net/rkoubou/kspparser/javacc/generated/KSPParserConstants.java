/* Generated By:JJTree&JavaCC: Do not edit this line. KSPParserConstants.java */
package net.rkoubou.kspparser.javacc.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KSPParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int REAL_LITERAL = 10;
  /** RegularExpression Id. */
  int STRING_LITERAL = 11;
  /** RegularExpression Id. */
  int EOL = 12;
  /** RegularExpression Id. */
  int MULTI_LINE_DELIMITER = 13;
  /** RegularExpression Id. */
  int DECLARE = 14;
  /** RegularExpression Id. */
  int CONST = 15;
  /** RegularExpression Id. */
  int POLYPHONIC = 16;
  /** RegularExpression Id. */
  int UI_DECLARE = 17;
  /** RegularExpression Id. */
  int ON = 18;
  /** RegularExpression Id. */
  int END = 19;
  /** RegularExpression Id. */
  int FUNCTION = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int SELECT = 23;
  /** RegularExpression Id. */
  int CASE = 24;
  /** RegularExpression Id. */
  int TO = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int VARIABLE_INT = 27;
  /** RegularExpression Id. */
  int VARIABLE_INT_ARRAY = 28;
  /** RegularExpression Id. */
  int VARIABLE_REAL = 29;
  /** RegularExpression Id. */
  int VARIABLE_REAL_ARRAY = 30;
  /** RegularExpression Id. */
  int VARIABLE_STRING = 31;
  /** RegularExpression Id. */
  int VARIABLE_STRING_ARRAY = 32;
  /** RegularExpression Id. */
  int BOOL_GT = 33;
  /** RegularExpression Id. */
  int BOOL_LT = 34;
  /** RegularExpression Id. */
  int BOOL_GE = 35;
  /** RegularExpression Id. */
  int BOOL_LE = 36;
  /** RegularExpression Id. */
  int BOOL_EQ = 37;
  /** RegularExpression Id. */
  int BOOL_NE = 38;
  /** RegularExpression Id. */
  int BOOL_NOT = 39;
  /** RegularExpression Id. */
  int BOOL_AND = 40;
  /** RegularExpression Id. */
  int BOOL_OR = 41;
  /** RegularExpression Id. */
  int ASSIGN = 42;
  /** RegularExpression Id. */
  int PLUS = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int MUL = 45;
  /** RegularExpression Id. */
  int DIV = 46;
  /** RegularExpression Id. */
  int MOD = 47;
  /** RegularExpression Id. */
  int BIT_AND = 48;
  /** RegularExpression Id. */
  int BIT_OR = 49;
  /** RegularExpression Id. */
  int BIT_NOT = 50;
  /** RegularExpression Id. */
  int STRING_ADD = 51;
  /** RegularExpression Id. */
  int LPAREN = 52;
  /** RegularExpression Id. */
  int RPAREN = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int RBRACKET = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int PART_LETTER = 59;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\f\"",
    "\"{\"",
    "\"}\"",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<REAL_LITERAL>",
    "<STRING_LITERAL>",
    "<EOL>",
    "<MULTI_LINE_DELIMITER>",
    "<DECLARE>",
    "<CONST>",
    "<POLYPHONIC>",
    "<UI_DECLARE>",
    "\"on\"",
    "\"end\"",
    "\"function\"",
    "\"if\"",
    "\"else\"",
    "\"select\"",
    "\"case\"",
    "\"to\"",
    "\"while\"",
    "<VARIABLE_INT>",
    "<VARIABLE_INT_ARRAY>",
    "<VARIABLE_REAL>",
    "<VARIABLE_REAL_ARRAY>",
    "<VARIABLE_STRING>",
    "<VARIABLE_STRING_ARRAY>",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"#\"",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"mod\"",
    "\".and.\"",
    "\".or.\"",
    "\".not.\"",
    "\"&\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
