/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. KSPParser.jj */
/*@egen*/options
{
    DEBUG_PARSER        = false;
    DEBUG_TOKEN_MANAGER = false;
    STATIC              = false;
    UNICODE_INPUT       = true;
    JDK_VERSION         = "1.6";
                               
                               
                               
                               
                                                                    
}

PARSER_BEGIN( KSPParser )

package net.rkoubou.kspparser.javacc.generated;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import net.rkoubou.kspparser.analyzer.AnalyzerConstants;
import net.rkoubou.kspparser.analyzer.MessageManager;
import net.rkoubou.kspparser.analyzer.SymbolDefinition;

public class KSPParser implements/*@bgen(jjtree)*/ KSPParserTreeConstants, /*@egen*/ AnalyzerConstants
{/*@bgen(jjtree)*/
  protected JJTKSPParserState jjtree = new JJTKSPParserState();

/*@egen*/
    /** \u30eb\u30fc\u30c8\u306e\u69cb\u6587\u6728 */
    ASTRootNode rootNode;

    /** \u30d1\u30fc\u30b9\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb */
    File file;

    /**
     * Ctor.
     */
    public KSPParser( File file ) throws IOException
    {
        this( new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) ) );
        this.file = file.getAbsoluteFile();
    }

    /**
     * \u30d1\u30fc\u30b9\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u306eFile\u3092\u53d6\u5f97\u3059\u308b
     */
    public File getFile()
    {
        return file;
    }

    /**
     * \u69cb\u6587\u89e3\u6790
     */
    public ASTRootNode analyzeSyntax() throws Exception
    {
        ASTRootNode rootNode = null;
        try
        {
            rootNode = KSPScript();
        }
/*
        catch( ParseException pe )
        {
            System.out.println( MessageManager.expand( pe ) );
        }
*/
        catch( Throwable e )
        {
            e.printStackTrace();
        }
        finally
        {
            // javacc \u304c\u751f\u6210\u3059\u308b\u30c8\u30fc\u30af\u30f3\u89e3\u6790\u5668\u304c\u4f7f\u7528\u3057\u305f\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30af\u30ed\u30fc\u30ba
            // \u69cb\u6587\u89e3\u6790\u6642\u306b\u6587\u6cd5\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u30af\u30ed\u30fc\u30ba\u305b\u305a\u306b\u629c\u3051\u308b\u3063\u307d\u304f
            // \u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30eb\u3092\u63b4\u307f\u3063\u653e\u3057\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u308b\u306e\u3067\u5bfe\u51e6
            try{ jj_input_stream.inputStream.close(); } catch( Throwable e ){}
        }

        return rootNode;

    }

    /**
     * \u610f\u5473\u89e3\u6790
     */
    public boolean analyzeSemantic() throws Exception
    {
        return true;
    }

    /**
     * \u69cb\u6587\u89e3\u6790\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u5834\u5408\u306e\u5fa9\u5e30\u5148\u307e\u3067\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u98db\u3070\u3059
     */
    void errorSkipTo( ParseException e )
    {
        MessageManager.println( e );
        //e.printStackTrace();
        Token t = null;
        do
        {
            try
            {
                t = null; // getNextToken\u30b3\u30fc\u30eb\u6642\u3001\u4f8b\u5916\u767a\u751f\u6642\u306e\u7121\u9650\u30eb\u30fc\u30d7\u5bfe\u7b56
                t = getNextToken();
            }
            catch( Throwable ee )
            {}
        }
        while( t != null &&
               t.kind != EOF &&
               t.kind != EOL &&
               t.kind != MULTI_LINE_DELIMITER &&
               t.kind != RPAREN &&
               t.kind != RBRACKET
        );
    }

}
PARSER_END( KSPParser )

//------------------------------------------------------------------------------
// Skip
//------------------------------------------------------------------------------
SKIP :
{
      " "
    | "\t"
    | "\f"
}

//------------------------------------------------------------------------------
// Comment
//------------------------------------------------------------------------------
MORE :
{
  "{" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "}" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

//------------------------------------------------------------------------------
// Literal
//------------------------------------------------------------------------------
TOKEN :
{
  <INTEGER_LITERAL :
    <DECIMAL_LITERAL> | <HEX_LITERAL> >
|
  <#DECIMAL_LITERAL: ( "0" ) | ( ["1"-"9"] (["0"-"9"])* ) >
|
  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
}

TOKEN:
{
  <REAL_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >
}

TOKEN:
{
  <STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

//------------------------------------------------------------------------------
// \u6539\u884c\u30fb\u30c7\u30ea\u30df\u30bf
//------------------------------------------------------------------------------
TOKEN:
{
      <EOL: (<CR><LF>) | <LF> >
    | <#CR: "\r" >
    | <#LF: "\n" >
    | <MULTI_LINE_DELIMITER: "..." ([ " ", "\t" ])* <EOL> >
}

//------------------------------------------------------------------------------
// \u30ad\u30fc\u30ef\u30fc\u30c9
//------------------------------------------------------------------------------
TOKEN:
{
    // \u5909\u6570
      <DECLARE: "declare" >
    | <CONST: "const" >
    | <POLYPHONIC: "polyphonic">
    // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af
    | <ON: "on" >
    | <END: "end" >
    | <FUNCTION: "function" >
    // \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8
    | <IF: "if" >
    | <ELSE: "else" >
    | <SELECT: "select" >
    | <CASE: "case" >
    | <TO: "to" >
    | <WHILE: "while" >
}

//------------------------------------------------------------------------------
// \u5909\u6570
//------------------------------------------------------------------------------
TOKEN:
{
      <VARIABLE_INT:            "$" <IDENTIFIER> >
    | <VARIABLE_INT_ARRAY:      "%" <IDENTIFIER> >
    | <VARIABLE_REAL:           "~" <IDENTIFIER> >
    | <VARIABLE_REAL_ARRAY:     "?" <IDENTIFIER> >
    | <VARIABLE_STRING:         "@" <IDENTIFIER> >
    | <VARIABLE_STRING_ARRAY:   "!" <IDENTIFIER> >
}

//------------------------------------------------------------------------------
// \u6f14\u7b97\u5b50
//------------------------------------------------------------------------------
TOKEN:
{
    // \u6bd4\u8f03\u6f14\u7b97\u5b50
      <BOOL_GT: ">">
    | <BOOL_LT: "<">
    | <BOOL_GE: ">=">
    | <BOOL_LE: "<=">
    | <BOOL_EQ: "=">
    //TODO in_range\u306f\u30b3\u30de\u30f3\u30c9\u306a\u306e\u3067\u6f14\u7b97\u5b50\u6271\u3044\u3057\u306a\u3044
    | <BOOL_NE: "#">
    | <BOOL_NOT: "not">
    | <BOOL_AND: "and">
    | <BOOL_OR: "or">
    // \u7b97\u8853\u6f14\u7b97\u5b50
    | <ASSIGN: ":=" >
    | <PLUS: "+" >
    | <MINUS: "-" >
    | <MUL: "*" >
    | <DIV: "/" >
    | <MOD: "mod" >
    | <BIT_AND: ".and." >
    | <BIT_OR: ".or." >
    | <BIT_NOT: ".not." >
    //TODO \u30d3\u30c3\u30c8\u30b7\u30d5\u30c8\u306f\u30b3\u30de\u30f3\u30c9\u306a\u306e\u3067\u6f14\u7b97\u5b50\u6271\u3044\u3057\u306a\u3044
    // \u6587\u5b57\u5217\u9023\u7d50
    | <STRING_ADD: "&" >
}

//------------------------------------------------------------------------------
// \u305d\u306e\u4ed6
//------------------------------------------------------------------------------
TOKEN:
{
      <LPAREN: "(" >
    | <RPAREN: ")" >
    | <LBRACKET: "[" >
    | <RBRACKET: "]" >
    | <COMMA: "," >
}

//------------------------------------------------------------------------------
// \u6587\u6cd5\u5b9a\u7fa9\u3053\u3053\u304b\u3089
//------------------------------------------------------------------------------

//##############################################################################
// MEMO: Block(), Expression() \u76f4\u524d\u306e\u30c8\u30fc\u30af\u30f3\u306b (<MULTI_LINE_DELIMITER>)* \u6307\u5b9a\u306f\u3044\u3089\u306a\u3044\u3002
// \u8907\u6570\u884c\u306b\u8de8\u3050\u5f0f\u3092\u6210\u7acb\u3055\u305b\u308b\u305f\u3081\u3001\u5f0f\u4e2d\u306f\u6f14\u7b97\u5b50\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002
//##############################################################################

//
// \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53
//
ASTRootNode KSPScript()          :
{/*@bgen(jjtree) RootNode */
  ASTRootNode jjtn000 = new ASTRootNode(this, JJTROOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RootNode */
    try {
/*@egen*/
    try
    {
        (
              CallbackDeclaration()
            | UserFunctionDeclaration()
            | <EOL>
            | <MULTI_LINE_DELIMITER>
        )*
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u5909\u6570\u306e\u5b9a\u7fa9
//
Token Variable()          :
{/*@bgen(jjtree) Variable */
    ASTVariable jjtn000 = new ASTVariable(this, JJTVARIABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token var;
}
{/*@bgen(jjtree) Variable */
    try {
/*@egen*/
    (
          var = <VARIABLE_INT>
        | var = <VARIABLE_INT_ARRAY>
        | var = <VARIABLE_REAL>
        | var = <VARIABLE_REAL_ARRAY>
        | var = <VARIABLE_STRING>
        | var = <VARIABLE_STRING_ARRAY>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return var;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u5909\u6570\u5ba3\u8a00
//
void VariableDeclaration()                     :
{/*@bgen(jjtree) VariableDeclaration */
    ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(this, JJTVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token declare;
}
{/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    (
        declare = <DECLARE> (LOOKAHEAD(2) <MULTI_LINE_DELIMITER>)*
        (
              <CONST>       { jjtn000.symbol.accessFlag = ACCESS_ATTR_CONST; }
            | <POLYPHONIC>  { jjtn000.symbol.accessFlag = ACCESS_ATTR_POLY; }
            | <IDENTIFIER>  { jjtn000.symbol.accessFlag = ACCESS_ATTR_UI; } // ui_****
        )?
        VariableDeclarator( jjtn000 )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.symbol.line  = declare.beginLine;
        jjtn000.symbol.colmn = declare.beginColumn;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u5909\u6570\u5ba3\u8a00(\u8a73\u7d30)
//
void VariableDeclarator( ASTVariableDeclaration decl )                    :
{/*@bgen(jjtree) VariableDeclarator */
    ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(this, JJTVARIABLEDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) VariableDeclarator */
    try {
/*@egen*/
    (
        ( LOOKAHEAD(2) <MULTI_LINE_DELIMITER> )*
        name = Variable()
        (
            (
                [ <LBRACKET> Expression() <RBRACKET> ]
            )

            [ LOOKAHEAD(2) VariableInitializer() ]
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        decl.symbol.name = name.image;
        decl.symbol.setTypeFromVariableName();
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u521d\u671f\u5024\u4ee3\u5165
//
void VariableInitializer() :
{}
{
      LOOKAHEAD(3) <ASSIGN> ArrayInitializer()
    | UIInitializer()
    | <ASSIGN> Expression()
}

//
// \u914d\u5217\u5909\u6570\u521d\u671f\u5024\u4ee3\u5165
//
void ArrayInitializer() :
{}
{
    <LPAREN>
        Expression() ( (<MULTI_LINE_DELIMITER>)* <COMMA> Expression() )*
    <RPAREN>
}

//
// UI\u5909\u6570\u521d\u671f\u5024\u4ee3\u5165
//
void UIInitializer() :
{}
{
    <LPAREN>
        Expression() ( (<MULTI_LINE_DELIMITER>)* <COMMA> Expression() )*
    <RPAREN>
}

//
// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u672c\u4f53
//
void CallbackDeclaration()                     :
{/*@bgen(jjtree) CallbackDeclaration */
    ASTCallbackDeclaration jjtn000 = new ASTCallbackDeclaration(this, JJTCALLBACKDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
}
{/*@bgen(jjtree) CallbackDeclaration */
    try {
/*@egen*/
    (
        <ON> (<MULTI_LINE_DELIMITER>)* name = <IDENTIFIER> (<MULTI_LINE_DELIMITER>)*
        [ CallbackArgument() ]
        <EOL>
        Block()
        <END> (<MULTI_LINE_DELIMITER>)* <ON>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.symbol.name = name.image;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30fb\u5f15\u6570\u5ba3\u8a00
//
void CallbackArgument()                  :
{/*@bgen(jjtree) CallbackArgument */
  ASTCallbackArgument jjtn000 = new ASTCallbackArgument(this, JJTCALLBACKARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CallbackArgument */
    try {
/*@egen*/
    <LPAREN> (<MULTI_LINE_DELIMITER>)*
    CallbackArgumentList()
    <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30fb\u5f15\u6570\u30ea\u30b9\u30c8
//
void CallbackArgumentList()                      :
{/*@bgen(jjtree) CallbackArgumentList */
  ASTCallbackArgumentList jjtn000 = new ASTCallbackArgumentList(this, JJTCALLBACKARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CallbackArgumentList */
    try {
/*@egen*/
    ( Variable() ) ( <COMMA> Variable() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//
// \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u672c\u4f53
//
void UserFunctionDeclaration()                         :
{/*@bgen(jjtree) UserFunctionDeclaration */
  ASTUserFunctionDeclaration jjtn000 = new ASTUserFunctionDeclaration(this, JJTUSERFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UserFunctionDeclaration */
    try {
/*@egen*/
    <FUNCTION> (<MULTI_LINE_DELIMITER>)* <IDENTIFIER>
    <EOL>
    Block()
    <END> (<MULTI_LINE_DELIMITER>)* <FUNCTION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u672c\u4f53 / \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u672c\u4f53\u306e\u30b9\u30b3\u30fc\u30d7\u672c\u4f53
//
void Block()       :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    try
    {
        (
            LOOKAHEAD(2)
            BlockStatement()
        )*
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

//
// \u30b9\u30b3\u30fc\u30d7\u4e2d\u306e\u5f0f
//
void BlockStatement() :
{}
{
      VariableDeclaration()
    | Statement()
}

//
// \u5404\u7a2e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u306e\u5b9a\u7fa9
//
void Statement() :
{}
{
    try
    {
          StatementExpression()
        | IfStatement()
        | SelectStatement()
        | WhileStatement()
        | <MULTI_LINE_DELIMITER>
        | <EOL>
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
}

void StatementExpression() :
{}
{
      LOOKAHEAD(3) Assignment()
    | PrimaryExpression()
}

//
// if
//
void IfStatement()             :
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    (
        <IF>         (<MULTI_LINE_DELIMITER>)*  // if
        <LPAREN>                                // (
        Expression()                            // cond
        <RPAREN>                                // )
        // <statement>+
        Block()
    )
    [
        // else
        //  <statement>+
        <ELSE>
        Block()
    ]
    <END> (<MULTI_LINE_DELIMITER>)* <IF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// select
//
void SelectStatement()                 :
{/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(this, JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectStatement */
        try {
/*@egen*/
        <SELECT>   (<MULTI_LINE_DELIMITER>)*        // select
        <LPAREN>                                    // (
        Expression() (<MULTI_LINE_DELIMITER>)*      // cond
        <RPAREN>   (<MULTI_LINE_DELIMITER>)*        // )
        (<EOL>)+
        ( CaseStatement() )+                        // case xxx (to yyy)
        <END> (<MULTI_LINE_DELIMITER>)* <SELECT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/    // end select
}

//
// case @select
//
void CaseStatement()               :
{/*@bgen(jjtree) CaseStatement */
  ASTCaseStatement jjtn000 = new ASTCaseStatement(this, JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseStatement */
    try {
/*@egen*/
    (
        <CASE> (<MULTI_LINE_DELIMITER>)*    // case
        CaseCondition()       // cond
        (
            <TO> (<MULTI_LINE_DELIMITER>)* CaseCondition() // e.g. -1000 to 1000
        )?
        Block()
        (<MULTI_LINE_DELIMITER>)*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CaseCondition()               :
{/*@bgen(jjtree) CaseCondition */
  ASTCaseCondition jjtn000 = new ASTCaseCondition(this, JJTCASECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseCondition */
    try {
/*@egen*/
    ( [ <MINUS> ] <INTEGER_LITERAL> | Variable() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// while
//
void WhileStatement()                :
{/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    (
        <WHILE>      (<MULTI_LINE_DELIMITER>)*  // while
        <LPAREN>                                // (
        Expression()                            // cond
        <RPAREN>                                // )
        Block()                                 // <statement>+
    )
    <END> (<MULTI_LINE_DELIMITER>)* <WHILE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}






//------------------------------------------------------------------------------
// \u5f0f
//------------------------------------------------------------------------------
void Expression():
{}
{
    ConditionalOrExpression()
}

//
// \u4ee3\u5165\u5f0f
//
void Assignment()               :
{/*@bgen(jjtree) #Assignment( 2) */
  ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Assignment( 2) */
    try {
/*@egen*/
    Variable() [ ArrayIndex() ] <ASSIGN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

//
// \u6761\u4ef6\u5f0fOR
//
void ConditionalOrExpression():
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    ConditionalAndExpression() ( <BOOL_OR>/*@bgen(jjtree) #ConditionalOr( 2) */
                                           {
                                             ASTConditionalOr jjtn001 = new ASTConditionalOr(this, JJTCONDITIONALOR);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte001;
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               throw (ParseException)jjte001;
                                             }
                                             throw (Error)jjte001;
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
                                           }
/*@egen*/                   )*
}

//
// \u6761\u4ef6\u5f0fAND
//
void ConditionalAndExpression():
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    InclusiveOrExpression() ( <BOOL_AND>/*@bgen(jjtree) #ConditionalAnd( 2) */
                                         {
                                           ASTConditionalAnd jjtn001 = new ASTConditionalAnd(this, JJTCONDITIONALAND);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ InclusiveOrExpression()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/                    )*
}

//
// \u8ad6\u7406\u7a4d
//
void InclusiveOrExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    AndExpression()
    (
        <BIT_OR>/*@bgen(jjtree) #InclusiveOr( 2) */
                 {
                   ASTInclusiveOr jjtn001 = new ASTInclusiveOr(this, JJTINCLUSIVEOR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ AndExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/                
    )*
}

//
// \u8ad6\u7406\u548c
//
void AndExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    EqualityExpression()
    (
        <BIT_AND>/*@bgen(jjtree) #And( 2) */
                  {
                    ASTAnd jjtn001 = new ASTAnd(this, JJTAND);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/        
    )*
}

//
// \u6bd4\u8f03
//
void EqualityExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    RelationalExpression()
    (
          <BOOL_EQ>/*@bgen(jjtree) #Equal( 2) */
                    {
                      ASTEqual jjtn001 = new ASTEqual(this, JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/            
        | <BOOL_NE>/*@bgen(jjtree) #NotEqual( 2) */
                    {
                      ASTNotEqual jjtn002 = new ASTNotEqual(this, JJTNOTEQUAL);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte002) {
                      if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        throw (RuntimeException)jjte002;
                      }
                      if (jjte002 instanceof ParseException) {
                        throw (ParseException)jjte002;
                      }
                      throw (Error)jjte002;
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
                    }
/*@egen*/               
    )*
}

//
// \u6bd4\u8f03\uff08\u4e0d\u7b49\u53f7\uff09
//
void RelationalExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    AdditiveExpression()
    (
          <BOOL_LT>/*@bgen(jjtree) #LT( 2) */
                    {
                      ASTLT jjtn001 = new ASTLT(this, JJTLT);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/       
        | <BOOL_GT>/*@bgen(jjtree) #GT( 2) */
                    {
                      ASTGT jjtn002 = new ASTGT(this, JJTGT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte002) {
                      if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        throw (RuntimeException)jjte002;
                      }
                      if (jjte002 instanceof ParseException) {
                        throw (ParseException)jjte002;
                      }
                      throw (Error)jjte002;
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
                    }
/*@egen*/       
        | <BOOL_LE>/*@bgen(jjtree) #LE( 2) */
                    {
                      ASTLE jjtn003 = new ASTLE(this, JJTLE);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte003) {
                      if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        throw (RuntimeException)jjte003;
                      }
                      if (jjte003 instanceof ParseException) {
                        throw (ParseException)jjte003;
                      }
                      throw (Error)jjte003;
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
                    }
/*@egen*/       
        | <BOOL_GE>/*@bgen(jjtree) #GE( 2) */
                    {
                      ASTGE jjtn004 = new ASTGE(this, JJTGE);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
                    }
                    try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte004) {
                      if (jjtc004) {
                        jjtree.clearNodeScope(jjtn004);
                        jjtc004 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte004 instanceof RuntimeException) {
                        throw (RuntimeException)jjte004;
                      }
                      if (jjte004 instanceof ParseException) {
                        throw (ParseException)jjte004;
                      }
                      throw (Error)jjte004;
                    } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004,  2);
                      }
                    }
/*@egen*/       
    )*
}

//
// \u52a0\u7b97
//
void AdditiveExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    MultiplicativeExpression()
    (
          <PLUS>/*@bgen(jjtree) #Add( 2) */
                        {
                          ASTAdd jjtn001 = new ASTAdd(this, JJTADD);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/        MultiplicativeExpression()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/        
        | <MINUS>/*@bgen(jjtree) #Sub( 2) */
                        {
                          ASTSub jjtn002 = new ASTSub(this, JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/       MultiplicativeExpression()/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/        
        | <STRING_ADD>/*@bgen(jjtree) #StrAdd( 2) */
                        {
                          ASTStrAdd jjtn003 = new ASTStrAdd(this, JJTSTRADD);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/  MultiplicativeExpression()/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
                        }
/*@egen*/           
    )*
}

//
// \u4e57\u7b97
//
void MultiplicativeExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    UnaryExpression()
    (
          <MUL>/*@bgen(jjtree) #Mul( 2) */
                {
                  ASTMul jjtn001 = new ASTMul(this, JJTMUL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
        | <DIV>/*@bgen(jjtree) #Div( 2) */
                {
                  ASTDiv jjtn002 = new ASTDiv(this, JJTDIV);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/        
        | <MOD>/*@bgen(jjtree) #Mod( 2) */
                {
                  ASTMod jjtn003 = new ASTMod(this, JJTMOD);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/        
    )*
}

//
// \u5358\u9805
//
void UnaryExpression() :
{}
{
    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    (
          <MULTI_LINE_DELIMITER>  UnaryExpression()
        | <MINUS>/*@bgen(jjtree) #Neg( 1) */
                                  {
                                    ASTNeg jjtn001 = new ASTNeg(this, JJTNEG);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/                 UnaryExpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/        
    )
|
    UnaryExpressionNot()
|
    PrimaryExpression()
}

//
// \u5358\u9805NOT
//
void UnaryExpressionNot() :
{}
{
    (
          <BIT_NOT>/*@bgen(jjtree) #Not( 1) */
                     {
                       ASTNot jjtn001 = new ASTNot(this, JJTNOT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/  UnaryExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  1);
                       }
                     }
/*@egen*/        
        | <BOOL_NOT>/*@bgen(jjtree) #LogicalNot( 1) */
                     {
                       ASTLogicalNot jjtn002 = new ASTLogicalNot(this, JJTLOGICALNOT);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  1);
                       }
                     }
/*@egen*/               
    )
}

//
// \u305d\u306e\u4ed6\u6f14\u7b97\u5b50\u30fb\u5f0f\u30fb\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30eb\u30fb\u30ea\u30c6\u30e9\u30eb
//
void PrimaryExpression() :
{}
{
    PrimaryPrefix()
|
    try
    {
        <LPAREN>
        (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
        Expression()
        (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
        <RPAREN>
    }
    catch( ParseException e )
    {
        errorSkipTo( e );
    }
}

//
// \u30b3\u30de\u30f3\u30c9 / \u30ea\u30c6\u30e9\u30eb
//
void PrimaryPrefix() :
{}
{
      RefVariable()
    | CallCommand()
    | Literal()

    (LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*

}

//
// \u30ea\u30c6\u30e9\u30eb
//
void Literal()          :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
      try {
/*@egen*/
      <INTEGER_LITERAL>
    | <REAL_LITERAL>
    | <STRING_LITERAL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

//
// \u5909\u6570\u53c2\u7167
//
void RefVariable()              :
{/*@bgen(jjtree) RefVariable */
  ASTRefVariable jjtn000 = new ASTRefVariable(this, JJTREFVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RefVariable */
    try {
/*@egen*/
    Variable() [ ArrayIndex() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u914d\u5217\u306e\u6dfb\u5b57
//
void ArrayIndex() :
{}
{
    <LBRACKET> Expression() <RBRACKET>
}


//
// \u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057
//
void CallCommand()             :
{/*@bgen(jjtree) CallCommand */
  ASTCallCommand jjtn000 = new ASTCallCommand(this, JJTCALLCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CallCommand */
    try {
/*@egen*/
    <IDENTIFIER> [ LOOKAHEAD(2) CommandArguments() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// \u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\u6642\u306e\u5f15\u6570
//
void CommandArguments() :
{}
{
    <LPAREN>
        [ LOOKAHEAD(2) CommandArgumentList() ]
        ( LOOKAHEAD(2) <MULTI_LINE_DELIMITER> )*
    <RPAREN>
}

//
// \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u30ea\u30b9\u30c8
//
void CommandArgumentList() :
{}
{
    ( LOOKAHEAD(2)<MULTI_LINE_DELIMITER>)*
    Expression()
    (
            LOOKAHEAD(2)( <MULTI_LINE_DELIMITER> )*
            <COMMA> Expression()
    )*
}


//------------------------------------------------------------------------------
// Identifier
//------------------------------------------------------------------------------
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  // \u982d\u6587\u5b57
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  // 2\u6587\u5b57\u76ee\u4ee5\u964d
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}