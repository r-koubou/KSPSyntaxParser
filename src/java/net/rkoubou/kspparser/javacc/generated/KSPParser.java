/* KSPParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. KSPParser.java */
package net.rkoubou.kspparser.javacc.generated;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class KSPParser/*@bgen(jjtree)*/implements KSPParserTreeConstants, KSPParserConstants {/*@bgen(jjtree)*/
  protected JJTKSPParserState jjtree = new JJTKSPParserState();/** ルートの構文木 */
    ASTRootNode rootNode;

    /** パース対象のファイル */
    File file;

    /**
     * Ctor.
     */
    public KSPParser( File file ) throws IOException
    {
        this( new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) ) );
        this.file = file.getAbsoluteFile();
    }

    /**
     * パース対象ファイルのFileを取得する
     */
    public File getFile()
    {
        return file;
    }

    /**
     * 構文解析
     */
    public ASTRootNode analyzeSyntax() throws Exception
    {
        ASTRootNode rootNode = null;
        try
        {
            rootNode = KSPScript();
        }
        catch( ParseException pe )
        {
            pe.printStackTrace();
        }
        catch( Throwable e )
        {
            e.printStackTrace();
        }
        finally
        {
            // javacc が生成するトークン解析器が使用した入力ストリームのクローズ
            // 構文解析時に文法エラーがあった場合にクローズせずに抜けるっぽく
            // ファイルハンドルを掴みっ放しになってしまい他のアプリケーションからアクセスできなくなるので対処
            try{ jj_input_stream.inputStream.close(); } catch( Throwable e ){}
        }

        return rootNode;

    }

    /**
     * 意味解析
     */
    public boolean analyzeSemantic() throws Exception
    {
        return true;
    }

//------------------------------------------------------------------------------
// 文法定義ここから
//------------------------------------------------------------------------------

//##############################################################################
// MEMO: Block(), Expression() 直前のトークンに (<MULTI_LINE_DELIMITER>)* 指定はいらない。
// 複数行に跨ぐ式を成立させるため、式中は演算子として定義している。
//##############################################################################

//
// プログラム全体
//
  final public ASTRootNode KSPScript() throws ParseException {
    trace_call("KSPScript");
    try {/*@bgen(jjtree) RootNode */
  ASTRootNode jjtn000 = new ASTRootNode(this, JJTROOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:
          case ON:
          case FUNCTION:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTI_LINE_DELIMITER:{
              ;
              break;
              }
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(MULTI_LINE_DELIMITER);
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ON:{
            CallbackDeclaration();
            break;
            }
          case FUNCTION:{
            UserFunctionDeclaration();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
            jj_consume_token(EOL);
          }
        }
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("KSPScript");
    }
  }

//
// 変数の定義
//
  final public void Variable() throws ParseException {
    trace_call("Variable");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE_INT:{
        jj_consume_token(VARIABLE_INT);
        break;
        }
      case VARIABLE_INT_ARRAY:{
        jj_consume_token(VARIABLE_INT_ARRAY);
        break;
        }
      case VARIABLE_REAL:{
        jj_consume_token(VARIABLE_REAL);
        break;
        }
      case VARIABLE_REAL_ARRAY:{
        jj_consume_token(VARIABLE_REAL_ARRAY);
        break;
        }
      case VARIABLE_STRING:{
        jj_consume_token(VARIABLE_STRING);
        break;
        }
      case VARIABLE_STRING_ARRAY:{
        jj_consume_token(VARIABLE_STRING_ARRAY);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Variable");
    }
  }

//
// 変数宣言
//
  final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
      jj_consume_token(DECLARE);
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(MULTI_LINE_DELIMITER);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONST:
      case POLYPHONIC:
      case UI_DECLARE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:{
          jj_consume_token(CONST);
          break;
          }
        case POLYPHONIC:{
          jj_consume_token(POLYPHONIC);
          break;
          }
        case UI_DECLARE:{
          jj_consume_token(UI_DECLARE);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      VariableDeclarator();
    } finally {
      trace_return("VariableDeclaration");
    }
  }

//
// 変数宣言(詳細)
//
  final public void VariableDeclarator() throws ParseException {
    trace_call("VariableDeclarator");
    try {/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_5:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        Variable();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          VariableInitializer();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("VariableDeclarator");
    }
  }

//
// 初期値代入
//
  final public void VariableInitializer() throws ParseException {
    trace_call("VariableInitializer");
    try {
      if (jj_2_3(3)) {
        ArrayInitializer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
        case MULTI_LINE_DELIMITER:
        case VARIABLE_INT:
        case VARIABLE_INT_ARRAY:
        case VARIABLE_REAL:
        case VARIABLE_REAL_ARRAY:
        case VARIABLE_STRING:
        case VARIABLE_STRING_ARRAY:
        case MINUS:
        case LPAREN:
        case IDENTIFIER:{
          Expression();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("VariableInitializer");
    }
  }

//
// 配列変数初期値代入
//
  final public void ArrayInitializer() throws ParseException {
    trace_call("ArrayInitializer");
    try {
      jj_consume_token(LPAREN);
      Expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_7;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("ArrayInitializer");
    }
  }

//
// コールバック本体
//
  final public void CallbackDeclaration() throws ParseException {
    trace_call("CallbackDeclaration");
    try {/*@bgen(jjtree) CallbackDeclaration */
  ASTCallbackDeclaration jjtn000 = new ASTCallbackDeclaration(this, JJTCALLBACKDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ON);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(IDENTIFIER);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_9;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          CallbackArgument();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(EOL);
        Block();
        jj_consume_token(END);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_10;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(ON);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("CallbackDeclaration");
    }
  }

//
// コールバック・引数宣言
//
  final public void CallbackArgument() throws ParseException {
    trace_call("CallbackArgument");
    try {/*@bgen(jjtree) CallbackArgument */
  ASTCallbackArgument jjtn000 = new ASTCallbackArgument(this, JJTCALLBACKARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(LPAREN);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_11;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        CallbackArgumentList();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("CallbackArgument");
    }
  }

//
// コールバック・引数リスト
//
  final public void CallbackArgumentList() throws ParseException {
    trace_call("CallbackArgumentList");
    try {/*@bgen(jjtree) CallbackArgumentList */
  ASTCallbackArgumentList jjtn000 = new ASTCallbackArgumentList(this, JJTCALLBACKARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Variable();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          Variable();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("CallbackArgumentList");
    }
  }

//
// ユーザー定義関数本体
//
  final public void UserFunctionDeclaration() throws ParseException {
    trace_call("UserFunctionDeclaration");
    try {/*@bgen(jjtree) UserFunctionDeclaration */
  ASTUserFunctionDeclaration jjtn000 = new ASTUserFunctionDeclaration(this, JJTUSERFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FUNCTION);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_13;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(IDENTIFIER);
        jj_consume_token(EOL);
        Block();
        jj_consume_token(END);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_14;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(FUNCTION);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("UserFunctionDeclaration");
    }
  }

//
// コールバック本体 / ユーザー定義関数本体のスコープ本体
//
  final public void Block() throws ParseException {
    trace_call("Block");
    try {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_15:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_15;
          }
          BlockStatement();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("Block");
    }
  }

//
// スコープ中の式
//
  final public void BlockStatement() throws ParseException {
    trace_call("BlockStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECLARE:{
        VariableDeclaration();
        break;
        }
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case EOL:
      case MULTI_LINE_DELIMITER:
      case IF:
      case SELECT:
      case WHILE:
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case LPAREN:
      case IDENTIFIER:{
        Statement();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("BlockStatement");
    }
  }

//
// 各種ステートメントの定義
//
  final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case LPAREN:
      case IDENTIFIER:{
        StatementExpression();
        break;
        }
      case IF:{
        IfStatement();
        break;
        }
      case SELECT:{
        SelectStatement();
        break;
        }
      case WHILE:{
        WhileStatement();
        break;
        }
      case MULTI_LINE_DELIMITER:{
        jj_consume_token(MULTI_LINE_DELIMITER);
        break;
        }
      case EOL:{
        jj_consume_token(EOL);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Statement");
    }
  }

  final public void StatementExpression() throws ParseException {
    trace_call("StatementExpression");
    try {
      if (jj_2_5(3)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
        case VARIABLE_INT:
        case VARIABLE_INT_ARRAY:
        case VARIABLE_REAL:
        case VARIABLE_REAL_ARRAY:
        case VARIABLE_STRING:
        case VARIABLE_STRING_ARRAY:
        case LPAREN:
        case IDENTIFIER:{
          PrimaryExpression();
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("StatementExpression");
    }
  }

//
// if
//
  final public void IfStatement() throws ParseException {
    trace_call("IfStatement");
    try {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_16;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          Block();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(END);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_17;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(IF);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("IfStatement");
    }
  }

//
// select
//
  final public void SelectStatement() throws ParseException {
    trace_call("SelectStatement");
    try {/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(this, JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SELECT);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_18;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(LPAREN);
        Expression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            break label_19;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(RPAREN);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_20;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(EOL);
        label_21:
        while (true) {
          CaseStatement();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_21;
          }
        }
        jj_consume_token(END);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_22;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(SELECT);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("SelectStatement");
    }
  }

//
// case @select
//
  final public void CaseStatement() throws ParseException {
    trace_call("CaseStatement");
    try {/*@bgen(jjtree) CaseStatement */
  ASTCaseStatement jjtn000 = new ASTCaseStatement(this, JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CASE);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_23;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(INTEGER_LITERAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TO:{
          jj_consume_token(TO);
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTI_LINE_DELIMITER:{
              ;
              break;
              }
            default:
              jj_la1[33] = jj_gen;
              break label_24;
            }
            jj_consume_token(MULTI_LINE_DELIMITER);
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MINUS:{
            jj_consume_token(MINUS);
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          jj_consume_token(INTEGER_LITERAL);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(EOL);
        Block();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            break label_25;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("CaseStatement");
    }
  }

//
// while
//
  final public void WhileStatement() throws ParseException {
    trace_call("WhileStatement");
    try {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            break label_26;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
        jj_consume_token(END);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_27;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(WHILE);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("WhileStatement");
    }
  }

//------------------------------------------------------------------------------
// 式
//------------------------------------------------------------------------------
  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      ConditionalOrExpression();
    } finally {
      trace_return("Expression");
    }
  }

//
// 代入式
//
  final public void Assignment() throws ParseException {
    trace_call("Assignment");
    try {/*@bgen(jjtree) #Assignment( 2) */
  ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Variable();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ArrayIndex();
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(ASSIGN);
        Expression();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
      }
    } finally {
      trace_return("Assignment");
    }
  }

//
// 条件式OR
//
  final public void ConditionalOrExpression() throws ParseException {
    trace_call("ConditionalOrExpression");
    try {
      ConditionalAndExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_OR:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_28;
        }
        jj_consume_token(BOOL_OR);
ASTConditionalOr jjtn001 = new ASTConditionalOr(this, JJTCONDITIONALOR);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
        try {
          ConditionalAndExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               {if (true) throw (RuntimeException)jjte001;}
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               {if (true) throw (ParseException)jjte001;}
                                             }
                                             {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
        }
      }
    } finally {
      trace_return("ConditionalOrExpression");
    }
  }

//
// 条件式AND
//
  final public void ConditionalAndExpression() throws ParseException {
    trace_call("ConditionalAndExpression");
    try {
      InclusiveOrExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_AND:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_29;
        }
        jj_consume_token(BOOL_AND);
ASTConditionalAnd jjtn001 = new ASTConditionalAnd(this, JJTCONDITIONALAND);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
        try {
          InclusiveOrExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
        }
      }
    } finally {
      trace_return("ConditionalAndExpression");
    }
  }

//
// 論理積
//
  final public void InclusiveOrExpression() throws ParseException {
    trace_call("InclusiveOrExpression");
    try {
      AndExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          break label_30;
        }
        jj_consume_token(BIT_OR);
ASTInclusiveOr jjtn001 = new ASTInclusiveOr(this, JJTINCLUSIVEOR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
          AndExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
        }
      }
    } finally {
      trace_return("InclusiveOrExpression");
    }
  }

//
// 論理和
//
  final public void AndExpression() throws ParseException {
    trace_call("AndExpression");
    try {
      EqualityExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_31;
        }
        jj_consume_token(BIT_AND);
ASTAnd jjtn001 = new ASTAnd(this, JJTAND);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          EqualityExpression();
        } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
        }
      }
    } finally {
      trace_return("AndExpression");
    }
  }

//
// 比較
//
  final public void EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {
      RelationalExpression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_EQ:
        case BOOL_NE:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_EQ:{
          jj_consume_token(BOOL_EQ);
ASTEqual jjtn001 = new ASTEqual(this, JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
          try {
            RelationalExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
          }
          break;
          }
        case BOOL_NE:{
          jj_consume_token(BOOL_NE);
ASTNotEqual jjtn002 = new ASTNotEqual(this, JJTNOTEQUAL);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
          try {
            RelationalExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte002;}
                      }
                      if (jjte002 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte002;}
                      }
                      {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
          }
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("EqualityExpression");
    }
  }

//
// 比較（不等号）
//
  final public void RelationalExpression() throws ParseException {
    trace_call("RelationalExpression");
    try {
      AdditiveExpression();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_GT:
        case BOOL_LT:
        case BOOL_GE:
        case BOOL_LE:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_33;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL_LT:{
          jj_consume_token(BOOL_LT);
ASTLT jjtn001 = new ASTLT(this, JJTLT);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
          try {
            AdditiveExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
          }
          break;
          }
        case BOOL_GT:{
          jj_consume_token(BOOL_GT);
ASTGT jjtn002 = new ASTGT(this, JJTGT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
          try {
            AdditiveExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte002;}
                      }
                      if (jjte002 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte002;}
                      }
                      {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
          }
          break;
          }
        case BOOL_LE:{
          jj_consume_token(BOOL_LE);
ASTLE jjtn003 = new ASTLE(this, JJTLE);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
          try {
            AdditiveExpression();
          } catch (Throwable jjte003) {
if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte003;}
                      }
                      if (jjte003 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte003;}
                      }
                      {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
          }
          break;
          }
        case BOOL_GE:{
          jj_consume_token(BOOL_GE);
ASTGE jjtn004 = new ASTGE(this, JJTGE);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
          try {
            AdditiveExpression();
          } catch (Throwable jjte004) {
if (jjtc004) {
                        jjtree.clearNodeScope(jjtn004);
                        jjtc004 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte004 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte004;}
                      }
                      if (jjte004 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte004;}
                      }
                      {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004,  2);
                      }
          }
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("RelationalExpression");
    }
  }

//
// 加算
//
  final public void AdditiveExpression() throws ParseException {
    trace_call("AdditiveExpression");
    try {
      MultiplicativeExpression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case STRING_ADD:{
          ;
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          break label_34;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
ASTAdd jjtn001 = new ASTAdd(this, JJTADD);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
          try {
            MultiplicativeExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
          }
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
ASTSub jjtn002 = new ASTSub(this, JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
            MultiplicativeExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
          }
          break;
          }
        case STRING_ADD:{
          jj_consume_token(STRING_ADD);
ASTStrAdd jjtn003 = new ASTStrAdd(this, JJTSTRADD);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
          try {
            MultiplicativeExpression();
          } catch (Throwable jjte003) {
if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
          }
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AdditiveExpression");
    }
  }

//
// 乗算
//
  final public void MultiplicativeExpression() throws ParseException {
    trace_call("MultiplicativeExpression");
    try {
      UnaryExpression();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:
        case DIV:
        case MOD:{
          ;
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          break label_35;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MUL:{
          jj_consume_token(MUL);
ASTMul jjtn001 = new ASTMul(this, JJTMUL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
          try {
            UnaryExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
          }
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
ASTDiv jjtn002 = new ASTDiv(this, JJTDIV);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
            UnaryExpression();
          } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
          }
          break;
          }
        case MOD:{
          jj_consume_token(MOD);
ASTMod jjtn003 = new ASTMod(this, JJTMOD);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
          try {
            UnaryExpression();
          } catch (Throwable jjte003) {
if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
          }
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("MultiplicativeExpression");
    }
  }

//
// 単項
//
  final public void UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI_LINE_DELIMITER:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:{
          jj_consume_token(MULTI_LINE_DELIMITER);
          UnaryExpression();
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
ASTNeg jjtn001 = new ASTNeg(this, JJTNEG);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
          try {
            UnaryExpression();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
          }
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case LPAREN:
      case IDENTIFIER:{
        PrimaryExpression();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("UnaryExpression");
    }
  }

//
// その他演算子・式・コマンドコール・リテラル
//
  final public void PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case IDENTIFIER:{
        PrimaryPrefix();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryExpression");
    }
  }

//
// コマンド / リテラル
//
  final public void PrimaryPrefix() throws ParseException {
    trace_call("PrimaryPrefix");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:{
        RefVariable();
        break;
        }
      case IDENTIFIER:{
        CallCommand();
        break;
        }
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:{
        Literal();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryPrefix");
    }
  }

//
// リテラル
//
  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:{
          jj_consume_token(INTEGER_LITERAL);
          break;
          }
        case REAL_LITERAL:{
          jj_consume_token(REAL_LITERAL);
          break;
          }
        case STRING_LITERAL:{
          jj_consume_token(STRING_LITERAL);
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
    } finally {
      trace_return("Literal");
    }
  }

//
// 変数参照
//
  final public void RefVariable() throws ParseException {
    trace_call("RefVariable");
    try {/*@bgen(jjtree) RefVariable */
  ASTRefVariable jjtn000 = new ASTRefVariable(this, JJTREFVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Variable();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ArrayIndex();
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("RefVariable");
    }
  }

//
// 配列の添字
//
  final public void ArrayIndex() throws ParseException {
    trace_call("ArrayIndex");
    try {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
    } finally {
      trace_return("ArrayIndex");
    }
  }

//
// コマンド呼び出し
//
  final public void CallCommand() throws ParseException {
    trace_call("CallCommand");
    try {/*@bgen(jjtree) CallCommand */
  ASTCallCommand jjtn000 = new ASTCallCommand(this, JJTCALLCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IDENTIFIER);
        if (jj_2_6(2)) {
          CommandArguments();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("CallCommand");
    }
  }

//
// コマンド呼び出し時の引数
//
  final public void CommandArguments() throws ParseException {
    trace_call("CommandArguments");
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
      case MULTI_LINE_DELIMITER:
      case VARIABLE_INT:
      case VARIABLE_INT_ARRAY:
      case VARIABLE_REAL:
      case VARIABLE_REAL_ARRAY:
      case VARIABLE_STRING:
      case VARIABLE_STRING_ARRAY:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:{
        CommandArgumentList();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("CommandArguments");
    }
  }

//
// コマンド引数リスト
//
  final public void CommandArgumentList() throws ParseException {
    trace_call("CommandArgumentList");
    try {
      Expression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI_LINE_DELIMITER:
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_36;
        }
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MULTI_LINE_DELIMITER:{
            ;
            break;
            }
          default:
            jj_la1[60] = jj_gen;
            break label_37;
          }
          jj_consume_token(MULTI_LINE_DELIMITER);
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } finally {
      trace_return("CommandArgumentList");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(BOOL_AND)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(BOOL_OR)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(13)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(13)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(DECLARE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(13)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(MULTI_LINE_DELIMITER)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(13)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(STRING_ADD)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(BOOL_GE)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(BOOL_LE)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(BOOL_GT)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(BOOL_LT)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(BOOL_NE)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(BOOL_EQ)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public KSPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[61];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x142000,0x2000,0x140000,0x1000,0xf8000000,0x38000,0x38000,0x0,0x0,0xf8002c80,0x2000,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0xfca07c80,0xfca03c80,0xf8000c80,0x2000,0x400000,0x2000,0x2000,0x2000,0x2000,0x1000000,0x2000,0x2000,0x0,0x2000,0x0,0x2000000,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0xf8002c80,0xf8000c80,0xf8000c80,0xc80,0x0,0xf8002c80,0x2000,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x400000,0x400,0x2101001,0x1000000,0x0,0x0,0x0,0x100000,0x0,0x0,0x1000000,0x0,0x0,0x2100001,0x2100001,0x2100001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x400000,0x200,0x100,0x20000,0x10000,0x60,0x60,0x1e,0x1e,0x81800,0x81800,0xe000,0xe000,0x1000,0x2101001,0x2100001,0x2000001,0x0,0x400000,0x2101001,0x1000000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public KSPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public KSPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KSPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public KSPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KSPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public KSPParser(KSPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(KSPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 61; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 61; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
