# Encoding: utf-8

#
# [available variables]
#
# ${level}
# ${line}
# ${colmn}
# ${tokenLen}
# ${symbolname}  Using SynbolDefinition only
#

#-------------------------------------------------------------------------------
# Lexical Error
#-------------------------------------------------------------------------------
error.lexical = ${level}	${line}	Syntax Error

#-------------------------------------------------------------------------------
# Variable
#-------------------------------------------------------------------------------

# Declared variable outside "on init" callback
error.variable.declared.oninit = ${level}	${line}	${symbolname} : Declared variable outside "on init" callback

# Variable already declared
error.variable.already.declared = ${level}	${line}	${symbolname} : Variable already declared

# NI Reserved variable
error.variable.reserved = ${level}	${line}	${symbolname} : Reserved KSP internal variable

# NI Reserved prefix
error.variable.reserved.prefix = ${level}	${line}	${symbolname} : $NI_, $_CONTROL_PAR_, $EVENT_PAR_, $ENGINE_PAR_ reserved KONTAKT internal variable

# Unknown UI type (== Not registered to this parser(/data/uitypes.txt) )
warning.variable.ui.unknown = ${level}	${line}	${symbolname} : Unknown UI type (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# PreProcessor
#-------------------------------------------------------------------------------

# Unknown PreProcessor symbol defined
warning.preprocessor.unknown.defined = ${level}	${line}	${symbolname} : Unknown PreProcessor symbol

# PreProcessor symbol already declared
warning.preprocessor.already.defined = ${level}	${line}	${symbolname} : PreProcessor symbol already declared

#-------------------------------------------------------------------------------
# Callback
#-------------------------------------------------------------------------------

# Callback already declared
error.callback.already.declared = ${level}	${line}	${symbolname} : Callback already declared

# Unknown callback (== Callback is not registered to this parser(/data/callbacks.txt) )
warning.callback.unknown = ${level}	${line}	${symbolname} : Unknown callback (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# Command
#-------------------------------------------------------------------------------

# Unknown command (== Command is not registered to this parser(/data/commands.txt) )
warning.command.unknown = ${level}	${line}	${symbolname} : Unknown command (Not listed at KSP Reference Manual)

#-------------------------------------------------------------------------------
# User Function
#-------------------------------------------------------------------------------

# User defined Functions is already declared
error.userfunction.already.declared = ${level}	${line}	${symbolname} : User defined Function already declared

#-------------------------------------------------------------------------------
# Semantic Analyzer
#-------------------------------------------------------------------------------

# Variable not declared
error.semantic.variable.not.declared = ${level}	${line}	${symbolname} : Variable not declared

# Variable not initialized
warning.semantic.variable.init = ${level}	${line}	${symbolname} : Not initialized

# Not allowed call in callback
error.semantic.command.not.allowed = ${level}	${line}	${symbolname} : Not allowed call in this callback

# Unknown KSP Command
warning.semantic.command.unknown = ${level}	${line}	${symbolname} : Unknown KSP Command

# Unmatch arguments to command call
error.semantic.command.argcount = ${level}	${line}	${symbolname} : Unmatch argument(s) to command call

# Argument incompatible type
error.semantic.incompatible.arg = ${level}	${line}	${symbolname} : Argument(s) incompatible type

# Conditional Expression is not boolean
error.semantic.cond.boolean = ${level}	${line}	Conditional Expression is not boolean

# Binary Operator : Not compatible - left and right side expression
error.semantic.binopr.different = ${level}	${line}	Not compatible : left and right side expression
