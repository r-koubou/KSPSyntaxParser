{
"##!---------------- Auto generated code: Generated by /data/Excel2Snippet.py ----------------##":{},
"## NOTE: Remove comma after last object if you re-Generated":{},

    "separate_comment":
    {
        "prefix": "separate",
        "body":[
            "{--------------------------------------------------------------------------------}"
        ],
        "description": "Insert a comment as separator"
    },
    "section_comment":
    {
        "prefix": "section",
        "body":[
            "{--------------------------------------------------------------------------------}",
            "{",
            "    ${1:comment}",
            "}",
            "{--------------------------------------------------------------------------------}"
        ],
        "description": "Insert a comment for section"
    },
    "comment":
    {
        "prefix": "doc",
        "body":[
            "{",
            "    ${1:undocumented}",
            "}"
        ],
        "description": "Insert a document comment"
    },
    "int":
    {
        "prefix": "int",
        "body":[
            "declare $${1:name}"
        ],
        "description": "declare a user-defined variable to store a single integer value"
    },
    "inta":
    {
        "prefix": "int array",
        "body":[
            "declare %${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined array to store single integer values at specific indices"
    },
    "real":
    {
        "prefix": "real",
        "body":[
            "declare ~${1:name}"
        ],
        "description": "declare a user-defined variable to store a single real value"
    },
    "reala":
    {
        "prefix": "real array",
        "body":[
            "declare ?${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined array to store single real values at specific indices"
    },
    "string":
    {
        "prefix": "string",
        "body":[
            "declare @${1:name}"
        ],
        "description": "declare a user-defined string variable to store text"
    },
    "stringa":
    {
        "prefix": "string array",
        "body":[
            "declare !${1:name}[ ${2:size} ]"
        ],
        "description": "declare a user-defined string array to store text strings at specified indices"
    },
    "polyphonicv":
    {
        "prefix": "polyphonic",
        "body":[
            "declare polyphonic $${1:name}"
        ],
        "description": "declare a user-defined polyphonic variable to store a single integer value per note event"
    },
    "on async_complete":
    {
        "prefix": "on async_complete",
        "body":[
            "{",
            "    ${1:async complete callback, triggered after the execution of any load/save command}",
            "}",
            "on async_complete",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "async complete callback, triggered after the execution of any load/save command"
    },
    "on controller":
    {
        "prefix": "on controller",
        "body":[
            "{",
            "    ${1:MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received}",
            "}",
            "on controller",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received"
    },
    "on init":
    {
        "prefix": "on init",
        "body":[
            "{",
            "    ${1:initialization callback, executed when the script was successfully analyzed}",
            "}",
            "on init",
            "    make_perfview",
            "    message( \"\" )",
            "    set_script_title( \"${2:title}\" )",
            "    ${3:{your code here}}",
            "end on"
        ],
        "description": "initialization callback, executed when the script was successfully analyzed"
    },
    "on listener":
    {
        "prefix": "on listener",
        "body":[
            "{",
            "    ${1:listener callback, executed at definable time intervals or whenever a transport command is received}",
            "}",
            "on listener",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "listener callback, executed at definable time intervals or whenever a transport command is received"
    },
    "on note":
    {
        "prefix": "on note",
        "body":[
            "{",
            "    ${1:note callback, executed whenever a note on message is received}",
            "}",
            "on note",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "note callback, executed whenever a note on message is received"
    },
    "on persistence_changed":
    {
        "prefix": "on persistence_changed",
        "body":[
            "{",
            "    ${1:executed after the init callback or whenever a snapshot has been loaded}",
            "}",
            "on persistence_changed",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "executed after the init callback or whenever a snapshot has been loaded"
    },
    "on pgs_changed":
    {
        "prefix": "on pgs_changed",
        "body":[
            "{",
            "    ${1:executed whenever any pgs_set_key_val() command is executed in any script}",
            "}",
            "on pgs_changed",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "executed whenever any pgs_set_key_val() command is executed in any script"
    },
    "on poly_at":
    {
        "prefix": "on poly_at",
        "body":[
            "{",
            "    ${1:polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received}",
            "}",
            "on poly_at",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received"
    },
    "on release":
    {
        "prefix": "on release",
        "body":[
            "{",
            "    ${1:release callback, executed whenever a note off message is received}",
            "}",
            "on release",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "release callback, executed whenever a note off message is received"
    },
    "on rpn":
    {
        "prefix": "on rpn",
        "body":[
            "{",
            "    ${1:rpn(registered parameter number) callback message is received}",
            "}",
            "on rpn",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "rpn(registered parameter number) callback message is received"
    },
    "on nrpn":
    {
        "prefix": "on nrpn",
        "body":[
            "{",
            "    ${1:nrpn(unregistered parameter number) callback message is received}",
            "}",
            "on nrpn",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "nrpn(unregistered parameter number) callback message is received"
    },
    "on ui_control":
    {
        "prefix": "on ui_control",
        "body":[
            "{",
            "    ${1:UI callback, executed whenever the user changes the respective UI element}",
            "}",
            "on ui_control( $${2:uiVariable} )",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "UI callback, executed whenever the user changes the respective UI element"
    },
    "on ui_update":
    {
        "prefix": "on ui_update",
        "body":[
            "{",
            "    ${1:UI update callback, executed with every GUI change in KONTAKT}",
            "}",
            "on ui_update",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "UI update callback, executed with every GUI change in KONTAKT"
    },
    "declare":
    {
        "prefix": "declare",
        "body":[
            "declare ${1:name}"
        ],
        "description": "declare a user-defined variable"
    },
    "make_instr_persistent":
    {
        "prefix": "make_instr_persistent",
        "body":[
            "make_instr_persistent( ${1:variable} )"
        ],
        "description": "retain the value of a variable only with the instrument"
    },
    "make_persistent":
    {
        "prefix": "make_persistent",
        "body":[
            "make_persistent( ${1:variable} )"
        ],
        "description": "retain the value of a variable whith the instrument and snapshot"
    },
    "read_persistent_var":
    {
        "prefix": "read_persistent_var",
        "body":[
            "read_persistent_var( ${1:variable} )"
        ],
        "description": "instantly reloads the value of a variable that was saved via the make_persistent()command"
    },
    "ui_button":
    {
        "prefix": "ui_button",
        "body":[
            "declare ui_button $${1:<variable-name>}"
        ],
        "description": "create a user interface button"
    },
    "ui_knob":
    {
        "prefix": "ui_knob",
        "body":[
            "declare ui_knob $${1:<variable-name>}( ${2:<min>}, ${3:<max>}, ${4:<display-ratio>} )"
        ],
        "description": "create a user interface button"
    },
    "ui_file_selector":
    {
        "prefix": "ui_file_selector",
        "body":[
            "declare ui_file_selector $${1:<variable-name>}"
        ],
        "description": "create a user interface button"
    },
    "ui_label":
    {
        "prefix": "ui_label",
        "body":[
            "declare ui_label $${1:<variable-name>}( ${2:<width(unit=grid)>}, ${3:<height(unit=grid)>} )"
        ],
        "description": "create a user interface text label"
    },
    "ui_level_meter":
    {
        "prefix": "ui_level_meter",
        "body":[
            "declare ui_level_meter $${1:<variable-name>}"
        ],
        "description": "create a level meter"
    },
    "ui_menu":
    {
        "prefix": "ui_menu",
        "body":[
            "declare ui_menu $${1:<variable-name>}"
        ],
        "description": "create a user interface drop-down menu"
    },
    "ui_slider":
    {
        "prefix": "ui_slider",
        "body":[
            "declare ui_slider $${1:<variable-name>}( ${2:<min>}, ${3:<max>} )"
        ],
        "description": "create a user interface slider"
    },
    "ui_switch":
    {
        "prefix": "ui_switch",
        "body":[
            "declare ui_switch $${1:<variable-name>}"
        ],
        "description": "create a user interface switch"
    },
    "ui_table":
    {
        "prefix": "ui_table",
        "body":[
            "declare ui_table %${1:<array>}[${2:colmns}]( ${3:<width(unit=grid)>}, ${4:<height(unit=grid)>}, ${5:<range>} )"
        ],
        "description": "create a user interface switch"
    },
    "ui_text_edit":
    {
        "prefix": "ui_text_edit",
        "body":[
            "declare ui_text_edit @${1:<variable-name>}"
        ],
        "description": "create a text edit field"
    },
    "ui_value_edit":
    {
        "prefix": "ui_value_edit",
        "body":[
            "declare ui_value_edit $${1:<variable-name>}( ${2:<min>}, ${3:<max>}, ${4:display-ratio} )"
        ],
        "description": "create a user interface number box"
    },
    "ui_waveform":
    {
        "prefix": "ui_waveform",
        "body":[
            "declare ui_waveform $${1:<variable-name>}( ${2:<width(unit=grid)>}, ${3:<height(unit=grid)>} )"
        ],
        "description": "create a waveform control to display zones and slices. Can also be used to control specific parameters per slice and for MIDI drag & drop functionality."
    },
    "ui_xy":
    {
        "prefix": "ui_xy",
        "body":[
            "declare ui_xy ?$${1:<variable-name>}[ ${2:num-of-elements} ]"
        ],
        "description": "create an XY pad"
    },
    "if":
    {
        "prefix": "if",
        "body":[
            "if( ${1:<condition>} )",
            "    ${2:{your code here}}",
            "end if"
        ],
        "description": "if statement"
    },
    "ifelse":
    {
        "prefix": "ifelse",
        "body":[
            "if( ${1:<condition>} )",
            "    ${2:{your code here}}",
            "else",
            "    ${3:{your code here}}",
            "end if"
        ],
        "description": "if...else statement"
    },
    "select":
    {
        "prefix": "select",
        "body":[
            "select( ${1:<variable>} )",
            "    case ${2:case}:",
            "        ${3:{your code here}}",
            "end select"
        ],
        "description": "if statement"
    },
    "while":
    {
        "prefix": "while",
        "body":[
            "while( ${1:<condition>} )",
            "    ${2:{your code here}}",
            "end while"
        ],
        "description": "while statement"
    },
    "boolean_op_gt":
    {
        "prefix": ">=",
        "body":[
            "${1:x} >= ${2:y}"
        ],
        "description": "Boolean Operator: grater than or equal"
    },
    "boolean_op_lt":
    {
        "prefix": "<=",
        "body":[
            "${1:x} <= ${2:y}"
        ],
        "description": "Boolean Operator: less than or equal"
    },
    "boolean_op_eq":
    {
        "prefix": "=",
        "body":[
            "${1:x} = ${2:y}"
        ],
        "description": "Boolean Operator: equal"
    },
    "boolean_op_not_eq":
    {
        "prefix": "#",
        "body":[
            "${1:x} # ${2:y}"
        ],
        "description": "Boolean Operator: not equal"
    },
    "in_range":
    {
        "prefix": "in_range",
        "body":[
            "in_range( ${1:x}, ${2:y}, ${3:z} )"
        ],
        "description": "Boolean Operator: true if x is between y and z"
    },
    "boolean_op_not":
    {
        "prefix": "not",
        "body":[
            "not ${1:x}"
        ],
        "description": "Boolean Operator: true if a is false and vice versa"
    },
    "boolean_op_and":
    {
        "prefix": "and",
        "body":[
            "${1:a} and ${2:b}"
        ],
        "description": "Boolean Operator: true if a is true and b is true"
    },
    "boolean_op_or":
    {
        "prefix": "or",
        "body":[
            "${1:a} or ${2:b}"
        ],
        "description": "Boolean Operator: true if a is true or b is true"
    },
    "inc":
    {
        "prefix": "inc",
        "body":[
            "inc( ${1:x} )"
        ],
        "description": "increment an expression by 1 (x + 1)"
    },
    "dec":
    {
        "prefix": "dec",
        "body":[
            "dec( ${1:x} )"
        ],
        "description": "decrement an expression by 1 (x – 1)"
    },
    "mod":
    {
        "prefix": "mod",
        "body":[
            "${1:x} mod ${2:y}"
        ],
        "description": "modulo; returns the remainder of a division"
    },
    "exp":
    {
        "prefix": "exp",
        "body":[
            "exp( ${1:x} )"
        ],
        "description": "exponential function (returns the value of e^x)"
    },
    "log":
    {
        "prefix": "log",
        "body":[
            "log( ${1:x} )"
        ],
        "description": "logarithmic function"
    },
    "pow":
    {
        "prefix": "pow",
        "body":[
            "pow( ${1:x}, ${2:y} )"
        ],
        "description": "power (returns the value of x^y)"
    },
    "sqrt":
    {
        "prefix": "sqrt",
        "body":[
            "sqrt( ${1:x} )"
        ],
        "description": "square root"
    },
    "ceil":
    {
        "prefix": "ceil",
        "body":[
            "ceil( ${1:x} )"
        ],
        "description": "ceiling (round up) ceil(2.3) = 3.0"
    },
    "floor":
    {
        "prefix": "floor",
        "body":[
            "floor( ${1:x} )"
        ],
        "description": "floor (round down) floor(2.8) = 2.0"
    },
    "round":
    {
        "prefix": "round",
        "body":[
            "round( ${1:x} )"
        ],
        "description": "round (round to nearest) round(2.3) = 2.0 round(2.8) = 3.0"
    },
    "cos":
    {
        "prefix": "cos",
        "body":[
            "cos( ${1:x} )"
        ],
        "description": "cosine function"
    },
    "sin":
    {
        "prefix": "sin",
        "body":[
            "sin( ${1:x} )"
        ],
        "description": "sine function"
    },
    "tan":
    {
        "prefix": "tan",
        "body":[
            "tan( ${1:x} )"
        ],
        "description": "tangent function"
    },
    "acos":
    {
        "prefix": "acos",
        "body":[
            "acos( ${1:x} )"
        ],
        "description": "arccosine function"
    },
    "asin":
    {
        "prefix": "asin",
        "body":[
            "asin( ${1:x} )"
        ],
        "description": "arcsine (inverse sine function)"
    },
    "atan":
    {
        "prefix": "atan",
        "body":[
            "atan( ${1:x} )"
        ],
        "description": "arctangent (inverse tangent function)"
    },
    "bitwise_and":
    {
        "prefix": "and",
        "body":[
            "${1:x} .and. ${2:y}"
        ],
        "description": "Bitwise Operator: \"and\""
    },
    "bitwise_or":
    {
        "prefix": "or",
        "body":[
            "${1:x} .or. ${2:y}"
        ],
        "description": "Bitwise Operator: \"or\""
    },
    "bitwise_not":
    {
        "prefix": "not",
        "body":[
            ".not. ${1:x}"
        ],
        "description": "Bitwise Operator: \"negation\""
    },
    "sh_left":
    {
        "prefix": "sh_left",
        "body":[
            "sh_left( ${1:<expression>}, ${2:<shift-bits>} )"
        ],
        "description": "shifts the bits in <expression> by the amount of <shift-bits> to the left"
    },
    "sh_right":
    {
        "prefix": "sh_right",
        "body":[
            "sh_right( ${1:<expression>}, ${2:<shift-bits>} )"
        ],
        "description": "shifts the bits in <expression> by the amount of <shift-bits> to the right"
    },
    "random":
    {
        "prefix": "random",
        "body":[
            "random( ${1:<min>}, ${2:<max>} )"
        ],
        "description": "generate a random integer in the range <min> to <max>"
    },
    "int_to_real":
    {
        "prefix": "int_to_real",
        "body":[
            "int_to_real( ${1:<integer value>} )"
        ],
        "description": "converts an integer value into a real number"
    },
    "real_to_int":
    {
        "prefix": "real_to_int",
        "body":[
            "real_to_int( ${1:<real value>} )"
        ],
        "description": "converts a real number into an integer"
    },
    "msb":
    {
        "prefix": "msb",
        "body":[
            "msb( ${1:<value>} )"
        ],
        "description": "return the MSB portion (most significant byte) of a 14 bit value"
    },
    "lsb":
    {
        "prefix": "lsb",
        "body":[
            "lsb( ${1:<value>} )"
        ],
        "description": "return the LSB portion (least significant byte) of a 14 bit value"
    },
    "exit":
    {
        "prefix": "exit",
        "body":[
            "exit"
        ],
        "description": "immediately stops a callback or exits a function"
    },
    "ignore_controller":
    {
        "prefix": "ignore_controller",
        "body":[
            "ignore_controller"
        ],
        "description": "ignore a controller event in a controller callback"
    },
    "message":
    {
        "prefix": "message",
        "body":[
            "message( ${1:<variable/text>} )"
        ],
        "description": "display text in the status line of KONTAKT"
    },
    "note_off":
    {
        "prefix": "note_off",
        "body":[
            "note_off( ${1:<ID-number>} )"
        ],
        "description": "send a note off message to a specific note"
    },
    "play_note":
    {
        "prefix": "play_note",
        "body":[
            "play_note( ${1:<note-number>}, ${2:<velocity>}, ${3:<sample-offset>}, ${4:<duration>} )"
        ],
        "description": "generate a MIDI note, i.e. generate a note on message followed by a note off message"
    },
    "set_controller":
    {
        "prefix": "set_controller",
        "body":[
            "set_controller( ${1:<MIDI CC number/$VCC_PITCH_BEND/$VCC_MONO>}, ${2:<value>} )"
        ],
        "description": "send a MIDI CC, pitchbend or channel pressure value"
    },
    "set_rpn":
    {
        "prefix": "set_rpn",
        "body":[
            "set_rpn( ${1:<address>}, ${2:<value>} )"
        ],
        "description": "send a rpn message"
    },
    "set_nrpn":
    {
        "prefix": "set_nrpn",
        "body":[
            "set_nrpn( ${1:<address>}, ${2:<value>} )"
        ],
        "description": "send a nrpn message"
    },
    "by_marks":
    {
        "prefix": "by_marks",
        "body":[
            "by_marks( ${1:<bit-mask>} )"
        ],
        "description": "a user defined group of events (or event IDs)"
    },
    "change_note":
    {
        "prefix": "change_note",
        "body":[
            "change_note( ${1:<ID-number>}, ${2:note-number} )"
        ],
        "description": "change the note number of a specific note event"
    },
    "change_pan":
    {
        "prefix": "change_pan",
        "body":[
            "change_pan( ${1:<ID-number>}, ${2:<panorama(-1000~1000)>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the pan position of a specific note event"
    },
    "change_tune":
    {
        "prefix": "change_tune",
        "body":[
            "change_tune( ${1:<ID-number>}, ${2:<tune-amount(millicents)>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the tuning of a specific note event in millicent"
    },
    "change_velo":
    {
        "prefix": "change_velo",
        "body":[
            "change_velo( ${1:<ID-number>}, ${2:<velocity>} )"
        ],
        "description": "change the velocity of a specific note event"
    },
    "change_vol":
    {
        "prefix": "change_vol",
        "body":[
            "change_vol( ${1:<ID-number>}, ${2:<volume>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the volume of a specific note event in millidecibel"
    },
    "delete_event_mark":
    {
        "prefix": "delete_event_mark",
        "body":[
            "delete_event_mark( ${1:<ID-number>}, ${2:<bit-mark($MARK_1 ... $MARK_28)>} )"
        ],
        "description": "delete an event mark, i.e. ungroup the specified event from an event group"
    },
    "event_status":
    {
        "prefix": "event_status",
        "body":[
            "event_status( ${1:<ID-number>} )"
        ],
        "description": "retrieve the status of a particular note event (or MIDI event in the multi script)"
    },
    "fade_in":
    {
        "prefix": "fade_in",
        "body":[
            "fade_in( ${1:<ID-number>}, ${2:<fade-time>(microseconds)} )"
        ],
        "description": "perform a fade-in for a specific note event"
    },
    "fade_out":
    {
        "prefix": "fade_out",
        "body":[
            "fade_out( ${1:<ID-number>}, ${2:<fade-time>(microseconds)} )"
        ],
        "description": "perform a fade-out for a specific note event"
    },
    "get_event_ids":
    {
        "prefix": "get_event_ids",
        "body":[
            "get_event_ids( ${1:<array-name>} )"
        ],
        "description": "fills the specified array with all active event IDs."
    },
    "get_event_par":
    {
        "prefix": "get_event_par",
        "body":[
            "get_event_par( ${1:<ID-number>}, ${2:<parameter>} )"
        ],
        "description": "return the value of a specific event parameter of the specified event"
    },
    "get_event_par_arr":
    {
        "prefix": "get_event_par_arr",
        "body":[
            "get_event_par_arr( ${1:<ID-number>}, ${2:<parameter>}, ${3:<group-index>} )"
        ],
        "description": "special form of get_event_par(), used to retrieve the group allow state of the specified event"
    },
    "ignore_event":
    {
        "prefix": "ignore_event",
        "body":[
            "ignore_event( ${1:<ID-number>} )"
        ],
        "description": "ignore a note event in a note on or note off callback"
    },
    "set_event_mark":
    {
        "prefix": "set_event_mark",
        "body":[
            "set_event_mark( ${1:<ID-number>} ${2:<bit-mark($MARK_1 ... $MARK_28)>} )"
        ],
        "description": "ignore a note event in a note on or note off callback"
    },
    "set_event_par":
    {
        "prefix": "set_event_par",
        "body":[
            "set_event_par( ${1:<ID-number>}, ${2:<parameter>}, ${3:<value>} )"
        ],
        "description": "assign a parameter to a specific event"
    },
    "set_event_par_arr":
    {
        "prefix": "set_event_par_arr",
        "body":[
            "set_event_par_arr( ${1:<ID-number>}, ${2:<parameter>}, ${3:<value>}, ${4:group-index} )"
        ],
        "description": "special form of set_event_par(), used to set the group allow state of the specified event"
    },
    "array_equal":
    {
        "prefix": "array_equal",
        "body":[
            "array_equal( ${1:<array-variable>}, ${2:<array-variable>} )"
        ],
        "description": "checks the values of two arrays, true if all values are equal, false if not"
    },
    "num_elements":
    {
        "prefix": "num_elements",
        "body":[
            "num_elements( ${1:<array-variable>} )"
        ],
        "description": "returns the number of elements in an array"
    },
    "search":
    {
        "prefix": "search",
        "body":[
            "search( ${1:<array-variable>}, ${2:<value>} )"
        ],
        "description": "searches the specified array for the specified value and returns the index of its first position."
    },
    "sort":
    {
        "prefix": "sort",
        "body":[
            "sort( ${1:<array-variable>}, ${2:<direction(0=ascending/not 0=descending>} )"
        ],
        "description": "searches the specified array for the specified value and returns the index of its first position."
    },
    "allow_group":
    {
        "prefix": "allow_group",
        "body":[
            "allow_group( ${1:<group-index>} )"
        ],
        "description": "allows the specified group, i.e. makes it available for playback"
    },
    "disallow_group":
    {
        "prefix": "disallow_group",
        "body":[
            "disallow_group( ${1:<group-index>} )"
        ],
        "description": "disallows the specified group, i.e. makes it unavailable for playback"
    },
    "find_group":
    {
        "prefix": "find_group",
        "body":[
            "find_group( ${1:<group-name} )"
        ],
        "description": "returns the group index for the specified group name"
    },
    "get_purge_state":
    {
        "prefix": "get_purge_state",
        "body":[
            "get_purge_state( ${1:<group-index} )"
        ],
        "description": "returns the purge state of the specified group. 0=purged, 1=not purged"
    },
    "group_name":
    {
        "prefix": "group_name",
        "body":[
            "group_name( ${1:<group-index} )"
        ],
        "description": "returns the group name for the specified group"
    },
    "purge_group":
    {
        "prefix": "purge_group",
        "body":[
            "purge_group( ${1:<group-index}, ${2:<mode(0 or 1)>} )"
        ],
        "description": "purges (i.e. unloads from RAM) the samples of the specified group"
    },
    "change_listener_par":
    {
        "prefix": "change_listener_par",
        "body":[
            "change_listener_par( ${1:<signal-type($NI_SIGNAL_TIMER_MS or $NI_SIGNAL_TIMER_BEAT)>}, ${2:<parameter>} )"
        ],
        "description": "changes the parameters of the on listener callback. Can be used in every callback."
    },
    "ms_to_ticks":
    {
        "prefix": "ms_to_ticks",
        "body":[
            "ms_to_ticks( ${1:<microseconds>} )"
        ],
        "description": "converts a microseconds value into a tempo dependent ticks value"
    },
    "set_listener":
    {
        "prefix": "set_listener",
        "body":[
            "set_listener( ${1:<signal-type>}, ${2:<parameter>} )"
        ],
        "description": "Sets the signals on which the listener callback should react to. Can only be used in the init callback."
    },
    "stop_wait":
    {
        "prefix": "stop_wait",
        "body":[
            "stop_wait( ${1:<callback-ID>}, ${2:<parameter(0 or 1)>} )"
        ],
        "description": "stops wait commands in the specified callback"
    },
    "reset_ksp_timer":
    {
        "prefix": "reset_ksp_timer",
        "body":[
            "reset_ksp_timer"
        ],
        "description": "resets the KSP timer ($KSP_TIMER) to zero"
    },
    "ticks_to_ms":
    {
        "prefix": "ticks_to_ms",
        "body":[
            "ticks_to_ms( ${1:<ticks>} )"
        ],
        "description": "converts a tempo dependent ticks value into a microseconds value"
    },
    "wait":
    {
        "prefix": "wait",
        "body":[
            "wait( ${1:<wait-time(microseconds)>} )"
        ],
        "description": "pauses the callback for the specified time in microseconds"
    },
    "wait_ticks":
    {
        "prefix": "wait_ticks",
        "body":[
            "wait_ticks( ${1:<wait-time(ticks)>} )"
        ],
        "description": "pauses the callback for the specified time in ticks"
    },
    "add_menu_item":
    {
        "prefix": "add_menu_item",
        "body":[
            "add_menu_item( ${1:<variable>}, ${2:<text>}, ${3:<value>} )"
        ],
        "description": "create a menu entry"
    },
    "add_text_line":
    {
        "prefix": "add_text_line",
        "body":[
            "add_text_line( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "add a new text line in the specified label without erasing existing text"
    },
    "attach_level_meter":
    {
        "prefix": "attach_level_meter",
        "body":[
            "attach_level_meter( ${1:<ui-ID>}, ${2:<group>}, ${3:<slot>}, ${4:<channel(0=left/1=right)>}, ${5:<bus>} )"
        ],
        "description": "attach a level meter to a certain position within the instrument to read volume data"
    },
    "attach_zone":
    {
        "prefix": "attach_zone",
        "body":[
            "attach_zone( ${1:<variable>}, ${2:<zone-id>}, ${3:<flags>} )"
        ],
        "description": "connects the corresponding zone to the waveform so that it shows up within the display"
    },
    "hide_part":
    {
        "prefix": "hide_part",
        "body":[
            "hide_part( ${1:<variable>}, ${2:<hide-mask>} )"
        ],
        "description": "hide specific parts of user interface controls"
    },
    "fs_get_filename":
    {
        "prefix": "fs_get_filename",
        "body":[
            "fs_get_filename( ${1:<ui-ID>}, ${2:<return-parameter(0 or 1 or 2)>} )"
        ],
        "description": "return the filename of the last selected file in the UI file browser."
    },
    "fs_navigate":
    {
        "prefix": "fs_navigate",
        "body":[
            "fs_navigate( ${1:<ui-ID>}, ${2:<direction(0 or 1)>} )"
        ],
        "description": "jump to the next/previous file in an ui file selector and trigger its callback."
    },
    "get_control_par":
    {
        "prefix": "get_control_par",
        "body":[
            "get_control_par( ${1:<ui-ID>}, ${2:<control-parameter>} )"
        ],
        "description": "retrieve various parameters of the specified gui control"
    },
    "get_menu_item_str":
    {
        "prefix": "get_menu_item_str",
        "body":[
            "get_menu_item_str( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns the string value of the menu's entry."
    },
    "get_menu_item_value":
    {
        "prefix": "get_menu_item_value",
        "body":[
            "get_menu_item_value( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns the value of the menu's entry."
    },
    "get_menu_item_visibility":
    {
        "prefix": "get_menu_item_visibility",
        "body":[
            "get_menu_item_visibility( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns 1 if the menu entry is visible, otherwise 0."
    },
    "get_ui_id":
    {
        "prefix": "get_ui_id",
        "body":[
            "get_ui_id( ${1:<variable>} )"
        ],
        "description": "retrieve the ID number of an ui control"
    },
    "get_ui_wf_property":
    {
        "prefix": "get_ui_wf_property",
        "body":[
            "get_ui_wf_property( ${1:<variable>}, ${2:<property}>}, ${3:<index>} )"
        ],
        "description": "returns the value of the waveform’s different properties."
    },
    "make_perfview":
    {
        "prefix": "make_perfview",
        "body":[
            "make_perfview"
        ],
        "description": "activates the performance view for the respective script"
    },
    "move_control":
    {
        "prefix": "move_control",
        "body":[
            "move_control( ${1:<variable>}, ${2:<x-position(0 to 6)>}, ${3:<y-position(0 to 16)>} )"
        ],
        "description": "position ui elements in the standard KONTAKT grid"
    },
    "move_control_px":
    {
        "prefix": "move_control_px",
        "body":[
            "move_control_px( ${1:<variable>}, ${2:<x-position(px)>}, ${3:<y-position(px)>} )"
        ],
        "description": "position ui elements in pixels"
    },
    "set_control_help":
    {
        "prefix": "set_control_help",
        "body":[
            "set_control_help( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "assigns a text string to be displayed when hovering the ui control. The text will appear in KONTAKT's info pane."
    },
    "set_control_par":
    {
        "prefix": "set_control_par",
        "body":[
            "set_control_par( ${1:<ui-ID>}, ${2:<control-parameter>}, ${3:<value>} )"
        ],
        "description": "change various parameters of the specified gui control"
    },
    "set_control_par_str":
    {
        "prefix": "set_control_par_str",
        "body":[
            "set_control_par_str_arr( ${1:<ui-ID>}, ${2:<CONTROL_PAR_xxx>}, ${3:<value>} )"
        ],
        "description": "A variation of the command for usage with text strings. ( see: set_control_par() Remarks)"
    },
    "set_control_par_arr":
    {
        "prefix": "set_control_par_arr",
        "body":[
            "set_control_par_arr( ${1:<ui-ID>}, ${2:<control-parameter>}, ${3:<value>}, ${4:<index>} )"
        ],
        "description": "change various parameters of an element within an array based gui control (for example: cursors in the XY pad)"
    },
    "set_control_par_str_arr":
    {
        "prefix": "set_control_par_str_arr",
        "body":[
            "set_control_par_str_arr( ${1:<ui-ID>}, ${2:<control-parameter>}, ${3:<value>}, ${4:<index>} )"
        ],
        "description": "A variation of the command for usage with text strings. ( see: set_control_par_arr() Remarks)"
    },
    "set_knob_defval":
    {
        "prefix": "set_knob_defval",
        "body":[
            "set_knob_defval( ${1:<variable>}, ${2:<value>} )"
        ],
        "description": "assign a default value to a knob to which the knob is reset when Cmd-clicking (mac) or Ctrl-clicking (PC) the knob."
    },
    "set_knob_label":
    {
        "prefix": "set_knob_label",
        "body":[
            "set_knob_label( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "assign a text string to a knob"
    },
    "set_knob_unit":
    {
        "prefix": "set_knob_unit",
        "body":[
            "set_knob_unit( ${1:<variable>}, ${2:<knob-unit-constant>} )"
        ],
        "description": "assign a unit mark to a knob."
    },
    "set_menu_item_str":
    {
        "prefix": "set_menu_item_str",
        "body":[
            "set_menu_item_str( ${1:<menu-id>}, ${2:<index>}, ${3:<string>} )"
        ],
        "description": "sets the value of a menu entry."
    },
    "set_menu_item_value":
    {
        "prefix": "set_menu_item_value",
        "body":[
            "set_menu_item_value( ${1:<menu-id>}, ${2:<index>}, ${3:<value>} )"
        ],
        "description": "sets the value of a menu entry."
    },
    "set_menu_item_visibility":
    {
        "prefix": "set_menu_item_visibility",
        "body":[
            "set_menu_item_visibility( ${1:<menu-id>}, ${2:<index>}, ${3:<visibility(0=invisible/1=visible)>} )"
        ],
        "description": "sets the visibility of a menu entry."
    },
    "set_table_steps_shown":
    {
        "prefix": "set_table_steps_shown",
        "body":[
            "set_table_steps_shown( ${1:<variable>}, ${2:<num-of-steps>} )"
        ],
        "description": "changes the number of displayed columns in an ui table"
    },
    "set_script_title":
    {
        "prefix": "set_script_title",
        "body":[
            "set_script_title( ${1:<text>} )"
        ],
        "description": "set the script title"
    },
    "set_skin_offset":
    {
        "prefix": "set_skin_offset",
        "body":[
            "set_skin_offset( ${1:<offset-in-pixel>} )"
        ],
        "description": "offsets the chosen background picture file by the specified number of pixels"
    },
    "set_text":
    {
        "prefix": "set_text",
        "body":[
            "set_text( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "when applied to a label: delete the text currently visible in the specified label and add new text.\nwhen applied to knobs, buttons, switches and value edits: set the display name of the ui element.\n"
    },
    "set_ui_color":
    {
        "prefix": "set_ui_color",
        "body":[
            "set_ui_color( ${1:<hex values(9RRGGBBh) )>}, ${2:<text>} )"
        ],
        "description": "set the main background color of the performance view"
    },
    "set_ui_height":
    {
        "prefix": "set_ui_height",
        "body":[
            "set_ui_height( ${1:<height(1 to 8)>} )"
        ],
        "description": "set the height of a script performance view in grid units"
    },
    "set_ui_height_px":
    {
        "prefix": "set_ui_height_px",
        "body":[
            "set_ui_height_px( ${1:<height(50px to 750px)>} )"
        ],
        "description": "set the height of a script performance view in pixels"
    },
    "set_ui_width_px":
    {
        "prefix": "set_ui_width_px",
        "body":[
            "set_ui_width_px( ${1:<width(633px to 1000px)>} )"
        ],
        "description": "set the width of a script performance view in pixels"
    },
    "set_ui_wf_property":
    {
        "prefix": "set_ui_wf_property",
        "body":[
            "set_ui_wf_property( ${1:<variable>}, ${2:<property>}, ${3:<index>}, ${4:<value>} )"
        ],
        "description": "sets different properties for the waveform control"
    },
    "get_key_color":
    {
        "prefix": "get_key_color",
        "body":[
            "get_key_color( ${1:<note-nr>} )"
        ],
        "description": "returns the color constant of the specified note number"
    },
    "get_key_name":
    {
        "prefix": "get_key_name",
        "body":[
            "get_key_name( ${1:<note-nr>} )"
        ],
        "description": "returns the name of the specified key"
    },
    "get_key_triggerstate":
    {
        "prefix": "get_key_triggerstate",
        "body":[
            "get_key_triggerstate( ${1:<note-nr>} )"
        ],
        "description": "returns the pressed state of the specified note number (i.e. key) on the KONTAKT keyboard, can be either 1 (key pressed) or 0 (key released)"
    },
    "get_key_type":
    {
        "prefix": "get_key_type",
        "body":[
            "get_key_type( ${1:<note-nr>} )"
        ],
        "description": "returns the key type constant of the specified key."
    },
    "get_keyrange_min_note":
    {
        "prefix": "get_keyrange_min_note",
        "body":[
            "get_keyrange_min_note( ${1:<note-nr>} )"
        ],
        "description": "returns the lowest note of the specified key range"
    },
    "get_keyrange_max_note":
    {
        "prefix": "get_keyrange_max_note",
        "body":[
            "get_keyrange_max_note( ${1:<note-nr>} )"
        ],
        "description": "returns the highest note of the specified key range"
    },
    "get_keyrange_name":
    {
        "prefix": "get_keyrange_name",
        "body":[
            "get_keyrange_name( ${1:<note-nr>} )"
        ],
        "description": "returns the name of the specified key range"
    },
    "set_key_color":
    {
        "prefix": "set_key_color",
        "body":[
            "set_key_color( ${1:<note-nr>}, ${2:<key-color-constant>} )"
        ],
        "description": "sets the color of the specified key (i.e. MIDI note) on the KONTAKT keyboard. use $KEY_COLOR_****"
    },
    "set_key_name":
    {
        "prefix": "set_key_name",
        "body":[
            "set_key_name( ${1:<note-nr>}, ${2:<name>} )"
        ],
        "description": "assigns a text string to the specified key"
    },
    "set_key_pressed":
    {
        "prefix": "set_key_pressed",
        "body":[
            "set_key_pressed( ${1:<note-nr>}, ${2:<value>} )"
        ],
        "description": "sets the trigger state of the specified key on KONTAKT's keyboard either to pressed/on (1) or released/off (0)"
    },
    "set_key_pressed_support":
    {
        "prefix": "set_key_pressed_support",
        "body":[
            "set_key_pressed_support( ${1:<mode>} )"
        ],
        "description": "sets the pressed state support mode for KONTAKT'S keyboard. The available modes are:\n0: KONTAKT handles all pressed states, set_key_pressed() commands are ignored (default mode)\n1: KONTAKT's keyboard is only affected by set_key_pressed() commands\n"
    },
    "set_key_type":
    {
        "prefix": "set_key_type",
        "body":[
            "set_key_type( ${1:<note-nr>}, ${2:<key-type-constant>} )"
        ],
        "description": "assigns a key type to the specified key.\nThe following key types are available:\n$NI_KEY_TYPE_DEFAULT (i.e. normal mapped notes that produce sound)\n$NI_KEY_TYPE_CONTROL (i.e. key switches or other notes that do not produce sound)\n$NI_KEY_TYPE_NONE (resets the key to its normal KONTAKT behaviour)\n"
    },
    "set_keyrange":
    {
        "prefix": "set_keyrange",
        "body":[
            "set_keyrange( ${1:<min-note>}, ${2:<max-note>}, ${3:<name>} )"
        ],
        "description": "assigns a text string to the specified range of keys."
    },
    "remove_keyrange":
    {
        "prefix": "remove_keyrange",
        "body":[
            "remove_keyrange( ${1:<note-nr>} )"
        ],
        "description": "assigns a text string to the specified range of keys"
    },
    "find_mod":
    {
        "prefix": "find_mod",
        "body":[
            "find_mod( ${1:<group-index>}, ${2:<mod-name>} )"
        ],
        "description": "returns the slot index of an internal modulator or external modulation slot"
    },
    "find_target":
    {
        "prefix": "find_target",
        "body":[
            "find_target( ${1:<group-index>}, ${2:<mod-index>}, ${3:<target-name>} )"
        ],
        "description": "returns the slot index of a modulation slot of an internal modulator"
    },
    "get_engine_par":
    {
        "prefix": "get_engine_par",
        "body":[
            "get_engine_par( ${1:<parameter>}, ${2:<group>}, ${3:<slot>}, ${4:<generic>} )"
        ],
        "description": "returns the value of a specific engine parameter"
    },
    "get_engine_par_disp":
    {
        "prefix": "get_engine_par_disp",
        "body":[
            "get_engine_par_disp( ${1:<parameter>}, ${2:<group>}, ${3:<slot>}, ${4:<generic>} )"
        ],
        "description": "returns the displayed string of a specific engine parameter"
    },
    "get_voice_limit":
    {
        "prefix": "get_voice_limit",
        "body":[
            "get_voice_limit( ${1:<voice-type>} )"
        ],
        "description": "retunrs the voice limit for the Time Machine Pro mode of the source module"
    },
    "output_channel_name":
    {
        "prefix": "output_channel_name",
        "body":[
            "output_channel_name( ${1:<output-number>} )"
        ],
        "description": "returns the channel name for the specified output"
    },
    "set_engine_par":
    {
        "prefix": "set_engine_par",
        "body":[
            "set_engine_par( ${1:<parameter>}, ${2:<value>}, ${3:<group>}, ${4:<slot>}, ${5:<generic>} )"
        ],
        "description": "control automatable KONTAKT parameters and bypass buttons"
    },
    "set_voice_limit":
    {
        "prefix": "set_voice_limit",
        "body":[
            "set_voice_limit( ${1:<voice-type>}, ${2:<value>} )"
        ],
        "description": "sets the voice limit for the Time Machine Pro mode of the source module"
    },
    "get_folder":
    {
        "prefix": "get_folder",
        "body":[
            "get_folder( ${1:<path-variable>} )"
        ],
        "description": "returns the path specified with the built-in path variable"
    },
    "load_array":
    {
        "prefix": "load_array",
        "body":[
            "load_array( ${1:<array-variable>}, ${2:<mode>} )"
        ],
        "description": "loads an array from an external file (.nka file)"
    },
    "load_array_str":
    {
        "prefix": "load_array_str",
        "body":[
            "load_array_str( ${1:<array-variable>}, ${2:<path>} )"
        ],
        "description": "loads an array from an external file (.nka file) using the file's absolute path"
    },
    "load_ir_sample":
    {
        "prefix": "load_ir_sample",
        "body":[
            "load_ir_sample( ${1:<file-path>}, ${2:<slot>}, ${3:<generic>} )"
        ],
        "description": "loads an impulse response sample into KONTAKT's convolution effect"
    },
    "save_array":
    {
        "prefix": "save_array",
        "body":[
            "save_array( ${1:<array-variable>}, ${2:<mode>} )"
        ],
        "description": "saves an array to an external file (i.e. an .nka file)"
    },
    "save_array_str":
    {
        "prefix": "save_array_str",
        "body":[
            "save_array_str( ${1:<array-variable>}, ${2:<path>} )"
        ],
        "description": "saves an array to an external file (i.e. an .nka file), using the specified absolute path"
    },
    "save_midi_file":
    {
        "prefix": "save_midi_file",
        "body":[
            "save_midi_file( ${1:<path>} )"
        ],
        "description": "saves a MIDI file with a range specified by the mf_set_export_area() command."
    },
    "mf_insert_file":
    {
        "prefix": "mf_insert_file",
        "body":[
            "mf_insert_file( ${1:<path>}, ${2:<track-offset>}, ${3:<position-offset>}, ${4:<mode>} )"
        ],
        "description": "inserts a MIDI file into the MIDI object."
    },
    "mf_set_export_area":
    {
        "prefix": "mf_set_export_area",
        "body":[
            "mf_set_export_area( ${1:<name>}, ${2:<start-pos>}, ${3:<end-pos>}, ${4:<start-track>}, ${5:<end-track>} )"
        ],
        "description": "defines the part of the MIDI object that will be exported when using a drag and drop area, or the save_midi_file() command."
    },
    "mf_set_buffer_size":
    {
        "prefix": "mf_set_buffer_size",
        "body":[
            "mf_set_buffer_size( ${1:<size>} )"
        ],
        "description": "defines a number of inactive MIDI events, that can be activated and edited"
    },
    "mf_get_buffer_size":
    {
        "prefix": "mf_get_buffer_size",
        "body":[
            "mf_get_buffer_size()"
        ],
        "description": "returns the size of the MIDI event buffer"
    },
    "mf_reset":
    {
        "prefix": "mf_reset",
        "body":[
            "mf_reset()"
        ],
        "description": "resets the MIDI object, sets the event buffer to zero, and removes all events"
    },
    "mf_insert_event":
    {
        "prefix": "mf_insert_event",
        "body":[
            "mf_insert_event( ${1:<track>}, ${2:<pos>}, ${3:<command>}, ${4:<byte1>}, ${5:<byte2>} )"
        ],
        "description": "activates an inactive MIDI event in the MIDI object. However, because the command and position are defined in this command, it can be considered as an insertion."
    },
    "mf_remove_event":
    {
        "prefix": "mf_remove_event",
        "body":[
            "mf_remove_event( ${1:<event-id>} )"
        ],
        "description": "deactivates an event in the MIDI object, effectively removing it"
    },
    "mf_set_event_par":
    {
        "prefix": "mf_set_event_par",
        "body":[
            "mf_set_event_par( ${1:<event-id>}, ${2:<parameter>}, ${3:<value>} )"
        ],
        "description": "sets an event parameter"
    },
    "mf_get_event_par":
    {
        "prefix": "mf_get_event_par",
        "body":[
            "mf_get_event_par( ${1:<event-id>}, ${2:<parameter>} )"
        ],
        "description": "returns the value of an event parameter"
    },
    "mf_get_id":
    {
        "prefix": "mf_get_id",
        "body":[
            "mf_get_id()"
        ],
        "description": "returns the ID of the currently selected event (when using the navigation commands like mf_get_first(), and mf_get_next(), etc)"
    },
    "mf_set_mark":
    {
        "prefix": "mf_set_mark",
        "body":[
            "mf_set_mark( ${1:<event-id>}, ${2:<mark>}, ${3:<status>} )"
        ],
        "description": "marks an event, so that you may groups events together and process that group quickly"
    },
    "mf_get_mark":
    {
        "prefix": "mf_get_mark",
        "body":[
            "mf_get_mark( ${1:<event-id>}, ${2:<mark>} )"
        ],
        "description": "checks if an event is marked or not. Returns 1 if it is marked, or 0 if it is not."
    },
    "by_track":
    {
        "prefix": "by_track",
        "body":[
            "by_track( ${1:<track>} )"
        ],
        "description": "can be used to group events by their track number"
    },
    "mf_get_first":
    {
        "prefix": "mf_get_first",
        "body":[
            "mf_get_first( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the first event in the MIDI track"
    },
    "mf_get_last":
    {
        "prefix": "mf_get_last",
        "body":[
            "mf_get_last( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the last event in the MIDI track"
    },
    "mf_get_next":
    {
        "prefix": "mf_get_next",
        "body":[
            "mf_get_next( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the next event in the MIDI track"
    },
    "mf_get_next_at":
    {
        "prefix": "mf_get_next_at",
        "body":[
            "mf_get_next_at( ${1:<track-index>}, ${2:<pos>} )"
        ],
        "description": "moves the position marker to the next event in the MIDI track right after the defined position."
    },
    "mf_get_prev":
    {
        "prefix": "mf_get_prev",
        "body":[
            "mf_get_prev( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the previous event in the MIDI track"
    },
    "mf_get_prev_at":
    {
        "prefix": "mf_get_prev_at",
        "body":[
            "mf_get_prev_at( ${1:<track-index>}, ${2:<pos>} )"
        ],
        "description": "moves the position marker to the first event before the defined position"
    },
    "mf_get_num_tracks":
    {
        "prefix": "mf_get_num_tracks",
        "body":[
            "mf_get_num_tracks()"
        ],
        "description": "returns the number of tracks in a MIDI object."
    },
    "SET_CONDITION":
    {
        "prefix": "SET_CONDITION",
        "body":[
            "SET_CONDITION( ${1:<condition-symbol>} )"
        ],
        "description": "define a symbol to be used as a condition"
    },
    "RESET_CONDITION":
    {
        "prefix": "RESET_CONDITION",
        "body":[
            "RESET_CONDITION( ${1:<condition-symbol>} )"
        ],
        "description": "delete a definition"
    },
    "USE_CODE_IF":
    {
        "prefix": "USE_CODE_IF",
        "body":[
            "USE_CODE_IF( ${1:<condition-symbol>} )",
            "${2:{your code here}}",
            "END_USE_CODE"
        ],
        "description": "interpret code when <condition> is defined"
    },
    "USE_CODE_IF_NOT":
    {
        "prefix": "USE_CODE_IF_NOT",
        "body":[
            "USE_CODE_IF_NOT( ${1:<condition-symbol>} )",
            "${2:{your code here}}",
            "END_USE_CODE"
        ],
        "description": "interpret code when <condition> is not defined"
    },
    "END_USE_CODE":
    {
        "prefix": "END_USE_CODE",
        "body":[
            "END_USE_CODE"
        ],
        "description": "end of USE_CODE_IF"
    },
    "NO_SYS_SCRIPT_GROUP_START":
    {
        "prefix": "NO_SYS_SCRIPT_GROUP_START",
        "body":[
            "NO_SYS_SCRIPT_GROUP_START"
        ],
        "description": "condition; if defined with SET_CONDITION(), the system script which handles all group start options will be bypassed"
    },
    "NO_SYS_SCRIPT_PEDAL":
    {
        "prefix": "NO_SYS_SCRIPT_PEDAL",
        "body":[
            "NO_SYS_SCRIPT_PEDAL"
        ],
        "description": "condition; if defined with SET_CONDITION(), the system script which sustains notes when CC# 64 is received will be bypassed"
    },
    "NO_SYS_SCRIPT_RLS_TRIG":
    {
        "prefix": "NO_SYS_SCRIPT_RLS_TRIG",
        "body":[
            "NO_SYS_SCRIPT_RLS_TRIG"
        ],
        "description": "condition; if defined with SET_CONDITION(), the system script which triggers samples upon the release of a key is bypassed"
    },
    "reset_rls_trig_counter":
    {
        "prefix": "reset_rls_trig_counter",
        "body":[
            "reset_rls_trig_counter( ${1:<note>} )"
        ],
        "description": "dresets the release trigger counter (used by the release trigger system script)"
    },
    "will_never_terminate":
    {
        "prefix": "will_never_terminate",
        "body":[
            "will_never_terminate( ${1:<event-id>} )"
        ],
        "description": ""
    },
    "pgs_create_key":
    {
        "prefix": "pgs_create_key",
        "body":[
            "pgs_create_key( ${1:<key-id>}, ${2:<size>} )"
        ],
        "description": "It is possible to send and receive values from one script to another, discarding the usual left-to-right order by using the Program Global Storage (PGS) commands. PGS is a dynamic memory that can be read/written by any script."
    },
    "pgs_key_exists":
    {
        "prefix": "pgs_key_exists",
        "body":[
            "pgs_key_exists( ${1:<key-id>} )"
        ],
        "description": "It is possible to send and receive values from one script to another, discarding the usual left-to-right order by using the Program Global Storage (PGS) commands. PGS is a dynamic memory that can be read/written by any script."
    },
    "pgs_set_key_val":
    {
        "prefix": "pgs_set_key_val",
        "body":[
            "pgs_set_key_val( ${1:<key-id>}, ${2:<index>}, ${3:<value>} )"
        ],
        "description": "It is possible to send and receive values from one script to another, discarding the usual left-to-right order by using the Program Global Storage (PGS) commands. PGS is a dynamic memory that can be read/written by any script."
    },
    "pgs_get_key_val":
    {
        "prefix": "pgs_get_key_val",
        "body":[
            "pgs_get_key_val( ${1:<key-id>}, ${2:<index>} )"
        ],
        "description": "It is possible to send and receive values from one script to another, discarding the usual left-to-right order by using the Program Global Storage (PGS) commands. PGS is a dynamic memory that can be read/written by any script."
    },
    "pgs_create_str_key":
    {
        "prefix": "pgs_create_str_key",
        "body":[
            "pgs_create_str_key( ${1:<key-id>} )"
        ],
        "description": ""
    },
    "pgs_str_key_exists":
    {
        "prefix": "pgs_str_key_exists",
        "body":[
            "pgs_str_key_exists( ${1:<key-id>} )"
        ],
        "description": "It is possible to send and receive values from one script to another, discarding the usual left-to-right order by using the Program Global Storage (PGS) commands. PGS is a dynamic memory that can be read/written by any script."
    },
    "pgs_set_str_key_val":
    {
        "prefix": "pgs_set_str_key_val",
        "body":[
            "pgs_set_str_key_val( ${1:<key-id>}, ${2:<stringvalue>} )"
        ],
        "description": ""
    },
    "find_zone":
    {
        "prefix": "find_zone",
        "body":[
            "find_zone( ${1:<zone-name>} )"
        ],
        "description": "returns the zone ID for the specified zone name. Only availabe in the init callback."
    },
    "get_sample_length":
    {
        "prefix": "get_sample_length",
        "body":[
            "get_sample_length( ${1:<zone-ID>} )"
        ],
        "description": "returns the length of the specified zone's sample in microseconds"
    },
    "num_slices_zone":
    {
        "prefix": "num_slices_zone",
        "body":[
            "num_slices_zone( ${1:<zone-ID>} )"
        ],
        "description": "returns the number of slices of the specified zone"
    },
    "zone_slice_length":
    {
        "prefix": "zone_slice_length",
        "body":[
            "zone_slice_length( ${1:<zone-ID>}, ${2:<slice-index>} )"
        ],
        "description": "returns the length in microseconds of the specified slice with respect to the current tempo"
    },
    "zone_slice_start":
    {
        "prefix": "zone_slice_start",
        "body":[
            "zone_slice_start( ${1:<zone-ID>}, ${2:<slice-index>} )"
        ],
        "description": "returns the absolute start point of the specified slice in microseconds, independent of the current tempo"
    },
    "zone_slice_idx_loop_start":
    {
        "prefix": "zone_slice_idx_loop_start",
        "body":[
            "zone_slice_idx_loop_start( ${1:<zone-ID>}, ${2:<loop-index>} )"
        ],
        "description": "returns the index number of the slice at the loop start"
    },
    "zone_slice_idx_loop_end":
    {
        "prefix": "zone_slice_idx_loop_end",
        "body":[
            "zone_slice_idx_loop_end( ${1:<zone-ID>}, ${2:<loop-index>} )"
        ],
        "description": "returns the index number of the slice at the loop end"
    },
    "zone_slice_loop_count":
    {
        "prefix": "zone_slice_loop_count",
        "body":[
            "zone_slice_loop_count( ${1:<zone-ID>}, ${2:<loop-index>} )"
        ],
        "description": "returns the loop count of the specified loop"
    },
    "dont_use_machine_mode":
    {
        "prefix": "dont_use_machine_mode",
        "body":[
            "dont_use_machine_mode( ${1:<ID-number>} )"
        ],
        "description": "play the specified event in sampler mode"
    },
    "function":
    {
        "prefix": "function",
        "body":[
            "{",
            "    ${1:undocumented}",
            "}",
            "function ${2:<function-name>}",
            "    ${3:<your code here>}",
            "end function"
        ],
        "description": "declares a function"
    },
    "call":
    {
        "prefix": "call",
        "body":[
            "call ${1:<function-name>}"
        ],
        "description": "calls a previously declares function"
    },
    "ignore_midi":
    {
        "prefix": "ignore_midi",
        "body":[
            "ignore_midi"
        ],
        "description": "Like ignore_event(), ignore_midi is a very \"strong\" command. Keep in mind that ignore_midi will ignore all incoming MIDI events. If you simply want to change the MIDI channel and/or any of the MIDI bytes, you can also use set_event_par()."
    },
    "on midi_in":
    {
        "prefix": "on midi_in",
        "body":[
            "{",
            "    ${1:midi callback, triggered by every incoming MIDI event}",
            "}",
            "on midi_in",
            "    ${2:{your code here}}",
            "end on"
        ],
        "description": "Like ignore_event(), ignore_midi is a very \"strong\" command. Keep in mind that ignore_midi will ignore all incoming MIDI events. If you simply want to change the MIDI channel and/or any of the MIDI bytes, you can also use set_event_par()."
    },
    "set_midi":
    {
        "prefix": "set_midi",
        "body":[
            "set_midi( ${1:<channel>}, ${2:<command>}, ${3:<byte-1>}, ${4:<byte-2>} )"
        ],
        "description": "create any type of MIDI event. If you simply want to change the MIDI channel and/or any of the MIDI bytes, you can also use set_event_par()."
    },
    "ALL_EVENTS":
    {
        "prefix": "ALL_EVENTS",
        "body":[
            "$ALL_EVENTS"
        ],
        "description": "Built-in Variable: ALL_EVENTS"
    },
    "ALL_GROUPS":
    {
        "prefix": "ALL_GROUPS",
        "body":[
            "$ALL_GROUPS"
        ],
        "description": "Built-in Variable: ALL_GROUPS"
    },
    "CC_NUM":
    {
        "prefix": "CC_NUM",
        "body":[
            "$CC_NUM"
        ],
        "description": "Built-in Variable: CC_NUM"
    },
    "CONTROL_PAR_ALLOW_AUTOMATION":
    {
        "prefix": "CONTROL_PAR_ALLOW_AUTOMATION",
        "body":[
            "$CONTROL_PAR_ALLOW_AUTOMATION"
        ],
        "description": "Built-in Variable: CONTROL_PAR_ALLOW_AUTOMATION"
    },
    "CONTROL_PAR_AUTOMATION_ID":
    {
        "prefix": "CONTROL_PAR_AUTOMATION_ID",
        "body":[
            "$CONTROL_PAR_AUTOMATION_ID"
        ],
        "description": "Built-in Variable: CONTROL_PAR_AUTOMATION_ID"
    },
    "CONTROL_PAR_AUTOMATION_NAME":
    {
        "prefix": "CONTROL_PAR_AUTOMATION_NAME",
        "body":[
            "$CONTROL_PAR_AUTOMATION_NAME"
        ],
        "description": "Built-in Variable: CONTROL_PAR_AUTOMATION_NAME"
    },
    "CONTROL_PAR_BAR_COLOR":
    {
        "prefix": "CONTROL_PAR_BAR_COLOR",
        "body":[
            "$CONTROL_PAR_BAR_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_BAR_COLOR"
    },
    "CONTROL_PAR_BASEPATH":
    {
        "prefix": "CONTROL_PAR_BASEPATH",
        "body":[
            "$CONTROL_PAR_BASEPATH"
        ],
        "description": "Built-in Variable: CONTROL_PAR_BASEPATH"
    },
    "CONTROL_PAR_BG_COLOR":
    {
        "prefix": "CONTROL_PAR_BG_COLOR",
        "body":[
            "$CONTROL_PAR_BG_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_BG_COLOR"
    },
    "CONTROL_PAR_COLUMN_WIDTH":
    {
        "prefix": "CONTROL_PAR_COLUMN_WIDTH",
        "body":[
            "$CONTROL_PAR_COLUMN_WIDTH"
        ],
        "description": "Built-in Variable: CONTROL_PAR_COLUMN_WIDTH"
    },
    "CONTROL_PAR_DEFAULT_VALUE":
    {
        "prefix": "CONTROL_PAR_DEFAULT_VALUE",
        "body":[
            "$CONTROL_PAR_DEFAULT_VALUE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_DEFAULT_VALUE"
    },
    "CONTROL_PAR_DND_BEHAVIOUR":
    {
        "prefix": "CONTROL_PAR_DND_BEHAVIOUR",
        "body":[
            "$CONTROL_PAR_DND_BEHAVIOUR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_DND_BEHAVIOUR"
    },
    "CONTROL_PAR_FILEPATH":
    {
        "prefix": "CONTROL_PAR_FILEPATH",
        "body":[
            "$CONTROL_PAR_FILEPATH"
        ],
        "description": "Built-in Variable: CONTROL_PAR_FILEPATH"
    },
    "CONTROL_PAR_FILE_TYPE":
    {
        "prefix": "CONTROL_PAR_FILE_TYPE",
        "body":[
            "$CONTROL_PAR_FILE_TYPE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_FILE_TYPE"
    },
    "CONTROL_PAR_FONT_TYPE":
    {
        "prefix": "CONTROL_PAR_FONT_TYPE",
        "body":[
            "$CONTROL_PAR_FONT_TYPE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_FONT_TYPE"
    },
    "CONTROL_PAR_GRID_HEIGHT":
    {
        "prefix": "CONTROL_PAR_GRID_HEIGHT",
        "body":[
            "$CONTROL_PAR_GRID_HEIGHT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_GRID_HEIGHT"
    },
    "CONTROL_PAR_GRID_WIDTH":
    {
        "prefix": "CONTROL_PAR_GRID_WIDTH",
        "body":[
            "$CONTROL_PAR_GRID_WIDTH"
        ],
        "description": "Built-in Variable: CONTROL_PAR_GRID_WIDTH"
    },
    "CONTROL_PAR_GRID_X":
    {
        "prefix": "CONTROL_PAR_GRID_X",
        "body":[
            "$CONTROL_PAR_GRID_X"
        ],
        "description": "Built-in Variable: CONTROL_PAR_GRID_X"
    },
    "CONTROL_PAR_GRID_Y":
    {
        "prefix": "CONTROL_PAR_GRID_Y",
        "body":[
            "$CONTROL_PAR_GRID_Y"
        ],
        "description": "Built-in Variable: CONTROL_PAR_GRID_Y"
    },
    "CONTROL_PAR_HEIGHT":
    {
        "prefix": "CONTROL_PAR_HEIGHT",
        "body":[
            "$CONTROL_PAR_HEIGHT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_HEIGHT"
    },
    "CONTROL_PAR_HELP":
    {
        "prefix": "CONTROL_PAR_HELP",
        "body":[
            "$CONTROL_PAR_HELP"
        ],
        "description": "Built-in Variable: CONTROL_PAR_HELP"
    },
    "CONTROL_PAR_HIDE":
    {
        "prefix": "CONTROL_PAR_HIDE",
        "body":[
            "$CONTROL_PAR_HIDE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_HIDE"
    },
    "CONTROL_PAR_KEY_ALT":
    {
        "prefix": "CONTROL_PAR_KEY_ALT",
        "body":[
            "$CONTROL_PAR_KEY_ALT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_KEY_ALT"
    },
    "CONTROL_PAR_KEY_CONTROL":
    {
        "prefix": "CONTROL_PAR_KEY_CONTROL",
        "body":[
            "$CONTROL_PAR_KEY_CONTROL"
        ],
        "description": "Built-in Variable: CONTROL_PAR_KEY_CONTROL"
    },
    "CONTROL_PAR_KEY_SHIFT":
    {
        "prefix": "CONTROL_PAR_KEY_SHIFT",
        "body":[
            "$CONTROL_PAR_KEY_SHIFT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_KEY_SHIFT"
    },
    "CONTROL_PAR_LABEL":
    {
        "prefix": "CONTROL_PAR_LABEL",
        "body":[
            "$CONTROL_PAR_LABEL"
        ],
        "description": "Built-in Variable: CONTROL_PAR_LABEL"
    },
    "CONTROL_PAR_MAX_VALUE":
    {
        "prefix": "CONTROL_PAR_MAX_VALUE",
        "body":[
            "$CONTROL_PAR_MAX_VALUE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MAX_VALUE"
    },
    "CONTROL_PAR_MIN_VALUE":
    {
        "prefix": "CONTROL_PAR_MIN_VALUE",
        "body":[
            "$CONTROL_PAR_MIN_VALUE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MIN_VALUE"
    },
    "CONTROL_PAR_MOUSE_BEHAVIOUR":
    {
        "prefix": "CONTROL_PAR_MOUSE_BEHAVIOUR",
        "body":[
            "$CONTROL_PAR_MOUSE_BEHAVIOUR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MOUSE_BEHAVIOUR"
    },
    "CONTROL_PAR_NONE":
    {
        "prefix": "CONTROL_PAR_NONE",
        "body":[
            "$CONTROL_PAR_NONE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_NONE"
    },
    "CONTROL_PAR_NUM_ITEMS":
    {
        "prefix": "CONTROL_PAR_NUM_ITEMS",
        "body":[
            "$CONTROL_PAR_NUM_ITEMS"
        ],
        "description": "Built-in Variable: CONTROL_PAR_NUM_ITEMS"
    },
    "CONTROL_PAR_OFF_COLOR":
    {
        "prefix": "CONTROL_PAR_OFF_COLOR",
        "body":[
            "$CONTROL_PAR_OFF_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_OFF_COLOR"
    },
    "CONTROL_PAR_ON_COLOR":
    {
        "prefix": "CONTROL_PAR_ON_COLOR",
        "body":[
            "$CONTROL_PAR_ON_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_ON_COLOR"
    },
    "CONTROL_PAR_OVERLOAD_COLOR":
    {
        "prefix": "CONTROL_PAR_OVERLOAD_COLOR",
        "body":[
            "$CONTROL_PAR_OVERLOAD_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_OVERLOAD_COLOR"
    },
    "CONTROL_PAR_PEAK_COLOR":
    {
        "prefix": "CONTROL_PAR_PEAK_COLOR",
        "body":[
            "$CONTROL_PAR_PEAK_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_PEAK_COLOR"
    },
    "CONTROL_PAR_PICTURE":
    {
        "prefix": "CONTROL_PAR_PICTURE",
        "body":[
            "$CONTROL_PAR_PICTURE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_PICTURE"
    },
    "CONTROL_PAR_PICTURE_STATE":
    {
        "prefix": "CONTROL_PAR_PICTURE_STATE",
        "body":[
            "$CONTROL_PAR_PICTURE_STATE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_PICTURE_STATE"
    },
    "CONTROL_PAR_POS_X":
    {
        "prefix": "CONTROL_PAR_POS_X",
        "body":[
            "$CONTROL_PAR_POS_X"
        ],
        "description": "Built-in Variable: CONTROL_PAR_POS_X"
    },
    "CONTROL_PAR_POS_Y":
    {
        "prefix": "CONTROL_PAR_POS_Y",
        "body":[
            "$CONTROL_PAR_POS_Y"
        ],
        "description": "Built-in Variable: CONTROL_PAR_POS_Y"
    },
    "CONTROL_PAR_SELECTED_ITEM_IDX":
    {
        "prefix": "CONTROL_PAR_SELECTED_ITEM_IDX",
        "body":[
            "$CONTROL_PAR_SELECTED_ITEM_IDX"
        ],
        "description": "Built-in Variable: CONTROL_PAR_SELECTED_ITEM_IDX"
    },
    "CONTROL_PAR_SHOW_ARROWS":
    {
        "prefix": "CONTROL_PAR_SHOW_ARROWS",
        "body":[
            "$CONTROL_PAR_SHOW_ARROWS"
        ],
        "description": "Built-in Variable: CONTROL_PAR_SHOW_ARROWS"
    },
    "CONTROL_PAR_TEXT":
    {
        "prefix": "CONTROL_PAR_TEXT",
        "body":[
            "$CONTROL_PAR_TEXT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_TEXT"
    },
    "CONTROL_PAR_TEXTLINE":
    {
        "prefix": "CONTROL_PAR_TEXTLINE",
        "body":[
            "$CONTROL_PAR_TEXTLINE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_TEXTLINE"
    },
    "CONTROL_PAR_TEXTPOS_Y":
    {
        "prefix": "CONTROL_PAR_TEXTPOS_Y",
        "body":[
            "$CONTROL_PAR_TEXTPOS_Y"
        ],
        "description": "Built-in Variable: CONTROL_PAR_TEXTPOS_Y"
    },
    "CONTROL_PAR_TEXT_ALIGNMENT":
    {
        "prefix": "CONTROL_PAR_TEXT_ALIGNMENT",
        "body":[
            "$CONTROL_PAR_TEXT_ALIGNMENT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_TEXT_ALIGNMENT"
    },
    "CONTROL_PAR_UNIT":
    {
        "prefix": "CONTROL_PAR_UNIT",
        "body":[
            "$CONTROL_PAR_UNIT"
        ],
        "description": "Built-in Variable: CONTROL_PAR_UNIT"
    },
    "CONTROL_PAR_VALUE":
    {
        "prefix": "CONTROL_PAR_VALUE",
        "body":[
            "$CONTROL_PAR_VALUE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_VALUE"
    },
    "CONTROL_PAR_VERTICAL":
    {
        "prefix": "CONTROL_PAR_VERTICAL",
        "body":[
            "$CONTROL_PAR_VERTICAL"
        ],
        "description": "Built-in Variable: CONTROL_PAR_VERTICAL"
    },
    "CONTROL_PAR_WIDTH":
    {
        "prefix": "CONTROL_PAR_WIDTH",
        "body":[
            "$CONTROL_PAR_WIDTH"
        ],
        "description": "Built-in Variable: CONTROL_PAR_WIDTH"
    },
    "CONTROL_PAR_MOUSE_BEHAVIOUR_X":
    {
        "prefix": "CONTROL_PAR_MOUSE_BEHAVIOUR_X",
        "body":[
            "$CONTROL_PAR_MOUSE_BEHAVIOUR_X"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MOUSE_BEHAVIOUR_X"
    },
    "CONTROL_PAR_MOUSE_BEHAVIOUR_Y":
    {
        "prefix": "CONTROL_PAR_MOUSE_BEHAVIOUR_Y",
        "body":[
            "$CONTROL_PAR_MOUSE_BEHAVIOUR_Y"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MOUSE_BEHAVIOUR_Y"
    },
    "CONTROL_PAR_MOUSE_MODE":
    {
        "prefix": "CONTROL_PAR_MOUSE_MODE",
        "body":[
            "$CONTROL_PAR_MOUSE_MODE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_MOUSE_MODE"
    },
    "CONTROL_PAR_ACTIVE_INDEX":
    {
        "prefix": "CONTROL_PAR_ACTIVE_INDEX",
        "body":[
            "$CONTROL_PAR_ACTIVE_INDEX"
        ],
        "description": "Built-in Variable: CONTROL_PAR_ACTIVE_INDEX"
    },
    "CONTROL_PAR_CURSOR_PICTURE":
    {
        "prefix": "CONTROL_PAR_CURSOR_PICTURE",
        "body":[
            "$CONTROL_PAR_CURSOR_PICTURE"
        ],
        "description": "Built-in Variable: CONTROL_PAR_CURSOR_PICTURE"
    },
    "CONTROL_PAR_ZERO_LINE_COLOR":
    {
        "prefix": "CONTROL_PAR_ZERO_LINE_COLOR",
        "body":[
            "$CONTROL_PAR_ZERO_LINE_COLOR"
        ],
        "description": "Built-in Variable: CONTROL_PAR_ZERO_LINE_COLOR"
    },
    "CURRENT_EVENT":
    {
        "prefix": "CURRENT_EVENT",
        "body":[
            "$CURRENT_EVENT"
        ],
        "description": "Built-in Variable: CURRENT_EVENT"
    },
    "CURRENT_SCRIPT_SLOT":
    {
        "prefix": "CURRENT_SCRIPT_SLOT",
        "body":[
            "$CURRENT_SCRIPT_SLOT"
        ],
        "description": "Built-in Variable: CURRENT_SCRIPT_SLOT"
    },
    "DISTANCE_BAR_START":
    {
        "prefix": "DISTANCE_BAR_START",
        "body":[
            "$DISTANCE_BAR_START"
        ],
        "description": "Built-in Variable: DISTANCE_BAR_START"
    },
    "DURATION_BAR":
    {
        "prefix": "DURATION_BAR",
        "body":[
            "$DURATION_BAR"
        ],
        "description": "Built-in Variable: DURATION_BAR"
    },
    "DURATION_EIGHTH":
    {
        "prefix": "DURATION_EIGHTH",
        "body":[
            "$DURATION_EIGHTH"
        ],
        "description": "Built-in Variable: DURATION_EIGHTH"
    },
    "DURATION_EIGHTH_TRIPLET":
    {
        "prefix": "DURATION_EIGHTH_TRIPLET",
        "body":[
            "$DURATION_EIGHTH_TRIPLET"
        ],
        "description": "Built-in Variable: DURATION_EIGHTH_TRIPLET"
    },
    "DURATION_QUARTER":
    {
        "prefix": "DURATION_QUARTER",
        "body":[
            "$DURATION_QUARTER"
        ],
        "description": "Built-in Variable: DURATION_QUARTER"
    },
    "DURATION_QUARTER_TRIPLET":
    {
        "prefix": "DURATION_QUARTER_TRIPLET",
        "body":[
            "$DURATION_QUARTER_TRIPLET"
        ],
        "description": "Built-in Variable: DURATION_QUARTER_TRIPLET"
    },
    "DURATION_SIXTEENTH":
    {
        "prefix": "DURATION_SIXTEENTH",
        "body":[
            "$DURATION_SIXTEENTH"
        ],
        "description": "Built-in Variable: DURATION_SIXTEENTH"
    },
    "DURATION_SIXTEENTH_TRIPLET":
    {
        "prefix": "DURATION_SIXTEENTH_TRIPLET",
        "body":[
            "$DURATION_SIXTEENTH_TRIPLET"
        ],
        "description": "Built-in Variable: DURATION_SIXTEENTH_TRIPLET"
    },
    "EFFECT_TYPE_AET_FILTER":
    {
        "prefix": "EFFECT_TYPE_AET_FILTER",
        "body":[
            "$EFFECT_TYPE_AET_FILTER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_AET_FILTER"
    },
    "EFFECT_TYPE_BUS_COMP":
    {
        "prefix": "EFFECT_TYPE_BUS_COMP",
        "body":[
            "$EFFECT_TYPE_BUS_COMP"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_BUS_COMP"
    },
    "EFFECT_TYPE_CABINET":
    {
        "prefix": "EFFECT_TYPE_CABINET",
        "body":[
            "$EFFECT_TYPE_CABINET"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_CABINET"
    },
    "EFFECT_TYPE_CHORUS":
    {
        "prefix": "EFFECT_TYPE_CHORUS",
        "body":[
            "$EFFECT_TYPE_CHORUS"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_CHORUS"
    },
    "EFFECT_TYPE_COMPRESSOR":
    {
        "prefix": "EFFECT_TYPE_COMPRESSOR",
        "body":[
            "$EFFECT_TYPE_COMPRESSOR"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_COMPRESSOR"
    },
    "EFFECT_TYPE_DELAY":
    {
        "prefix": "EFFECT_TYPE_DELAY",
        "body":[
            "$EFFECT_TYPE_DELAY"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_DELAY"
    },
    "EFFECT_TYPE_DISTORTION":
    {
        "prefix": "EFFECT_TYPE_DISTORTION",
        "body":[
            "$EFFECT_TYPE_DISTORTION"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_DISTORTION"
    },
    "EFFECT_TYPE_FB_COMP":
    {
        "prefix": "EFFECT_TYPE_FB_COMP",
        "body":[
            "$EFFECT_TYPE_FB_COMP"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_FB_COMP"
    },
    "EFFECT_TYPE_FILTER":
    {
        "prefix": "EFFECT_TYPE_FILTER",
        "body":[
            "$EFFECT_TYPE_FILTER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_FILTER"
    },
    "EFFECT_TYPE_FLANGER":
    {
        "prefix": "EFFECT_TYPE_FLANGER",
        "body":[
            "$EFFECT_TYPE_FLANGER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_FLANGER"
    },
    "EFFECT_TYPE_GAINER":
    {
        "prefix": "EFFECT_TYPE_GAINER",
        "body":[
            "$EFFECT_TYPE_GAINER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_GAINER"
    },
    "EFFECT_TYPE_INVERTER":
    {
        "prefix": "EFFECT_TYPE_INVERTER",
        "body":[
            "$EFFECT_TYPE_INVERTER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_INVERTER"
    },
    "EFFECT_TYPE_IRC":
    {
        "prefix": "EFFECT_TYPE_IRC",
        "body":[
            "$EFFECT_TYPE_IRC"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_IRC"
    },
    "EFFECT_TYPE_JUMP":
    {
        "prefix": "EFFECT_TYPE_JUMP",
        "body":[
            "$EFFECT_TYPE_JUMP"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_JUMP"
    },
    "EFFECT_TYPE_LIMITER":
    {
        "prefix": "EFFECT_TYPE_LIMITER",
        "body":[
            "$EFFECT_TYPE_LIMITER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_LIMITER"
    },
    "EFFECT_TYPE_LOFI":
    {
        "prefix": "EFFECT_TYPE_LOFI",
        "body":[
            "$EFFECT_TYPE_LOFI"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_LOFI"
    },
    "EFFECT_TYPE_NONE":
    {
        "prefix": "EFFECT_TYPE_NONE",
        "body":[
            "$EFFECT_TYPE_NONE"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_NONE"
    },
    "EFFECT_TYPE_PHASER":
    {
        "prefix": "EFFECT_TYPE_PHASER",
        "body":[
            "$EFFECT_TYPE_PHASER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_PHASER"
    },
    "EFFECT_TYPE_REVERB":
    {
        "prefix": "EFFECT_TYPE_REVERB",
        "body":[
            "$EFFECT_TYPE_REVERB"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_REVERB"
    },
    "EFFECT_TYPE_ROTATOR":
    {
        "prefix": "EFFECT_TYPE_ROTATOR",
        "body":[
            "$EFFECT_TYPE_ROTATOR"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_ROTATOR"
    },
    "EFFECT_TYPE_SEND_LEVELS":
    {
        "prefix": "EFFECT_TYPE_SEND_LEVELS",
        "body":[
            "$EFFECT_TYPE_SEND_LEVELS"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_SEND_LEVELS"
    },
    "EFFECT_TYPE_SHAPER":
    {
        "prefix": "EFFECT_TYPE_SHAPER",
        "body":[
            "$EFFECT_TYPE_SHAPER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_SHAPER"
    },
    "EFFECT_TYPE_SKREAMER":
    {
        "prefix": "EFFECT_TYPE_SKREAMER",
        "body":[
            "$EFFECT_TYPE_SKREAMER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_SKREAMER"
    },
    "EFFECT_TYPE_SOLID_GEQ":
    {
        "prefix": "EFFECT_TYPE_SOLID_GEQ",
        "body":[
            "$EFFECT_TYPE_SOLID_GEQ"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_SOLID_GEQ"
    },
    "EFFECT_TYPE_STEREO":
    {
        "prefix": "EFFECT_TYPE_STEREO",
        "body":[
            "$EFFECT_TYPE_STEREO"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_STEREO"
    },
    "EFFECT_TYPE_SURROUND_PANNER":
    {
        "prefix": "EFFECT_TYPE_SURROUND_PANNER",
        "body":[
            "$EFFECT_TYPE_SURROUND_PANNER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_SURROUND_PANNER"
    },
    "EFFECT_TYPE_TAPE_SAT":
    {
        "prefix": "EFFECT_TYPE_TAPE_SAT",
        "body":[
            "$EFFECT_TYPE_TAPE_SAT"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_TAPE_SAT"
    },
    "EFFECT_TYPE_TRANS_MASTER":
    {
        "prefix": "EFFECT_TYPE_TRANS_MASTER",
        "body":[
            "$EFFECT_TYPE_TRANS_MASTER"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_TRANS_MASTER"
    },
    "EFFECT_TYPE_TWANG":
    {
        "prefix": "EFFECT_TYPE_TWANG",
        "body":[
            "$EFFECT_TYPE_TWANG"
        ],
        "description": "Built-in Variable: EFFECT_TYPE_TWANG"
    },
    "ENGINE_PAR_ATK_CURVE":
    {
        "prefix": "ENGINE_PAR_ATK_CURVE",
        "body":[
            "$ENGINE_PAR_ATK_CURVE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_ATK_CURVE"
    },
    "ENGINE_PAR_ATTACK":
    {
        "prefix": "ENGINE_PAR_ATTACK",
        "body":[
            "$ENGINE_PAR_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_ATTACK"
    },
    "ENGINE_PAR_ATTACK_UNIT":
    {
        "prefix": "ENGINE_PAR_ATTACK_UNIT",
        "body":[
            "$ENGINE_PAR_ATTACK_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_ATTACK_UNIT"
    },
    "ENGINE_PAR_BANDWIDTH":
    {
        "prefix": "ENGINE_PAR_BANDWIDTH",
        "body":[
            "$ENGINE_PAR_BANDWIDTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BANDWIDTH"
    },
    "ENGINE_PAR_BITS":
    {
        "prefix": "ENGINE_PAR_BITS",
        "body":[
            "$ENGINE_PAR_BITS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BITS"
    },
    "ENGINE_PAR_BREAK":
    {
        "prefix": "ENGINE_PAR_BREAK",
        "body":[
            "$ENGINE_PAR_BREAK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BREAK"
    },
    "ENGINE_PAR_BW1":
    {
        "prefix": "ENGINE_PAR_BW1",
        "body":[
            "$ENGINE_PAR_BW1"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BW1"
    },
    "ENGINE_PAR_BW2":
    {
        "prefix": "ENGINE_PAR_BW2",
        "body":[
            "$ENGINE_PAR_BW2"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BW2"
    },
    "ENGINE_PAR_BW3":
    {
        "prefix": "ENGINE_PAR_BW3",
        "body":[
            "$ENGINE_PAR_BW3"
        ],
        "description": "Built-in Variable: ENGINE_PAR_BW3"
    },
    "ENGINE_PAR_CABINET_TYPE":
    {
        "prefix": "ENGINE_PAR_CABINET_TYPE",
        "body":[
            "$ENGINE_PAR_CABINET_TYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CABINET_TYPE"
    },
    "ENGINE_PAR_CB_AIR":
    {
        "prefix": "ENGINE_PAR_CB_AIR",
        "body":[
            "$ENGINE_PAR_CB_AIR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CB_AIR"
    },
    "ENGINE_PAR_CB_BASS":
    {
        "prefix": "ENGINE_PAR_CB_BASS",
        "body":[
            "$ENGINE_PAR_CB_BASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CB_BASS"
    },
    "ENGINE_PAR_CB_SIZE":
    {
        "prefix": "ENGINE_PAR_CB_SIZE",
        "body":[
            "$ENGINE_PAR_CB_SIZE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CB_SIZE"
    },
    "ENGINE_PAR_CB_TREBLE":
    {
        "prefix": "ENGINE_PAR_CB_TREBLE",
        "body":[
            "$ENGINE_PAR_CB_TREBLE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CB_TREBLE"
    },
    "ENGINE_PAR_CH_DEPTH":
    {
        "prefix": "ENGINE_PAR_CH_DEPTH",
        "body":[
            "$ENGINE_PAR_CH_DEPTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CH_DEPTH"
    },
    "ENGINE_PAR_CH_PHASE":
    {
        "prefix": "ENGINE_PAR_CH_PHASE",
        "body":[
            "$ENGINE_PAR_CH_PHASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CH_PHASE"
    },
    "ENGINE_PAR_CH_SPEED":
    {
        "prefix": "ENGINE_PAR_CH_SPEED",
        "body":[
            "$ENGINE_PAR_CH_SPEED"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CH_SPEED"
    },
    "ENGINE_PAR_CH_SPEED_UNIT":
    {
        "prefix": "ENGINE_PAR_CH_SPEED_UNIT",
        "body":[
            "$ENGINE_PAR_CH_SPEED_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CH_SPEED_UNIT"
    },
    "ENGINE_PAR_COMP_ATTACK":
    {
        "prefix": "ENGINE_PAR_COMP_ATTACK",
        "body":[
            "$ENGINE_PAR_COMP_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_COMP_ATTACK"
    },
    "ENGINE_PAR_COMP_DECAY":
    {
        "prefix": "ENGINE_PAR_COMP_DECAY",
        "body":[
            "$ENGINE_PAR_COMP_DECAY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_COMP_DECAY"
    },
    "ENGINE_PAR_CUTOFF":
    {
        "prefix": "ENGINE_PAR_CUTOFF",
        "body":[
            "$ENGINE_PAR_CUTOFF"
        ],
        "description": "Built-in Variable: ENGINE_PAR_CUTOFF"
    },
    "ENGINE_PAR_DAMPING":
    {
        "prefix": "ENGINE_PAR_DAMPING",
        "body":[
            "$ENGINE_PAR_DAMPING"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DAMPING"
    },
    "ENGINE_PAR_DECAY":
    {
        "prefix": "ENGINE_PAR_DECAY",
        "body":[
            "$ENGINE_PAR_DECAY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY"
    },
    "ENGINE_PAR_DECAY1":
    {
        "prefix": "ENGINE_PAR_DECAY1",
        "body":[
            "$ENGINE_PAR_DECAY1"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY1"
    },
    "ENGINE_PAR_DECAY1_UNIT":
    {
        "prefix": "ENGINE_PAR_DECAY1_UNIT",
        "body":[
            "$ENGINE_PAR_DECAY1_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY1_UNIT"
    },
    "ENGINE_PAR_DECAY2":
    {
        "prefix": "ENGINE_PAR_DECAY2",
        "body":[
            "$ENGINE_PAR_DECAY2"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY2"
    },
    "ENGINE_PAR_DECAY2_UNIT":
    {
        "prefix": "ENGINE_PAR_DECAY2_UNIT",
        "body":[
            "$ENGINE_PAR_DECAY2_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY2_UNIT"
    },
    "ENGINE_PAR_DECAY_UNIT":
    {
        "prefix": "ENGINE_PAR_DECAY_UNIT",
        "body":[
            "$ENGINE_PAR_DECAY_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DECAY_UNIT"
    },
    "ENGINE_PAR_DL_DAMPING":
    {
        "prefix": "ENGINE_PAR_DL_DAMPING",
        "body":[
            "$ENGINE_PAR_DL_DAMPING"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DL_DAMPING"
    },
    "ENGINE_PAR_DL_FEEDBACK":
    {
        "prefix": "ENGINE_PAR_DL_FEEDBACK",
        "body":[
            "$ENGINE_PAR_DL_FEEDBACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DL_FEEDBACK"
    },
    "ENGINE_PAR_DL_PAN":
    {
        "prefix": "ENGINE_PAR_DL_PAN",
        "body":[
            "$ENGINE_PAR_DL_PAN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DL_PAN"
    },
    "ENGINE_PAR_DL_TIME":
    {
        "prefix": "ENGINE_PAR_DL_TIME",
        "body":[
            "$ENGINE_PAR_DL_TIME"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DL_TIME"
    },
    "ENGINE_PAR_DL_TIME_UNIT":
    {
        "prefix": "ENGINE_PAR_DL_TIME_UNIT",
        "body":[
            "$ENGINE_PAR_DL_TIME_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DL_TIME_UNIT"
    },
    "ENGINE_PAR_DRIVE":
    {
        "prefix": "ENGINE_PAR_DRIVE",
        "body":[
            "$ENGINE_PAR_DRIVE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_DRIVE"
    },
    "ENGINE_PAR_EFFECT_BYPASS":
    {
        "prefix": "ENGINE_PAR_EFFECT_BYPASS",
        "body":[
            "$ENGINE_PAR_EFFECT_BYPASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_EFFECT_BYPASS"
    },
    "ENGINE_PAR_EFFECT_SUBTYPE":
    {
        "prefix": "ENGINE_PAR_EFFECT_SUBTYPE",
        "body":[
            "$ENGINE_PAR_EFFECT_SUBTYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_EFFECT_SUBTYPE"
    },
    "ENGINE_PAR_EFFECT_TYPE":
    {
        "prefix": "ENGINE_PAR_EFFECT_TYPE",
        "body":[
            "$ENGINE_PAR_EFFECT_TYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_EFFECT_TYPE"
    },
    "ENGINE_PAR_ENVELOPE_ORDER":
    {
        "prefix": "ENGINE_PAR_ENVELOPE_ORDER",
        "body":[
            "$ENGINE_PAR_ENVELOPE_ORDER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_ENVELOPE_ORDER"
    },
    "ENGINE_PAR_EXP_FILTER_AMOUNT":
    {
        "prefix": "ENGINE_PAR_EXP_FILTER_AMOUNT",
        "body":[
            "$ENGINE_PAR_EXP_FILTER_AMOUNT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_EXP_FILTER_AMOUNT"
    },
    "ENGINE_PAR_EXP_FILTER_MORPH":
    {
        "prefix": "ENGINE_PAR_EXP_FILTER_MORPH",
        "body":[
            "$ENGINE_PAR_EXP_FILTER_MORPH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_EXP_FILTER_MORPH"
    },
    "ENGINE_PAR_FCOMP_ATTACK":
    {
        "prefix": "ENGINE_PAR_FCOMP_ATTACK",
        "body":[
            "$ENGINE_PAR_FCOMP_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_ATTACK"
    },
    "ENGINE_PAR_FCOMP_INPUT":
    {
        "prefix": "ENGINE_PAR_FCOMP_INPUT",
        "body":[
            "$ENGINE_PAR_FCOMP_INPUT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_INPUT"
    },
    "ENGINE_PAR_FCOMP_MAKEUP":
    {
        "prefix": "ENGINE_PAR_FCOMP_MAKEUP",
        "body":[
            "$ENGINE_PAR_FCOMP_MAKEUP"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_MAKEUP"
    },
    "ENGINE_PAR_FCOMP_MIX":
    {
        "prefix": "ENGINE_PAR_FCOMP_MIX",
        "body":[
            "$ENGINE_PAR_FCOMP_MIX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_MIX"
    },
    "ENGINE_PAR_FCOMP_RATIO":
    {
        "prefix": "ENGINE_PAR_FCOMP_RATIO",
        "body":[
            "$ENGINE_PAR_FCOMP_RATIO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_RATIO"
    },
    "ENGINE_PAR_FCOMP_RELEASE":
    {
        "prefix": "ENGINE_PAR_FCOMP_RELEASE",
        "body":[
            "$ENGINE_PAR_FCOMP_RELEASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FCOMP_RELEASE"
    },
    "ENGINE_PAR_FILTER_BYPA":
    {
        "prefix": "ENGINE_PAR_FILTER_BYPA",
        "body":[
            "$ENGINE_PAR_FILTER_BYPA"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_BYPA"
    },
    "ENGINE_PAR_FILTER_BYPB":
    {
        "prefix": "ENGINE_PAR_FILTER_BYPB",
        "body":[
            "$ENGINE_PAR_FILTER_BYPB"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_BYPB"
    },
    "ENGINE_PAR_FILTER_BYPC":
    {
        "prefix": "ENGINE_PAR_FILTER_BYPC",
        "body":[
            "$ENGINE_PAR_FILTER_BYPC"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_BYPC"
    },
    "ENGINE_PAR_FILTER_GAIN":
    {
        "prefix": "ENGINE_PAR_FILTER_GAIN",
        "body":[
            "$ENGINE_PAR_FILTER_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_GAIN"
    },
    "ENGINE_PAR_FILTER_RESB":
    {
        "prefix": "ENGINE_PAR_FILTER_RESB",
        "body":[
            "$ENGINE_PAR_FILTER_RESB"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_RESB"
    },
    "ENGINE_PAR_FILTER_RESC":
    {
        "prefix": "ENGINE_PAR_FILTER_RESC",
        "body":[
            "$ENGINE_PAR_FILTER_RESC"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_RESC"
    },
    "ENGINE_PAR_FILTER_SHIFTB":
    {
        "prefix": "ENGINE_PAR_FILTER_SHIFTB",
        "body":[
            "$ENGINE_PAR_FILTER_SHIFTB"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_SHIFTB"
    },
    "ENGINE_PAR_FILTER_SHIFTC":
    {
        "prefix": "ENGINE_PAR_FILTER_SHIFTC",
        "body":[
            "$ENGINE_PAR_FILTER_SHIFTC"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_SHIFTC"
    },
    "ENGINE_PAR_FILTER_TYPEA":
    {
        "prefix": "ENGINE_PAR_FILTER_TYPEA",
        "body":[
            "$ENGINE_PAR_FILTER_TYPEA"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_TYPEA"
    },
    "ENGINE_PAR_FILTER_TYPEB":
    {
        "prefix": "ENGINE_PAR_FILTER_TYPEB",
        "body":[
            "$ENGINE_PAR_FILTER_TYPEB"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_TYPEB"
    },
    "ENGINE_PAR_FILTER_TYPEC":
    {
        "prefix": "ENGINE_PAR_FILTER_TYPEC",
        "body":[
            "$ENGINE_PAR_FILTER_TYPEC"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FILTER_TYPEC"
    },
    "ENGINE_PAR_FL_COLOR":
    {
        "prefix": "ENGINE_PAR_FL_COLOR",
        "body":[
            "$ENGINE_PAR_FL_COLOR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_COLOR"
    },
    "ENGINE_PAR_FL_DEPTH":
    {
        "prefix": "ENGINE_PAR_FL_DEPTH",
        "body":[
            "$ENGINE_PAR_FL_DEPTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_DEPTH"
    },
    "ENGINE_PAR_FL_FEEDBACK":
    {
        "prefix": "ENGINE_PAR_FL_FEEDBACK",
        "body":[
            "$ENGINE_PAR_FL_FEEDBACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_FEEDBACK"
    },
    "ENGINE_PAR_FL_PHASE":
    {
        "prefix": "ENGINE_PAR_FL_PHASE",
        "body":[
            "$ENGINE_PAR_FL_PHASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_PHASE"
    },
    "ENGINE_PAR_FL_SPEED":
    {
        "prefix": "ENGINE_PAR_FL_SPEED",
        "body":[
            "$ENGINE_PAR_FL_SPEED"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_SPEED"
    },
    "ENGINE_PAR_FL_SPEED_UNIT":
    {
        "prefix": "ENGINE_PAR_FL_SPEED_UNIT",
        "body":[
            "$ENGINE_PAR_FL_SPEED_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FL_SPEED_UNIT"
    },
    "ENGINE_PAR_FORMANT":
    {
        "prefix": "ENGINE_PAR_FORMANT",
        "body":[
            "$ENGINE_PAR_FORMANT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FORMANT"
    },
    "ENGINE_PAR_FORMANT_SHARP":
    {
        "prefix": "ENGINE_PAR_FORMANT_SHARP",
        "body":[
            "$ENGINE_PAR_FORMANT_SHARP"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FORMANT_SHARP"
    },
    "ENGINE_PAR_FORMANT_SHIFT":
    {
        "prefix": "ENGINE_PAR_FORMANT_SHIFT",
        "body":[
            "$ENGINE_PAR_FORMANT_SHIFT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FORMANT_SHIFT"
    },
    "ENGINE_PAR_FORMANT_SIZE":
    {
        "prefix": "ENGINE_PAR_FORMANT_SIZE",
        "body":[
            "$ENGINE_PAR_FORMANT_SIZE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FORMANT_SIZE"
    },
    "ENGINE_PAR_FORMANT_TALK":
    {
        "prefix": "ENGINE_PAR_FORMANT_TALK",
        "body":[
            "$ENGINE_PAR_FORMANT_TALK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FORMANT_TALK"
    },
    "ENGINE_PAR_FREQ1":
    {
        "prefix": "ENGINE_PAR_FREQ1",
        "body":[
            "$ENGINE_PAR_FREQ1"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FREQ1"
    },
    "ENGINE_PAR_FREQ2":
    {
        "prefix": "ENGINE_PAR_FREQ2",
        "body":[
            "$ENGINE_PAR_FREQ2"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FREQ2"
    },
    "ENGINE_PAR_FREQ3":
    {
        "prefix": "ENGINE_PAR_FREQ3",
        "body":[
            "$ENGINE_PAR_FREQ3"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FREQ3"
    },
    "ENGINE_PAR_FREQUENCY":
    {
        "prefix": "ENGINE_PAR_FREQUENCY",
        "body":[
            "$ENGINE_PAR_FREQUENCY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_FREQUENCY"
    },
    "ENGINE_PAR_GAIN":
    {
        "prefix": "ENGINE_PAR_GAIN",
        "body":[
            "$ENGINE_PAR_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GAIN"
    },
    "ENGINE_PAR_GAIN1":
    {
        "prefix": "ENGINE_PAR_GAIN1",
        "body":[
            "$ENGINE_PAR_GAIN1"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GAIN1"
    },
    "ENGINE_PAR_GAIN2":
    {
        "prefix": "ENGINE_PAR_GAIN2",
        "body":[
            "$ENGINE_PAR_GAIN2"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GAIN2"
    },
    "ENGINE_PAR_GAIN3":
    {
        "prefix": "ENGINE_PAR_GAIN3",
        "body":[
            "$ENGINE_PAR_GAIN3"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GAIN3"
    },
    "ENGINE_PAR_GLIDE_COEF":
    {
        "prefix": "ENGINE_PAR_GLIDE_COEF",
        "body":[
            "$ENGINE_PAR_GLIDE_COEF"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GLIDE_COEF"
    },
    "ENGINE_PAR_GLIDE_COEF_UNIT":
    {
        "prefix": "ENGINE_PAR_GLIDE_COEF_UNIT",
        "body":[
            "$ENGINE_PAR_GLIDE_COEF_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GLIDE_COEF_UNIT"
    },
    "ENGINE_PAR_GN_GAIN":
    {
        "prefix": "ENGINE_PAR_GN_GAIN",
        "body":[
            "$ENGINE_PAR_GN_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GN_GAIN"
    },
    "ENGINE_PAR_GRAIN_LENGTH":
    {
        "prefix": "ENGINE_PAR_GRAIN_LENGTH",
        "body":[
            "$ENGINE_PAR_GRAIN_LENGTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_GRAIN_LENGTH"
    },
    "ENGINE_PAR_HOLD":
    {
        "prefix": "ENGINE_PAR_HOLD",
        "body":[
            "$ENGINE_PAR_HOLD"
        ],
        "description": "Built-in Variable: ENGINE_PAR_HOLD"
    },
    "ENGINE_PAR_HOLD_UNIT":
    {
        "prefix": "ENGINE_PAR_HOLD_UNIT",
        "body":[
            "$ENGINE_PAR_HOLD_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_HOLD_UNIT"
    },
    "ENGINE_PAR_HP_CUTOFF":
    {
        "prefix": "ENGINE_PAR_HP_CUTOFF",
        "body":[
            "$ENGINE_PAR_HP_CUTOFF"
        ],
        "description": "Built-in Variable: ENGINE_PAR_HP_CUTOFF"
    },
    "ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN":
    {
        "prefix": "ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN",
        "body":[
            "$ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN"
    },
    "ENGINE_PAR_INTMOD_BYPASS":
    {
        "prefix": "ENGINE_PAR_INTMOD_BYPASS",
        "body":[
            "$ENGINE_PAR_INTMOD_BYPASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_BYPASS"
    },
    "ENGINE_PAR_INTMOD_FREQUENCY":
    {
        "prefix": "ENGINE_PAR_INTMOD_FREQUENCY",
        "body":[
            "$ENGINE_PAR_INTMOD_FREQUENCY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_FREQUENCY"
    },
    "ENGINE_PAR_INTMOD_FREQUENCY_UNIT":
    {
        "prefix": "ENGINE_PAR_INTMOD_FREQUENCY_UNIT",
        "body":[
            "$ENGINE_PAR_INTMOD_FREQUENCY_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_FREQUENCY_UNIT"
    },
    "ENGINE_PAR_INTMOD_PULSEWIDTH":
    {
        "prefix": "ENGINE_PAR_INTMOD_PULSEWIDTH",
        "body":[
            "$ENGINE_PAR_INTMOD_PULSEWIDTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_PULSEWIDTH"
    },
    "ENGINE_PAR_INTMOD_SUBTYPE":
    {
        "prefix": "ENGINE_PAR_INTMOD_SUBTYPE",
        "body":[
            "$ENGINE_PAR_INTMOD_SUBTYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_SUBTYPE"
    },
    "ENGINE_PAR_INTMOD_TYPE":
    {
        "prefix": "ENGINE_PAR_INTMOD_TYPE",
        "body":[
            "$ENGINE_PAR_INTMOD_TYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_INTMOD_TYPE"
    },
    "ENGINE_PAR_IRC_FREQ_HIGHPASS_ER":
    {
        "prefix": "ENGINE_PAR_IRC_FREQ_HIGHPASS_ER",
        "body":[
            "$ENGINE_PAR_IRC_FREQ_HIGHPASS_ER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_FREQ_HIGHPASS_ER"
    },
    "ENGINE_PAR_IRC_FREQ_HIGHPASS_LR":
    {
        "prefix": "ENGINE_PAR_IRC_FREQ_HIGHPASS_LR",
        "body":[
            "$ENGINE_PAR_IRC_FREQ_HIGHPASS_LR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_FREQ_HIGHPASS_LR"
    },
    "ENGINE_PAR_IRC_FREQ_LOWPASS_ER":
    {
        "prefix": "ENGINE_PAR_IRC_FREQ_LOWPASS_ER",
        "body":[
            "$ENGINE_PAR_IRC_FREQ_LOWPASS_ER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_FREQ_LOWPASS_ER"
    },
    "ENGINE_PAR_IRC_FREQ_LOWPASS_LR":
    {
        "prefix": "ENGINE_PAR_IRC_FREQ_LOWPASS_LR",
        "body":[
            "$ENGINE_PAR_IRC_FREQ_LOWPASS_LR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_FREQ_LOWPASS_LR"
    },
    "ENGINE_PAR_IRC_LENGTH_RATIO_ER":
    {
        "prefix": "ENGINE_PAR_IRC_LENGTH_RATIO_ER",
        "body":[
            "$ENGINE_PAR_IRC_LENGTH_RATIO_ER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_LENGTH_RATIO_ER"
    },
    "ENGINE_PAR_IRC_LENGTH_RATIO_LR":
    {
        "prefix": "ENGINE_PAR_IRC_LENGTH_RATIO_LR",
        "body":[
            "$ENGINE_PAR_IRC_LENGTH_RATIO_LR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_LENGTH_RATIO_LR"
    },
    "ENGINE_PAR_IRC_PREDELAY":
    {
        "prefix": "ENGINE_PAR_IRC_PREDELAY",
        "body":[
            "$ENGINE_PAR_IRC_PREDELAY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_IRC_PREDELAY"
    },
    "ENGINE_PAR_JMP_BASS":
    {
        "prefix": "ENGINE_PAR_JMP_BASS",
        "body":[
            "$ENGINE_PAR_JMP_BASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_BASS"
    },
    "ENGINE_PAR_JMP_HIGAIN":
    {
        "prefix": "ENGINE_PAR_JMP_HIGAIN",
        "body":[
            "$ENGINE_PAR_JMP_HIGAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_HIGAIN"
    },
    "ENGINE_PAR_JMP_MASTER":
    {
        "prefix": "ENGINE_PAR_JMP_MASTER",
        "body":[
            "$ENGINE_PAR_JMP_MASTER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_MASTER"
    },
    "ENGINE_PAR_JMP_MID":
    {
        "prefix": "ENGINE_PAR_JMP_MID",
        "body":[
            "$ENGINE_PAR_JMP_MID"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_MID"
    },
    "ENGINE_PAR_JMP_MONO":
    {
        "prefix": "ENGINE_PAR_JMP_MONO",
        "body":[
            "$ENGINE_PAR_JMP_MONO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_MONO"
    },
    "ENGINE_PAR_JMP_PREAMP":
    {
        "prefix": "ENGINE_PAR_JMP_PREAMP",
        "body":[
            "$ENGINE_PAR_JMP_PREAMP"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_PREAMP"
    },
    "ENGINE_PAR_JMP_PRESENCE":
    {
        "prefix": "ENGINE_PAR_JMP_PRESENCE",
        "body":[
            "$ENGINE_PAR_JMP_PRESENCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_PRESENCE"
    },
    "ENGINE_PAR_JMP_TREBLE":
    {
        "prefix": "ENGINE_PAR_JMP_TREBLE",
        "body":[
            "$ENGINE_PAR_JMP_TREBLE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_JMP_TREBLE"
    },
    "ENGINE_PAR_LFO_DELAY":
    {
        "prefix": "ENGINE_PAR_LFO_DELAY",
        "body":[
            "$ENGINE_PAR_LFO_DELAY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_DELAY"
    },
    "ENGINE_PAR_LFO_DELAY_UNIT":
    {
        "prefix": "ENGINE_PAR_LFO_DELAY_UNIT",
        "body":[
            "$ENGINE_PAR_LFO_DELAY_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_DELAY_UNIT"
    },
    "ENGINE_PAR_LFO_RAND":
    {
        "prefix": "ENGINE_PAR_LFO_RAND",
        "body":[
            "$ENGINE_PAR_LFO_RAND"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_RAND"
    },
    "ENGINE_PAR_LFO_RECT":
    {
        "prefix": "ENGINE_PAR_LFO_RECT",
        "body":[
            "$ENGINE_PAR_LFO_RECT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_RECT"
    },
    "ENGINE_PAR_LFO_SAW":
    {
        "prefix": "ENGINE_PAR_LFO_SAW",
        "body":[
            "$ENGINE_PAR_LFO_SAW"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_SAW"
    },
    "ENGINE_PAR_LFO_SINE":
    {
        "prefix": "ENGINE_PAR_LFO_SINE",
        "body":[
            "$ENGINE_PAR_LFO_SINE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_SINE"
    },
    "ENGINE_PAR_LFO_TRI":
    {
        "prefix": "ENGINE_PAR_LFO_TRI",
        "body":[
            "$ENGINE_PAR_LFO_TRI"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LFO_TRI"
    },
    "ENGINE_PAR_LIM_IN_GAIN":
    {
        "prefix": "ENGINE_PAR_LIM_IN_GAIN",
        "body":[
            "$ENGINE_PAR_LIM_IN_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LIM_IN_GAIN"
    },
    "ENGINE_PAR_LIM_RELEASE":
    {
        "prefix": "ENGINE_PAR_LIM_RELEASE",
        "body":[
            "$ENGINE_PAR_LIM_RELEASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LIM_RELEASE"
    },
    "ENGINE_PAR_LP_CUTOFF":
    {
        "prefix": "ENGINE_PAR_LP_CUTOFF",
        "body":[
            "$ENGINE_PAR_LP_CUTOFF"
        ],
        "description": "Built-in Variable: ENGINE_PAR_LP_CUTOFF"
    },
    "ENGINE_PAR_MOD_TARGET_INTENSITY":
    {
        "prefix": "ENGINE_PAR_MOD_TARGET_INTENSITY",
        "body":[
            "$ENGINE_PAR_MOD_TARGET_INTENSITY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_MOD_TARGET_INTENSITY"
    },
    "ENGINE_PAR_NOISECOLOR":
    {
        "prefix": "ENGINE_PAR_NOISECOLOR",
        "body":[
            "$ENGINE_PAR_NOISECOLOR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_NOISECOLOR"
    },
    "ENGINE_PAR_NOISELEVEL":
    {
        "prefix": "ENGINE_PAR_NOISELEVEL",
        "body":[
            "$ENGINE_PAR_NOISELEVEL"
        ],
        "description": "Built-in Variable: ENGINE_PAR_NOISELEVEL"
    },
    "ENGINE_PAR_OUTPUT_CHANNEL":
    {
        "prefix": "ENGINE_PAR_OUTPUT_CHANNEL",
        "body":[
            "$ENGINE_PAR_OUTPUT_CHANNEL"
        ],
        "description": "Built-in Variable: ENGINE_PAR_OUTPUT_CHANNEL"
    },
    "ENGINE_PAR_PAN":
    {
        "prefix": "ENGINE_PAR_PAN",
        "body":[
            "$ENGINE_PAR_PAN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PAN"
    },
    "ENGINE_PAR_PH_DEPTH":
    {
        "prefix": "ENGINE_PAR_PH_DEPTH",
        "body":[
            "$ENGINE_PAR_PH_DEPTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PH_DEPTH"
    },
    "ENGINE_PAR_PH_FEEDBACK":
    {
        "prefix": "ENGINE_PAR_PH_FEEDBACK",
        "body":[
            "$ENGINE_PAR_PH_FEEDBACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PH_FEEDBACK"
    },
    "ENGINE_PAR_PH_PHASE":
    {
        "prefix": "ENGINE_PAR_PH_PHASE",
        "body":[
            "$ENGINE_PAR_PH_PHASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PH_PHASE"
    },
    "ENGINE_PAR_PH_SPEED":
    {
        "prefix": "ENGINE_PAR_PH_SPEED",
        "body":[
            "$ENGINE_PAR_PH_SPEED"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PH_SPEED"
    },
    "ENGINE_PAR_PH_SPEED_UNIT":
    {
        "prefix": "ENGINE_PAR_PH_SPEED_UNIT",
        "body":[
            "$ENGINE_PAR_PH_SPEED_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_PH_SPEED_UNIT"
    },
    "ENGINE_PAR_RATIO":
    {
        "prefix": "ENGINE_PAR_RATIO",
        "body":[
            "$ENGINE_PAR_RATIO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RATIO"
    },
    "ENGINE_PAR_RELEASE":
    {
        "prefix": "ENGINE_PAR_RELEASE",
        "body":[
            "$ENGINE_PAR_RELEASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RELEASE"
    },
    "ENGINE_PAR_RELEASE_UNIT":
    {
        "prefix": "ENGINE_PAR_RELEASE_UNIT",
        "body":[
            "$ENGINE_PAR_RELEASE_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RELEASE_UNIT"
    },
    "ENGINE_PAR_RESONANCE":
    {
        "prefix": "ENGINE_PAR_RESONANCE",
        "body":[
            "$ENGINE_PAR_RESONANCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RESONANCE"
    },
    "ENGINE_PAR_RT_ACCEL_HI":
    {
        "prefix": "ENGINE_PAR_RT_ACCEL_HI",
        "body":[
            "$ENGINE_PAR_RT_ACCEL_HI"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_ACCEL_HI"
    },
    "ENGINE_PAR_RT_ACCEL_LO":
    {
        "prefix": "ENGINE_PAR_RT_ACCEL_LO",
        "body":[
            "$ENGINE_PAR_RT_ACCEL_LO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_ACCEL_LO"
    },
    "ENGINE_PAR_RT_BALANCE":
    {
        "prefix": "ENGINE_PAR_RT_BALANCE",
        "body":[
            "$ENGINE_PAR_RT_BALANCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_BALANCE"
    },
    "ENGINE_PAR_RT_DISTANCE":
    {
        "prefix": "ENGINE_PAR_RT_DISTANCE",
        "body":[
            "$ENGINE_PAR_RT_DISTANCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_DISTANCE"
    },
    "ENGINE_PAR_RT_MIX":
    {
        "prefix": "ENGINE_PAR_RT_MIX",
        "body":[
            "$ENGINE_PAR_RT_MIX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_MIX"
    },
    "ENGINE_PAR_RT_SPEED":
    {
        "prefix": "ENGINE_PAR_RT_SPEED",
        "body":[
            "$ENGINE_PAR_RT_SPEED"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RT_SPEED"
    },
    "ENGINE_PAR_RV_COLOUR":
    {
        "prefix": "ENGINE_PAR_RV_COLOUR",
        "body":[
            "$ENGINE_PAR_RV_COLOUR"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RV_COLOUR"
    },
    "ENGINE_PAR_RV_DAMPING":
    {
        "prefix": "ENGINE_PAR_RV_DAMPING",
        "body":[
            "$ENGINE_PAR_RV_DAMPING"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RV_DAMPING"
    },
    "ENGINE_PAR_RV_PREDELAY":
    {
        "prefix": "ENGINE_PAR_RV_PREDELAY",
        "body":[
            "$ENGINE_PAR_RV_PREDELAY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RV_PREDELAY"
    },
    "ENGINE_PAR_RV_SIZE":
    {
        "prefix": "ENGINE_PAR_RV_SIZE",
        "body":[
            "$ENGINE_PAR_RV_SIZE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RV_SIZE"
    },
    "ENGINE_PAR_RV_STEREO":
    {
        "prefix": "ENGINE_PAR_RV_STEREO",
        "body":[
            "$ENGINE_PAR_RV_STEREO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_RV_STEREO"
    },
    "ENGINE_PAR_SCOMP_ATTACK":
    {
        "prefix": "ENGINE_PAR_SCOMP_ATTACK",
        "body":[
            "$ENGINE_PAR_SCOMP_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_ATTACK"
    },
    "ENGINE_PAR_SCOMP_MAKEUP":
    {
        "prefix": "ENGINE_PAR_SCOMP_MAKEUP",
        "body":[
            "$ENGINE_PAR_SCOMP_MAKEUP"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_MAKEUP"
    },
    "ENGINE_PAR_SCOMP_MIX":
    {
        "prefix": "ENGINE_PAR_SCOMP_MIX",
        "body":[
            "$ENGINE_PAR_SCOMP_MIX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_MIX"
    },
    "ENGINE_PAR_SCOMP_RATIO":
    {
        "prefix": "ENGINE_PAR_SCOMP_RATIO",
        "body":[
            "$ENGINE_PAR_SCOMP_RATIO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_RATIO"
    },
    "ENGINE_PAR_SCOMP_RELEASE":
    {
        "prefix": "ENGINE_PAR_SCOMP_RELEASE",
        "body":[
            "$ENGINE_PAR_SCOMP_RELEASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_RELEASE"
    },
    "ENGINE_PAR_SCOMP_THRESHOLD":
    {
        "prefix": "ENGINE_PAR_SCOMP_THRESHOLD",
        "body":[
            "$ENGINE_PAR_SCOMP_THRESHOLD"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SCOMP_THRESHOLD"
    },
    "ENGINE_PAR_SENDLEVEL_0":
    {
        "prefix": "ENGINE_PAR_SENDLEVEL_0",
        "body":[
            "$ENGINE_PAR_SENDLEVEL_0"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SENDLEVEL_0"
    },
    "ENGINE_PAR_SENDLEVEL_1":
    {
        "prefix": "ENGINE_PAR_SENDLEVEL_1",
        "body":[
            "$ENGINE_PAR_SENDLEVEL_1"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SENDLEVEL_1"
    },
    "ENGINE_PAR_SENDLEVEL_2":
    {
        "prefix": "ENGINE_PAR_SENDLEVEL_2",
        "body":[
            "$ENGINE_PAR_SENDLEVEL_2"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SENDLEVEL_2"
    },
    "ENGINE_PAR_SENDLEVEL_7":
    {
        "prefix": "ENGINE_PAR_SENDLEVEL_7",
        "body":[
            "$ENGINE_PAR_SENDLEVEL_7"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SENDLEVEL_7"
    },
    "ENGINE_PAR_SEND_EFFECT_BYPASS":
    {
        "prefix": "ENGINE_PAR_SEND_EFFECT_BYPASS",
        "body":[
            "$ENGINE_PAR_SEND_EFFECT_BYPASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEND_EFFECT_BYPASS"
    },
    "ENGINE_PAR_SEND_EFFECT_DRY_LEVEL":
    {
        "prefix": "ENGINE_PAR_SEND_EFFECT_DRY_LEVEL",
        "body":[
            "$ENGINE_PAR_SEND_EFFECT_DRY_LEVEL"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEND_EFFECT_DRY_LEVEL"
    },
    "ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN":
    {
        "prefix": "ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN",
        "body":[
            "$ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN"
    },
    "ENGINE_PAR_SEND_EFFECT_TYPE":
    {
        "prefix": "ENGINE_PAR_SEND_EFFECT_TYPE",
        "body":[
            "$ENGINE_PAR_SEND_EFFECT_TYPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEND_EFFECT_TYPE"
    },
    "ENGINE_PAR_SEQ_HF_BELL":
    {
        "prefix": "ENGINE_PAR_SEQ_HF_BELL",
        "body":[
            "$ENGINE_PAR_SEQ_HF_BELL"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HF_BELL"
    },
    "ENGINE_PAR_SEQ_HF_FREQ":
    {
        "prefix": "ENGINE_PAR_SEQ_HF_FREQ",
        "body":[
            "$ENGINE_PAR_SEQ_HF_FREQ"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HF_FREQ"
    },
    "ENGINE_PAR_SEQ_HF_GAIN":
    {
        "prefix": "ENGINE_PAR_SEQ_HF_GAIN",
        "body":[
            "$ENGINE_PAR_SEQ_HF_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HF_GAIN"
    },
    "ENGINE_PAR_SEQ_HMF_FREQ":
    {
        "prefix": "ENGINE_PAR_SEQ_HMF_FREQ",
        "body":[
            "$ENGINE_PAR_SEQ_HMF_FREQ"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HMF_FREQ"
    },
    "ENGINE_PAR_SEQ_HMF_GAIN":
    {
        "prefix": "ENGINE_PAR_SEQ_HMF_GAIN",
        "body":[
            "$ENGINE_PAR_SEQ_HMF_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HMF_GAIN"
    },
    "ENGINE_PAR_SEQ_HMF_Q":
    {
        "prefix": "ENGINE_PAR_SEQ_HMF_Q",
        "body":[
            "$ENGINE_PAR_SEQ_HMF_Q"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_HMF_Q"
    },
    "ENGINE_PAR_SEQ_LF_BELL":
    {
        "prefix": "ENGINE_PAR_SEQ_LF_BELL",
        "body":[
            "$ENGINE_PAR_SEQ_LF_BELL"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LF_BELL"
    },
    "ENGINE_PAR_SEQ_LF_FREQ":
    {
        "prefix": "ENGINE_PAR_SEQ_LF_FREQ",
        "body":[
            "$ENGINE_PAR_SEQ_LF_FREQ"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LF_FREQ"
    },
    "ENGINE_PAR_SEQ_LF_GAIN":
    {
        "prefix": "ENGINE_PAR_SEQ_LF_GAIN",
        "body":[
            "$ENGINE_PAR_SEQ_LF_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LF_GAIN"
    },
    "ENGINE_PAR_SEQ_LMF_FREQ":
    {
        "prefix": "ENGINE_PAR_SEQ_LMF_FREQ",
        "body":[
            "$ENGINE_PAR_SEQ_LMF_FREQ"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LMF_FREQ"
    },
    "ENGINE_PAR_SEQ_LMF_GAIN":
    {
        "prefix": "ENGINE_PAR_SEQ_LMF_GAIN",
        "body":[
            "$ENGINE_PAR_SEQ_LMF_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LMF_GAIN"
    },
    "ENGINE_PAR_SEQ_LMF_Q":
    {
        "prefix": "ENGINE_PAR_SEQ_LMF_Q",
        "body":[
            "$ENGINE_PAR_SEQ_LMF_Q"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SEQ_LMF_Q"
    },
    "ENGINE_PAR_SHAPE":
    {
        "prefix": "ENGINE_PAR_SHAPE",
        "body":[
            "$ENGINE_PAR_SHAPE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SHAPE"
    },
    "ENGINE_PAR_SK_BASS":
    {
        "prefix": "ENGINE_PAR_SK_BASS",
        "body":[
            "$ENGINE_PAR_SK_BASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SK_BASS"
    },
    "ENGINE_PAR_SK_BRIGHT":
    {
        "prefix": "ENGINE_PAR_SK_BRIGHT",
        "body":[
            "$ENGINE_PAR_SK_BRIGHT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SK_BRIGHT"
    },
    "ENGINE_PAR_SK_DRIVE":
    {
        "prefix": "ENGINE_PAR_SK_DRIVE",
        "body":[
            "$ENGINE_PAR_SK_DRIVE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SK_DRIVE"
    },
    "ENGINE_PAR_SK_MIX":
    {
        "prefix": "ENGINE_PAR_SK_MIX",
        "body":[
            "$ENGINE_PAR_SK_MIX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SK_MIX"
    },
    "ENGINE_PAR_SK_TONE":
    {
        "prefix": "ENGINE_PAR_SK_TONE",
        "body":[
            "$ENGINE_PAR_SK_TONE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SK_TONE"
    },
    "ENGINE_PAR_SLICE_ATTACK":
    {
        "prefix": "ENGINE_PAR_SLICE_ATTACK",
        "body":[
            "$ENGINE_PAR_SLICE_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SLICE_ATTACK"
    },
    "ENGINE_PAR_SLICE_RELEASE":
    {
        "prefix": "ENGINE_PAR_SLICE_RELEASE",
        "body":[
            "$ENGINE_PAR_SLICE_RELEASE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SLICE_RELEASE"
    },
    "ENGINE_PAR_SMOOTH":
    {
        "prefix": "ENGINE_PAR_SMOOTH",
        "body":[
            "$ENGINE_PAR_SMOOTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SMOOTH"
    },
    "ENGINE_PAR_SPEED":
    {
        "prefix": "ENGINE_PAR_SPEED",
        "body":[
            "$ENGINE_PAR_SPEED"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SPEED"
    },
    "ENGINE_PAR_SPEED_UNIT":
    {
        "prefix": "ENGINE_PAR_SPEED_UNIT",
        "body":[
            "$ENGINE_PAR_SPEED_UNIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SPEED_UNIT"
    },
    "ENGINE_PAR_SP_DIVERGENCE":
    {
        "prefix": "ENGINE_PAR_SP_DIVERGENCE",
        "body":[
            "$ENGINE_PAR_SP_DIVERGENCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_DIVERGENCE"
    },
    "ENGINE_PAR_SP_LFE_VOLUME":
    {
        "prefix": "ENGINE_PAR_SP_LFE_VOLUME",
        "body":[
            "$ENGINE_PAR_SP_LFE_VOLUME"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_LFE_VOLUME"
    },
    "ENGINE_PAR_SP_OFFSET_AZIMUTH":
    {
        "prefix": "ENGINE_PAR_SP_OFFSET_AZIMUTH",
        "body":[
            "$ENGINE_PAR_SP_OFFSET_AZIMUTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_OFFSET_AZIMUTH"
    },
    "ENGINE_PAR_SP_OFFSET_DISTANCE":
    {
        "prefix": "ENGINE_PAR_SP_OFFSET_DISTANCE",
        "body":[
            "$ENGINE_PAR_SP_OFFSET_DISTANCE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_OFFSET_DISTANCE"
    },
    "ENGINE_PAR_SP_OFFSET_X":
    {
        "prefix": "ENGINE_PAR_SP_OFFSET_X",
        "body":[
            "$ENGINE_PAR_SP_OFFSET_X"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_OFFSET_X"
    },
    "ENGINE_PAR_SP_OFFSET_Y":
    {
        "prefix": "ENGINE_PAR_SP_OFFSET_Y",
        "body":[
            "$ENGINE_PAR_SP_OFFSET_Y"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_OFFSET_Y"
    },
    "ENGINE_PAR_SP_SIZE":
    {
        "prefix": "ENGINE_PAR_SP_SIZE",
        "body":[
            "$ENGINE_PAR_SP_SIZE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SP_SIZE"
    },
    "ENGINE_PAR_START_CRITERIA_CC_MAX":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_CC_MAX",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_CC_MAX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_CC_MAX"
    },
    "ENGINE_PAR_START_CRITERIA_CC_MIN":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_CC_MIN",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_CC_MIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_CC_MIN"
    },
    "ENGINE_PAR_START_CRITERIA_CONTROLLER":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_CONTROLLER",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_CONTROLLER"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_CONTROLLER"
    },
    "ENGINE_PAR_START_CRITERIA_CYCLE_CLASS":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_CYCLE_CLASS",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_CYCLE_CLASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_CYCLE_CLASS"
    },
    "ENGINE_PAR_START_CRITERIA_KEY_MAX":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_KEY_MAX",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_KEY_MAX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_KEY_MAX"
    },
    "ENGINE_PAR_START_CRITERIA_KEY_MIN":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_KEY_MIN",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_KEY_MIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_KEY_MIN"
    },
    "ENGINE_PAR_START_CRITERIA_MODE":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_MODE",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_MODE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_MODE"
    },
    "ENGINE_PAR_START_CRITERIA_NEXT_CRIT":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_NEXT_CRIT",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_NEXT_CRIT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_NEXT_CRIT"
    },
    "ENGINE_PAR_START_CRITERIA_SEQ_ONLY":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_SEQ_ONLY",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_SEQ_ONLY"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_SEQ_ONLY"
    },
    "ENGINE_PAR_START_CRITERIA_SLICE_IDX":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_SLICE_IDX",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_SLICE_IDX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_SLICE_IDX"
    },
    "ENGINE_PAR_START_CRITERIA_ZONE_IDX":
    {
        "prefix": "ENGINE_PAR_START_CRITERIA_ZONE_IDX",
        "body":[
            "$ENGINE_PAR_START_CRITERIA_ZONE_IDX"
        ],
        "description": "Built-in Variable: ENGINE_PAR_START_CRITERIA_ZONE_IDX"
    },
    "ENGINE_PAR_STEREO":
    {
        "prefix": "ENGINE_PAR_STEREO",
        "body":[
            "$ENGINE_PAR_STEREO"
        ],
        "description": "Built-in Variable: ENGINE_PAR_STEREO"
    },
    "ENGINE_PAR_STEREO_PAN":
    {
        "prefix": "ENGINE_PAR_STEREO_PAN",
        "body":[
            "$ENGINE_PAR_STEREO_PAN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_STEREO_PAN"
    },
    "ENGINE_PAR_SUSTAIN":
    {
        "prefix": "ENGINE_PAR_SUSTAIN",
        "body":[
            "$ENGINE_PAR_SUSTAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_SUSTAIN"
    },
    "ENGINE_PAR_THRESHOLD":
    {
        "prefix": "ENGINE_PAR_THRESHOLD",
        "body":[
            "$ENGINE_PAR_THRESHOLD"
        ],
        "description": "Built-in Variable: ENGINE_PAR_THRESHOLD"
    },
    "ENGINE_PAR_TP_GAIN":
    {
        "prefix": "ENGINE_PAR_TP_GAIN",
        "body":[
            "$ENGINE_PAR_TP_GAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TP_GAIN"
    },
    "ENGINE_PAR_TP_HF_ROLLOFF":
    {
        "prefix": "ENGINE_PAR_TP_HF_ROLLOFF",
        "body":[
            "$ENGINE_PAR_TP_HF_ROLLOFF"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TP_HF_ROLLOFF"
    },
    "ENGINE_PAR_TP_WARMTH":
    {
        "prefix": "ENGINE_PAR_TP_WARMTH",
        "body":[
            "$ENGINE_PAR_TP_WARMTH"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TP_WARMTH"
    },
    "ENGINE_PAR_TRANSIENT_SIZE":
    {
        "prefix": "ENGINE_PAR_TRANSIENT_SIZE",
        "body":[
            "$ENGINE_PAR_TRANSIENT_SIZE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TRANSIENT_SIZE"
    },
    "ENGINE_PAR_TR_ATTACK":
    {
        "prefix": "ENGINE_PAR_TR_ATTACK",
        "body":[
            "$ENGINE_PAR_TR_ATTACK"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TR_ATTACK"
    },
    "ENGINE_PAR_TR_INPUT":
    {
        "prefix": "ENGINE_PAR_TR_INPUT",
        "body":[
            "$ENGINE_PAR_TR_INPUT"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TR_INPUT"
    },
    "ENGINE_PAR_TR_SUSTAIN":
    {
        "prefix": "ENGINE_PAR_TR_SUSTAIN",
        "body":[
            "$ENGINE_PAR_TR_SUSTAIN"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TR_SUSTAIN"
    },
    "ENGINE_PAR_TUNE":
    {
        "prefix": "ENGINE_PAR_TUNE",
        "body":[
            "$ENGINE_PAR_TUNE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TUNE"
    },
    "ENGINE_PAR_TW_BASS":
    {
        "prefix": "ENGINE_PAR_TW_BASS",
        "body":[
            "$ENGINE_PAR_TW_BASS"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TW_BASS"
    },
    "ENGINE_PAR_TW_MID":
    {
        "prefix": "ENGINE_PAR_TW_MID",
        "body":[
            "$ENGINE_PAR_TW_MID"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TW_MID"
    },
    "ENGINE_PAR_TW_TREBLE":
    {
        "prefix": "ENGINE_PAR_TW_TREBLE",
        "body":[
            "$ENGINE_PAR_TW_TREBLE"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TW_TREBLE"
    },
    "ENGINE_PAR_TW_VOLUME":
    {
        "prefix": "ENGINE_PAR_TW_VOLUME",
        "body":[
            "$ENGINE_PAR_TW_VOLUME"
        ],
        "description": "Built-in Variable: ENGINE_PAR_TW_VOLUME"
    },
    "ENGINE_PAR_VOLUME":
    {
        "prefix": "ENGINE_PAR_VOLUME",
        "body":[
            "$ENGINE_PAR_VOLUME"
        ],
        "description": "Built-in Variable: ENGINE_PAR_VOLUME"
    },
    "ENGINE_UPTIME":
    {
        "prefix": "ENGINE_UPTIME",
        "body":[
            "$ENGINE_UPTIME"
        ],
        "description": "Built-in Variable: ENGINE_UPTIME"
    },
    "ENV_TYPE_AHDSR":
    {
        "prefix": "ENV_TYPE_AHDSR",
        "body":[
            "$ENV_TYPE_AHDSR"
        ],
        "description": "Built-in Variable: ENV_TYPE_AHDSR"
    },
    "ENV_TYPE_DBD":
    {
        "prefix": "ENV_TYPE_DBD",
        "body":[
            "$ENV_TYPE_DBD"
        ],
        "description": "Built-in Variable: ENV_TYPE_DBD"
    },
    "ENV_TYPE_FLEX":
    {
        "prefix": "ENV_TYPE_FLEX",
        "body":[
            "$ENV_TYPE_FLEX"
        ],
        "description": "Built-in Variable: ENV_TYPE_FLEX"
    },
    "EVENT_ID":
    {
        "prefix": "EVENT_ID",
        "body":[
            "$EVENT_ID"
        ],
        "description": "Built-in Variable: EVENT_ID"
    },
    "EVENT_NOTE":
    {
        "prefix": "EVENT_NOTE",
        "body":[
            "$EVENT_NOTE"
        ],
        "description": "Built-in Variable: EVENT_NOTE"
    },
    "EVENT_PAR_0":
    {
        "prefix": "EVENT_PAR_0",
        "body":[
            "$EVENT_PAR_0"
        ],
        "description": "Built-in Variable: EVENT_PAR_0"
    },
    "EVENT_PAR_1":
    {
        "prefix": "EVENT_PAR_1",
        "body":[
            "$EVENT_PAR_1"
        ],
        "description": "Built-in Variable: EVENT_PAR_1"
    },
    "EVENT_PAR_2":
    {
        "prefix": "EVENT_PAR_2",
        "body":[
            "$EVENT_PAR_2"
        ],
        "description": "Built-in Variable: EVENT_PAR_2"
    },
    "EVENT_PAR_3":
    {
        "prefix": "EVENT_PAR_3",
        "body":[
            "$EVENT_PAR_3"
        ],
        "description": "Built-in Variable: EVENT_PAR_3"
    },
    "EVENT_PAR_ALLOW_GROUP":
    {
        "prefix": "EVENT_PAR_ALLOW_GROUP",
        "body":[
            "$EVENT_PAR_ALLOW_GROUP"
        ],
        "description": "Built-in Variable: EVENT_PAR_ALLOW_GROUP"
    },
    "EVENT_PAR_ID":
    {
        "prefix": "EVENT_PAR_ID",
        "body":[
            "$EVENT_PAR_ID"
        ],
        "description": "Built-in Variable: EVENT_PAR_ID"
    },
    "EVENT_PAR_MIDI_BYTE_1":
    {
        "prefix": "EVENT_PAR_MIDI_BYTE_1",
        "body":[
            "$EVENT_PAR_MIDI_BYTE_1"
        ],
        "description": "Built-in Variable: EVENT_PAR_MIDI_BYTE_1"
    },
    "EVENT_PAR_MIDI_BYTE_2":
    {
        "prefix": "EVENT_PAR_MIDI_BYTE_2",
        "body":[
            "$EVENT_PAR_MIDI_BYTE_2"
        ],
        "description": "Built-in Variable: EVENT_PAR_MIDI_BYTE_2"
    },
    "EVENT_PAR_MIDI_CHANNEL":
    {
        "prefix": "EVENT_PAR_MIDI_CHANNEL",
        "body":[
            "$EVENT_PAR_MIDI_CHANNEL"
        ],
        "description": "Built-in Variable: EVENT_PAR_MIDI_CHANNEL"
    },
    "EVENT_PAR_MIDI_COMMAND":
    {
        "prefix": "EVENT_PAR_MIDI_COMMAND",
        "body":[
            "$EVENT_PAR_MIDI_COMMAND"
        ],
        "description": "Built-in Variable: EVENT_PAR_MIDI_COMMAND"
    },
    "EVENT_PAR_NOTE":
    {
        "prefix": "EVENT_PAR_NOTE",
        "body":[
            "$EVENT_PAR_NOTE"
        ],
        "description": "Built-in Variable: EVENT_PAR_NOTE"
    },
    "EVENT_PAR_NOTE_LENGTH":
    {
        "prefix": "EVENT_PAR_NOTE_LENGTH",
        "body":[
            "$EVENT_PAR_NOTE_LENGTH"
        ],
        "description": "Built-in Variable: EVENT_PAR_NOTE_LENGTH"
    },
    "EVENT_PAR_PAN":
    {
        "prefix": "EVENT_PAR_PAN",
        "body":[
            "$EVENT_PAR_PAN"
        ],
        "description": "Built-in Variable: EVENT_PAR_PAN"
    },
    "EVENT_PAR_PLAY_POS":
    {
        "prefix": "EVENT_PAR_PLAY_POS",
        "body":[
            "$EVENT_PAR_PLAY_POS"
        ],
        "description": "Built-in Variable: EVENT_PAR_PLAY_POS"
    },
    "EVENT_PAR_POS":
    {
        "prefix": "EVENT_PAR_POS",
        "body":[
            "$EVENT_PAR_POS"
        ],
        "description": "Built-in Variable: EVENT_PAR_POS"
    },
    "EVENT_PAR_SOURCE":
    {
        "prefix": "EVENT_PAR_SOURCE",
        "body":[
            "$EVENT_PAR_SOURCE"
        ],
        "description": "Built-in Variable: EVENT_PAR_SOURCE"
    },
    "EVENT_PAR_TRACK_NR":
    {
        "prefix": "EVENT_PAR_TRACK_NR",
        "body":[
            "$EVENT_PAR_TRACK_NR"
        ],
        "description": "Built-in Variable: EVENT_PAR_TRACK_NR"
    },
    "EVENT_PAR_TUNE":
    {
        "prefix": "EVENT_PAR_TUNE",
        "body":[
            "$EVENT_PAR_TUNE"
        ],
        "description": "Built-in Variable: EVENT_PAR_TUNE"
    },
    "EVENT_PAR_VELOCITY":
    {
        "prefix": "EVENT_PAR_VELOCITY",
        "body":[
            "$EVENT_PAR_VELOCITY"
        ],
        "description": "Built-in Variable: EVENT_PAR_VELOCITY"
    },
    "EVENT_PAR_VOLUME":
    {
        "prefix": "EVENT_PAR_VOLUME",
        "body":[
            "$EVENT_PAR_VOLUME"
        ],
        "description": "Built-in Variable: EVENT_PAR_VOLUME"
    },
    "EVENT_PAR_ZONE_ID":
    {
        "prefix": "EVENT_PAR_ZONE_ID",
        "body":[
            "$EVENT_PAR_ZONE_ID"
        ],
        "description": "Built-in Variable: EVENT_PAR_ZONE_ID"
    },
    "EVENT_STATUS_INACTIVE":
    {
        "prefix": "EVENT_STATUS_INACTIVE",
        "body":[
            "$EVENT_STATUS_INACTIVE"
        ],
        "description": "Built-in Variable: EVENT_STATUS_INACTIVE"
    },
    "EVENT_STATUS_MIDI_QUEUE":
    {
        "prefix": "EVENT_STATUS_MIDI_QUEUE",
        "body":[
            "$EVENT_STATUS_MIDI_QUEUE"
        ],
        "description": "Built-in Variable: EVENT_STATUS_MIDI_QUEUE"
    },
    "EVENT_STATUS_NOTE_QUEUE":
    {
        "prefix": "EVENT_STATUS_NOTE_QUEUE",
        "body":[
            "$EVENT_STATUS_NOTE_QUEUE"
        ],
        "description": "Built-in Variable: EVENT_STATUS_NOTE_QUEUE"
    },
    "EVENT_VELOCITY":
    {
        "prefix": "EVENT_VELOCITY",
        "body":[
            "$EVENT_VELOCITY"
        ],
        "description": "Built-in Variable: EVENT_VELOCITY"
    },
    "FILTER_TYPE_AR_BP2":
    {
        "prefix": "FILTER_TYPE_AR_BP2",
        "body":[
            "$FILTER_TYPE_AR_BP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_BP2"
    },
    "FILTER_TYPE_AR_BP24":
    {
        "prefix": "FILTER_TYPE_AR_BP24",
        "body":[
            "$FILTER_TYPE_AR_BP24"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_BP24"
    },
    "FILTER_TYPE_AR_BP4":
    {
        "prefix": "FILTER_TYPE_AR_BP4",
        "body":[
            "$FILTER_TYPE_AR_BP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_BP4"
    },
    "FILTER_TYPE_AR_HP2":
    {
        "prefix": "FILTER_TYPE_AR_HP2",
        "body":[
            "$FILTER_TYPE_AR_HP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_HP2"
    },
    "FILTER_TYPE_AR_HP24":
    {
        "prefix": "FILTER_TYPE_AR_HP24",
        "body":[
            "$FILTER_TYPE_AR_HP24"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_HP24"
    },
    "FILTER_TYPE_AR_HP4":
    {
        "prefix": "FILTER_TYPE_AR_HP4",
        "body":[
            "$FILTER_TYPE_AR_HP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_HP4"
    },
    "FILTER_TYPE_AR_LP2":
    {
        "prefix": "FILTER_TYPE_AR_LP2",
        "body":[
            "$FILTER_TYPE_AR_LP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_LP2"
    },
    "FILTER_TYPE_AR_LP24":
    {
        "prefix": "FILTER_TYPE_AR_LP24",
        "body":[
            "$FILTER_TYPE_AR_LP24"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_LP24"
    },
    "FILTER_TYPE_AR_LP4":
    {
        "prefix": "FILTER_TYPE_AR_LP4",
        "body":[
            "$FILTER_TYPE_AR_LP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_AR_LP4"
    },
    "FILTER_TYPE_BP2POLE":
    {
        "prefix": "FILTER_TYPE_BP2POLE",
        "body":[
            "$FILTER_TYPE_BP2POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_BP2POLE"
    },
    "FILTER_TYPE_BP4POLE":
    {
        "prefix": "FILTER_TYPE_BP4POLE",
        "body":[
            "$FILTER_TYPE_BP4POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_BP4POLE"
    },
    "FILTER_TYPE_BR4POLE":
    {
        "prefix": "FILTER_TYPE_BR4POLE",
        "body":[
            "$FILTER_TYPE_BR4POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_BR4POLE"
    },
    "FILTER_TYPE_DAFT_HP":
    {
        "prefix": "FILTER_TYPE_DAFT_HP",
        "body":[
            "$FILTER_TYPE_DAFT_HP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_DAFT_HP"
    },
    "FILTER_TYPE_DAFT_LP":
    {
        "prefix": "FILTER_TYPE_DAFT_LP",
        "body":[
            "$FILTER_TYPE_DAFT_LP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_DAFT_LP"
    },
    "FILTER_TYPE_EQ1BAND":
    {
        "prefix": "FILTER_TYPE_EQ1BAND",
        "body":[
            "$FILTER_TYPE_EQ1BAND"
        ],
        "description": "Built-in Variable: FILTER_TYPE_EQ1BAND"
    },
    "FILTER_TYPE_EQ2BAND":
    {
        "prefix": "FILTER_TYPE_EQ2BAND",
        "body":[
            "$FILTER_TYPE_EQ2BAND"
        ],
        "description": "Built-in Variable: FILTER_TYPE_EQ2BAND"
    },
    "FILTER_TYPE_EQ3BAND":
    {
        "prefix": "FILTER_TYPE_EQ3BAND",
        "body":[
            "$FILTER_TYPE_EQ3BAND"
        ],
        "description": "Built-in Variable: FILTER_TYPE_EQ3BAND"
    },
    "FILTER_TYPE_FORMANT_1":
    {
        "prefix": "FILTER_TYPE_FORMANT_1",
        "body":[
            "$FILTER_TYPE_FORMANT_1"
        ],
        "description": "Built-in Variable: FILTER_TYPE_FORMANT_1"
    },
    "FILTER_TYPE_FORMANT_2":
    {
        "prefix": "FILTER_TYPE_FORMANT_2",
        "body":[
            "$FILTER_TYPE_FORMANT_2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_FORMANT_2"
    },
    "FILTER_TYPE_HP1POLE":
    {
        "prefix": "FILTER_TYPE_HP1POLE",
        "body":[
            "$FILTER_TYPE_HP1POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_HP1POLE"
    },
    "FILTER_TYPE_HP2POLE":
    {
        "prefix": "FILTER_TYPE_HP2POLE",
        "body":[
            "$FILTER_TYPE_HP2POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_HP2POLE"
    },
    "FILTER_TYPE_HP4POLE":
    {
        "prefix": "FILTER_TYPE_HP4POLE",
        "body":[
            "$FILTER_TYPE_HP4POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_HP4POLE"
    },
    "FILTER_TYPE_LADDER":
    {
        "prefix": "FILTER_TYPE_LADDER",
        "body":[
            "$FILTER_TYPE_LADDER"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LADDER"
    },
    "FILTER_TYPE_LDR_BP2":
    {
        "prefix": "FILTER_TYPE_LDR_BP2",
        "body":[
            "$FILTER_TYPE_LDR_BP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_BP2"
    },
    "FILTER_TYPE_LDR_BP4":
    {
        "prefix": "FILTER_TYPE_LDR_BP4",
        "body":[
            "$FILTER_TYPE_LDR_BP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_BP4"
    },
    "FILTER_TYPE_LDR_HP1":
    {
        "prefix": "FILTER_TYPE_LDR_HP1",
        "body":[
            "$FILTER_TYPE_LDR_HP1"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_HP1"
    },
    "FILTER_TYPE_LDR_HP2":
    {
        "prefix": "FILTER_TYPE_LDR_HP2",
        "body":[
            "$FILTER_TYPE_LDR_HP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_HP2"
    },
    "FILTER_TYPE_LDR_HP3":
    {
        "prefix": "FILTER_TYPE_LDR_HP3",
        "body":[
            "$FILTER_TYPE_LDR_HP3"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_HP3"
    },
    "FILTER_TYPE_LDR_HP4":
    {
        "prefix": "FILTER_TYPE_LDR_HP4",
        "body":[
            "$FILTER_TYPE_LDR_HP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_HP4"
    },
    "FILTER_TYPE_LDR_LP1":
    {
        "prefix": "FILTER_TYPE_LDR_LP1",
        "body":[
            "$FILTER_TYPE_LDR_LP1"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_LP1"
    },
    "FILTER_TYPE_LDR_LP2":
    {
        "prefix": "FILTER_TYPE_LDR_LP2",
        "body":[
            "$FILTER_TYPE_LDR_LP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_LP2"
    },
    "FILTER_TYPE_LDR_LP3":
    {
        "prefix": "FILTER_TYPE_LDR_LP3",
        "body":[
            "$FILTER_TYPE_LDR_LP3"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_LP3"
    },
    "FILTER_TYPE_LDR_LP4":
    {
        "prefix": "FILTER_TYPE_LDR_LP4",
        "body":[
            "$FILTER_TYPE_LDR_LP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_LP4"
    },
    "FILTER_TYPE_LDR_NOTCH":
    {
        "prefix": "FILTER_TYPE_LDR_NOTCH",
        "body":[
            "$FILTER_TYPE_LDR_NOTCH"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_NOTCH"
    },
    "FILTER_TYPE_LDR_PEAK":
    {
        "prefix": "FILTER_TYPE_LDR_PEAK",
        "body":[
            "$FILTER_TYPE_LDR_PEAK"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LDR_PEAK"
    },
    "FILTER_TYPE_LP1POLE":
    {
        "prefix": "FILTER_TYPE_LP1POLE",
        "body":[
            "$FILTER_TYPE_LP1POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LP1POLE"
    },
    "FILTER_TYPE_LP2POLE":
    {
        "prefix": "FILTER_TYPE_LP2POLE",
        "body":[
            "$FILTER_TYPE_LP2POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LP2POLE"
    },
    "FILTER_TYPE_LP4POLE":
    {
        "prefix": "FILTER_TYPE_LP4POLE",
        "body":[
            "$FILTER_TYPE_LP4POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LP4POLE"
    },
    "FILTER_TYPE_LP6POLE":
    {
        "prefix": "FILTER_TYPE_LP6POLE",
        "body":[
            "$FILTER_TYPE_LP6POLE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_LP6POLE"
    },
    "FILTER_TYPE_PHASER":
    {
        "prefix": "FILTER_TYPE_PHASER",
        "body":[
            "$FILTER_TYPE_PHASER"
        ],
        "description": "Built-in Variable: FILTER_TYPE_PHASER"
    },
    "FILTER_TYPE_PRO52":
    {
        "prefix": "FILTER_TYPE_PRO52",
        "body":[
            "$FILTER_TYPE_PRO52"
        ],
        "description": "Built-in Variable: FILTER_TYPE_PRO52"
    },
    "FILTER_TYPE_SIMPLE_LPHP":
    {
        "prefix": "FILTER_TYPE_SIMPLE_LPHP",
        "body":[
            "$FILTER_TYPE_SIMPLE_LPHP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SIMPLE_LPHP"
    },
    "FILTER_TYPE_SV_BP2":
    {
        "prefix": "FILTER_TYPE_SV_BP2",
        "body":[
            "$FILTER_TYPE_SV_BP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_BP2"
    },
    "FILTER_TYPE_SV_BP4":
    {
        "prefix": "FILTER_TYPE_SV_BP4",
        "body":[
            "$FILTER_TYPE_SV_BP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_BP4"
    },
    "FILTER_TYPE_SV_HP1":
    {
        "prefix": "FILTER_TYPE_SV_HP1",
        "body":[
            "$FILTER_TYPE_SV_HP1"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_HP1"
    },
    "FILTER_TYPE_SV_HP2":
    {
        "prefix": "FILTER_TYPE_SV_HP2",
        "body":[
            "$FILTER_TYPE_SV_HP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_HP2"
    },
    "FILTER_TYPE_SV_HP4":
    {
        "prefix": "FILTER_TYPE_SV_HP4",
        "body":[
            "$FILTER_TYPE_SV_HP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_HP4"
    },
    "FILTER_TYPE_SV_LP1":
    {
        "prefix": "FILTER_TYPE_SV_LP1",
        "body":[
            "$FILTER_TYPE_SV_LP1"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_LP1"
    },
    "FILTER_TYPE_SV_LP2":
    {
        "prefix": "FILTER_TYPE_SV_LP2",
        "body":[
            "$FILTER_TYPE_SV_LP2"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_LP2"
    },
    "FILTER_TYPE_SV_LP4":
    {
        "prefix": "FILTER_TYPE_SV_LP4",
        "body":[
            "$FILTER_TYPE_SV_LP4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_LP4"
    },
    "FILTER_TYPE_SV_NOTCH4":
    {
        "prefix": "FILTER_TYPE_SV_NOTCH4",
        "body":[
            "$FILTER_TYPE_SV_NOTCH4"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_NOTCH4"
    },
    "FILTER_TYPE_SV_PAR_BPBP":
    {
        "prefix": "FILTER_TYPE_SV_PAR_BPBP",
        "body":[
            "$FILTER_TYPE_SV_PAR_BPBP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_PAR_BPBP"
    },
    "FILTER_TYPE_SV_PAR_LPHP":
    {
        "prefix": "FILTER_TYPE_SV_PAR_LPHP",
        "body":[
            "$FILTER_TYPE_SV_PAR_LPHP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_PAR_LPHP"
    },
    "FILTER_TYPE_SV_SER_LPHP":
    {
        "prefix": "FILTER_TYPE_SV_SER_LPHP",
        "body":[
            "$FILTER_TYPE_SV_SER_LPHP"
        ],
        "description": "Built-in Variable: FILTER_TYPE_SV_SER_LPHP"
    },
    "FILTER_TYPE_VERSATILE":
    {
        "prefix": "FILTER_TYPE_VERSATILE",
        "body":[
            "$FILTER_TYPE_VERSATILE"
        ],
        "description": "Built-in Variable: FILTER_TYPE_VERSATILE"
    },
    "FILTER_TYPE_VOWELA":
    {
        "prefix": "FILTER_TYPE_VOWELA",
        "body":[
            "$FILTER_TYPE_VOWELA"
        ],
        "description": "Built-in Variable: FILTER_TYPE_VOWELA"
    },
    "FILTER_TYPE_VOWELB":
    {
        "prefix": "FILTER_TYPE_VOWELB",
        "body":[
            "$FILTER_TYPE_VOWELB"
        ],
        "description": "Built-in Variable: FILTER_TYPE_VOWELB"
    },
    "GET_FOLDER_FACTORY_DIR":
    {
        "prefix": "GET_FOLDER_FACTORY_DIR",
        "body":[
            "$GET_FOLDER_FACTORY_DIR"
        ],
        "description": "Built-in Variable: GET_FOLDER_FACTORY_DIR"
    },
    "GET_FOLDER_LIBRARY_DIR":
    {
        "prefix": "GET_FOLDER_LIBRARY_DIR",
        "body":[
            "$GET_FOLDER_LIBRARY_DIR"
        ],
        "description": "Built-in Variable: GET_FOLDER_LIBRARY_DIR"
    },
    "GET_FOLDER_PATCH_DIR":
    {
        "prefix": "GET_FOLDER_PATCH_DIR",
        "body":[
            "$GET_FOLDER_PATCH_DIR"
        ],
        "description": "Built-in Variable: GET_FOLDER_PATCH_DIR"
    },
    "HIDE_PART_BG":
    {
        "prefix": "HIDE_PART_BG",
        "body":[
            "$HIDE_PART_BG"
        ],
        "description": "Built-in Variable: HIDE_PART_BG"
    },
    "HIDE_PART_MOD_LIGHT":
    {
        "prefix": "HIDE_PART_MOD_LIGHT",
        "body":[
            "$HIDE_PART_MOD_LIGHT"
        ],
        "description": "Built-in Variable: HIDE_PART_MOD_LIGHT"
    },
    "HIDE_PART_NOTHING":
    {
        "prefix": "HIDE_PART_NOTHING",
        "body":[
            "$HIDE_PART_NOTHING"
        ],
        "description": "Built-in Variable: HIDE_PART_NOTHING"
    },
    "HIDE_PART_TITLE":
    {
        "prefix": "HIDE_PART_TITLE",
        "body":[
            "$HIDE_PART_TITLE"
        ],
        "description": "Built-in Variable: HIDE_PART_TITLE"
    },
    "HIDE_PART_VALUE":
    {
        "prefix": "HIDE_PART_VALUE",
        "body":[
            "$HIDE_PART_VALUE"
        ],
        "description": "Built-in Variable: HIDE_PART_VALUE"
    },
    "HIDE_WHOLE_CONTROL":
    {
        "prefix": "HIDE_WHOLE_CONTROL",
        "body":[
            "$HIDE_WHOLE_CONTROL"
        ],
        "description": "Built-in Variable: HIDE_WHOLE_CONTROL"
    },
    "INST_ICON_ID":
    {
        "prefix": "INST_ICON_ID",
        "body":[
            "$INST_ICON_ID"
        ],
        "description": "Built-in Variable: INST_ICON_ID"
    },
    "INST_WALLPAPER_ID":
    {
        "prefix": "INST_WALLPAPER_ID",
        "body":[
            "$INST_WALLPAPER_ID"
        ],
        "description": "Built-in Variable: INST_WALLPAPER_ID"
    },
    "INTMOD_TYPE_ENVELOPE":
    {
        "prefix": "INTMOD_TYPE_ENVELOPE",
        "body":[
            "$INTMOD_TYPE_ENVELOPE"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_ENVELOPE"
    },
    "INTMOD_TYPE_ENV_FOLLOW":
    {
        "prefix": "INTMOD_TYPE_ENV_FOLLOW",
        "body":[
            "$INTMOD_TYPE_ENV_FOLLOW"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_ENV_FOLLOW"
    },
    "INTMOD_TYPE_GLIDE":
    {
        "prefix": "INTMOD_TYPE_GLIDE",
        "body":[
            "$INTMOD_TYPE_GLIDE"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_GLIDE"
    },
    "INTMOD_TYPE_LFO":
    {
        "prefix": "INTMOD_TYPE_LFO",
        "body":[
            "$INTMOD_TYPE_LFO"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_LFO"
    },
    "INTMOD_TYPE_NONE":
    {
        "prefix": "INTMOD_TYPE_NONE",
        "body":[
            "$INTMOD_TYPE_NONE"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_NONE"
    },
    "INTMOD_TYPE_STEPMOD":
    {
        "prefix": "INTMOD_TYPE_STEPMOD",
        "body":[
            "$INTMOD_TYPE_STEPMOD"
        ],
        "description": "Built-in Variable: INTMOD_TYPE_STEPMOD"
    },
    "KEY_COLOR_BLUE":
    {
        "prefix": "KEY_COLOR_BLUE",
        "body":[
            "$KEY_COLOR_BLUE"
        ],
        "description": "Built-in Variable: KEY_COLOR_BLUE"
    },
    "KEY_COLOR_CYAN":
    {
        "prefix": "KEY_COLOR_CYAN",
        "body":[
            "$KEY_COLOR_CYAN"
        ],
        "description": "Built-in Variable: KEY_COLOR_CYAN"
    },
    "KEY_COLOR_DEFAULT":
    {
        "prefix": "KEY_COLOR_DEFAULT",
        "body":[
            "$KEY_COLOR_DEFAULT"
        ],
        "description": "Built-in Variable: KEY_COLOR_DEFAULT"
    },
    "KEY_COLOR_FUCHSIA":
    {
        "prefix": "KEY_COLOR_FUCHSIA",
        "body":[
            "$KEY_COLOR_FUCHSIA"
        ],
        "description": "Built-in Variable: KEY_COLOR_FUCHSIA"
    },
    "KEY_COLOR_GREEN":
    {
        "prefix": "KEY_COLOR_GREEN",
        "body":[
            "$KEY_COLOR_GREEN"
        ],
        "description": "Built-in Variable: KEY_COLOR_GREEN"
    },
    "KEY_COLOR_INACTIVE":
    {
        "prefix": "KEY_COLOR_INACTIVE",
        "body":[
            "$KEY_COLOR_INACTIVE"
        ],
        "description": "Built-in Variable: KEY_COLOR_INACTIVE"
    },
    "KEY_COLOR_LIGHT_ORANGE":
    {
        "prefix": "KEY_COLOR_LIGHT_ORANGE",
        "body":[
            "$KEY_COLOR_LIGHT_ORANGE"
        ],
        "description": "Built-in Variable: KEY_COLOR_LIGHT_ORANGE"
    },
    "KEY_COLOR_LIME":
    {
        "prefix": "KEY_COLOR_LIME",
        "body":[
            "$KEY_COLOR_LIME"
        ],
        "description": "Built-in Variable: KEY_COLOR_LIME"
    },
    "KEY_COLOR_MAGENTA":
    {
        "prefix": "KEY_COLOR_MAGENTA",
        "body":[
            "$KEY_COLOR_MAGENTA"
        ],
        "description": "Built-in Variable: KEY_COLOR_MAGENTA"
    },
    "KEY_COLOR_MINT":
    {
        "prefix": "KEY_COLOR_MINT",
        "body":[
            "$KEY_COLOR_MINT"
        ],
        "description": "Built-in Variable: KEY_COLOR_MINT"
    },
    "KEY_COLOR_NONE":
    {
        "prefix": "KEY_COLOR_NONE",
        "body":[
            "$KEY_COLOR_NONE"
        ],
        "description": "Built-in Variable: KEY_COLOR_NONE"
    },
    "KEY_COLOR_ORANGE":
    {
        "prefix": "KEY_COLOR_ORANGE",
        "body":[
            "$KEY_COLOR_ORANGE"
        ],
        "description": "Built-in Variable: KEY_COLOR_ORANGE"
    },
    "KEY_COLOR_PLUM":
    {
        "prefix": "KEY_COLOR_PLUM",
        "body":[
            "$KEY_COLOR_PLUM"
        ],
        "description": "Built-in Variable: KEY_COLOR_PLUM"
    },
    "KEY_COLOR_PURPLE":
    {
        "prefix": "KEY_COLOR_PURPLE",
        "body":[
            "$KEY_COLOR_PURPLE"
        ],
        "description": "Built-in Variable: KEY_COLOR_PURPLE"
    },
    "KEY_COLOR_RED":
    {
        "prefix": "KEY_COLOR_RED",
        "body":[
            "$KEY_COLOR_RED"
        ],
        "description": "Built-in Variable: KEY_COLOR_RED"
    },
    "KEY_COLOR_TURQUOISE":
    {
        "prefix": "KEY_COLOR_TURQUOISE",
        "body":[
            "$KEY_COLOR_TURQUOISE"
        ],
        "description": "Built-in Variable: KEY_COLOR_TURQUOISE"
    },
    "KEY_COLOR_VIOLET":
    {
        "prefix": "KEY_COLOR_VIOLET",
        "body":[
            "$KEY_COLOR_VIOLET"
        ],
        "description": "Built-in Variable: KEY_COLOR_VIOLET"
    },
    "KEY_COLOR_WARM_YELLOW":
    {
        "prefix": "KEY_COLOR_WARM_YELLOW",
        "body":[
            "$KEY_COLOR_WARM_YELLOW"
        ],
        "description": "Built-in Variable: KEY_COLOR_WARM_YELLOW"
    },
    "KEY_COLOR_YELLOW":
    {
        "prefix": "KEY_COLOR_YELLOW",
        "body":[
            "$KEY_COLOR_YELLOW"
        ],
        "description": "Built-in Variable: KEY_COLOR_YELLOW"
    },
    "KNOB_UNIT_DB":
    {
        "prefix": "KNOB_UNIT_DB",
        "body":[
            "$KNOB_UNIT_DB"
        ],
        "description": "Built-in Variable: KNOB_UNIT_DB"
    },
    "KNOB_UNIT_HZ":
    {
        "prefix": "KNOB_UNIT_HZ",
        "body":[
            "$KNOB_UNIT_HZ"
        ],
        "description": "Built-in Variable: KNOB_UNIT_HZ"
    },
    "KNOB_UNIT_MS":
    {
        "prefix": "KNOB_UNIT_MS",
        "body":[
            "$KNOB_UNIT_MS"
        ],
        "description": "Built-in Variable: KNOB_UNIT_MS"
    },
    "KNOB_UNIT_NONE":
    {
        "prefix": "KNOB_UNIT_NONE",
        "body":[
            "$KNOB_UNIT_NONE"
        ],
        "description": "Built-in Variable: KNOB_UNIT_NONE"
    },
    "KNOB_UNIT_OCT":
    {
        "prefix": "KNOB_UNIT_OCT",
        "body":[
            "$KNOB_UNIT_OCT"
        ],
        "description": "Built-in Variable: KNOB_UNIT_OCT"
    },
    "KNOB_UNIT_PERCENT":
    {
        "prefix": "KNOB_UNIT_PERCENT",
        "body":[
            "$KNOB_UNIT_PERCENT"
        ],
        "description": "Built-in Variable: KNOB_UNIT_PERCENT"
    },
    "KNOB_UNIT_ST":
    {
        "prefix": "KNOB_UNIT_ST",
        "body":[
            "$KNOB_UNIT_ST"
        ],
        "description": "Built-in Variable: KNOB_UNIT_ST"
    },
    "KSP_TIMER":
    {
        "prefix": "KSP_TIMER",
        "body":[
            "$KSP_TIMER"
        ],
        "description": "Built-in Variable: KSP_TIMER"
    },
    "LFO_TYPE_MULTI":
    {
        "prefix": "LFO_TYPE_MULTI",
        "body":[
            "$LFO_TYPE_MULTI"
        ],
        "description": "Built-in Variable: LFO_TYPE_MULTI"
    },
    "LFO_TYPE_RANDO":
    {
        "prefix": "LFO_TYPE_RANDO",
        "body":[
            "$LFO_TYPE_RANDO"
        ],
        "description": "Built-in Variable: LFO_TYPE_RANDO"
    },
    "LFO_TYPE_RECTANGLE":
    {
        "prefix": "LFO_TYPE_RECTANGLE",
        "body":[
            "$LFO_TYPE_RECTANGLE"
        ],
        "description": "Built-in Variable: LFO_TYPE_RECTANGLE"
    },
    "LFO_TYPE_SAWTOOTH":
    {
        "prefix": "LFO_TYPE_SAWTOOTH",
        "body":[
            "$LFO_TYPE_SAWTOOTH"
        ],
        "description": "Built-in Variable: LFO_TYPE_SAWTOOTH"
    },
    "LFO_TYPE_TRIANGLE":
    {
        "prefix": "LFO_TYPE_TRIANGLE",
        "body":[
            "$LFO_TYPE_TRIANGLE"
        ],
        "description": "Built-in Variable: LFO_TYPE_TRIANGLE"
    },
    "MARK_1":
    {
        "prefix": "MARK_1",
        "body":[
            "$MARK_1"
        ],
        "description": "Built-in Variable: MARK_1"
    },
    "MARK_10":
    {
        "prefix": "MARK_10",
        "body":[
            "$MARK_10"
        ],
        "description": "Built-in Variable: MARK_10"
    },
    "MARK_11":
    {
        "prefix": "MARK_11",
        "body":[
            "$MARK_11"
        ],
        "description": "Built-in Variable: MARK_11"
    },
    "MARK_12":
    {
        "prefix": "MARK_12",
        "body":[
            "$MARK_12"
        ],
        "description": "Built-in Variable: MARK_12"
    },
    "MARK_13":
    {
        "prefix": "MARK_13",
        "body":[
            "$MARK_13"
        ],
        "description": "Built-in Variable: MARK_13"
    },
    "MARK_14":
    {
        "prefix": "MARK_14",
        "body":[
            "$MARK_14"
        ],
        "description": "Built-in Variable: MARK_14"
    },
    "MARK_15":
    {
        "prefix": "MARK_15",
        "body":[
            "$MARK_15"
        ],
        "description": "Built-in Variable: MARK_15"
    },
    "MARK_16":
    {
        "prefix": "MARK_16",
        "body":[
            "$MARK_16"
        ],
        "description": "Built-in Variable: MARK_16"
    },
    "MARK_17":
    {
        "prefix": "MARK_17",
        "body":[
            "$MARK_17"
        ],
        "description": "Built-in Variable: MARK_17"
    },
    "MARK_18":
    {
        "prefix": "MARK_18",
        "body":[
            "$MARK_18"
        ],
        "description": "Built-in Variable: MARK_18"
    },
    "MARK_19":
    {
        "prefix": "MARK_19",
        "body":[
            "$MARK_19"
        ],
        "description": "Built-in Variable: MARK_19"
    },
    "MARK_2":
    {
        "prefix": "MARK_2",
        "body":[
            "$MARK_2"
        ],
        "description": "Built-in Variable: MARK_2"
    },
    "MARK_20":
    {
        "prefix": "MARK_20",
        "body":[
            "$MARK_20"
        ],
        "description": "Built-in Variable: MARK_20"
    },
    "MARK_21":
    {
        "prefix": "MARK_21",
        "body":[
            "$MARK_21"
        ],
        "description": "Built-in Variable: MARK_21"
    },
    "MARK_22":
    {
        "prefix": "MARK_22",
        "body":[
            "$MARK_22"
        ],
        "description": "Built-in Variable: MARK_22"
    },
    "MARK_23":
    {
        "prefix": "MARK_23",
        "body":[
            "$MARK_23"
        ],
        "description": "Built-in Variable: MARK_23"
    },
    "MARK_24":
    {
        "prefix": "MARK_24",
        "body":[
            "$MARK_24"
        ],
        "description": "Built-in Variable: MARK_24"
    },
    "MARK_25":
    {
        "prefix": "MARK_25",
        "body":[
            "$MARK_25"
        ],
        "description": "Built-in Variable: MARK_25"
    },
    "MARK_26":
    {
        "prefix": "MARK_26",
        "body":[
            "$MARK_26"
        ],
        "description": "Built-in Variable: MARK_26"
    },
    "MARK_27":
    {
        "prefix": "MARK_27",
        "body":[
            "$MARK_27"
        ],
        "description": "Built-in Variable: MARK_27"
    },
    "MARK_28":
    {
        "prefix": "MARK_28",
        "body":[
            "$MARK_28"
        ],
        "description": "Built-in Variable: MARK_28"
    },
    "MARK_3":
    {
        "prefix": "MARK_3",
        "body":[
            "$MARK_3"
        ],
        "description": "Built-in Variable: MARK_3"
    },
    "MARK_4":
    {
        "prefix": "MARK_4",
        "body":[
            "$MARK_4"
        ],
        "description": "Built-in Variable: MARK_4"
    },
    "MARK_5":
    {
        "prefix": "MARK_5",
        "body":[
            "$MARK_5"
        ],
        "description": "Built-in Variable: MARK_5"
    },
    "MARK_6":
    {
        "prefix": "MARK_6",
        "body":[
            "$MARK_6"
        ],
        "description": "Built-in Variable: MARK_6"
    },
    "MARK_7":
    {
        "prefix": "MARK_7",
        "body":[
            "$MARK_7"
        ],
        "description": "Built-in Variable: MARK_7"
    },
    "MARK_8":
    {
        "prefix": "MARK_8",
        "body":[
            "$MARK_8"
        ],
        "description": "Built-in Variable: MARK_8"
    },
    "MARK_9":
    {
        "prefix": "MARK_9",
        "body":[
            "$MARK_9"
        ],
        "description": "Built-in Variable: MARK_9"
    },
    "MIDI_BYTE_1":
    {
        "prefix": "MIDI_BYTE_1",
        "body":[
            "$MIDI_BYTE_1"
        ],
        "description": "Built-in Variable: MIDI_BYTE_1"
    },
    "MIDI_BYTE_2":
    {
        "prefix": "MIDI_BYTE_2",
        "body":[
            "$MIDI_BYTE_2"
        ],
        "description": "Built-in Variable: MIDI_BYTE_2"
    },
    "MIDI_CHANNEL":
    {
        "prefix": "MIDI_CHANNEL",
        "body":[
            "$MIDI_CHANNEL"
        ],
        "description": "Built-in Variable: MIDI_CHANNEL"
    },
    "MIDI_COMMAND":
    {
        "prefix": "MIDI_COMMAND",
        "body":[
            "$MIDI_COMMAND"
        ],
        "description": "Built-in Variable: MIDI_COMMAND"
    },
    "MIDI_COMMAND_CC":
    {
        "prefix": "MIDI_COMMAND_CC",
        "body":[
            "$MIDI_COMMAND_CC"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_CC"
    },
    "MIDI_COMMAND_MONO_AT":
    {
        "prefix": "MIDI_COMMAND_MONO_AT",
        "body":[
            "$MIDI_COMMAND_MONO_AT"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_MONO_AT"
    },
    "MIDI_COMMAND_NOTE_OFF":
    {
        "prefix": "MIDI_COMMAND_NOTE_OFF",
        "body":[
            "$MIDI_COMMAND_NOTE_OFF"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_NOTE_OFF"
    },
    "MIDI_COMMAND_NOTE_ON":
    {
        "prefix": "MIDI_COMMAND_NOTE_ON",
        "body":[
            "$MIDI_COMMAND_NOTE_ON"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_NOTE_ON"
    },
    "MIDI_COMMAND_PITCH_BEND":
    {
        "prefix": "MIDI_COMMAND_PITCH_BEND",
        "body":[
            "$MIDI_COMMAND_PITCH_BEND"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_PITCH_BEND"
    },
    "MIDI_COMMAND_POLY_AT":
    {
        "prefix": "MIDI_COMMAND_POLY_AT",
        "body":[
            "$MIDI_COMMAND_POLY_AT"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_POLY_AT"
    },
    "MIDI_COMMAND_PROGRAM_CHANGE":
    {
        "prefix": "MIDI_COMMAND_PROGRAM_CHANGE",
        "body":[
            "$MIDI_COMMAND_PROGRAM_CHANGE"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_PROGRAM_CHANGE"
    },
    "MIDI_COMMAND_RPN":
    {
        "prefix": "MIDI_COMMAND_RPN",
        "body":[
            "$MIDI_COMMAND_RPN"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_RPN"
    },
    "MIDI_COMMAND_NRPN":
    {
        "prefix": "MIDI_COMMAND_NRPN",
        "body":[
            "$MIDI_COMMAND_NRPN"
        ],
        "description": "Built-in Variable: MIDI_COMMAND_NRPN"
    },
    "MOD_TARGET_INVERT_SOURCE":
    {
        "prefix": "MOD_TARGET_INVERT_SOURCE",
        "body":[
            "$MOD_TARGET_INVERT_SOURCE"
        ],
        "description": "Built-in Variable: MOD_TARGET_INVERT_SOURCE"
    },
    "NI_ASYNC_EXIT_STATUS":
    {
        "prefix": "NI_ASYNC_EXIT_STATUS",
        "body":[
            "$NI_ASYNC_EXIT_STATUS"
        ],
        "description": "Built-in Variable: NI_ASYNC_EXIT_STATUS"
    },
    "NI_ASYNC_ID":
    {
        "prefix": "NI_ASYNC_ID",
        "body":[
            "$NI_ASYNC_ID"
        ],
        "description": "Built-in Variable: NI_ASYNC_ID"
    },
    "NI_BUS_OFFSET":
    {
        "prefix": "NI_BUS_OFFSET",
        "body":[
            "$NI_BUS_OFFSET"
        ],
        "description": "Built-in Variable: NI_BUS_OFFSET"
    },
    "NI_CALLBACK_ID":
    {
        "prefix": "NI_CALLBACK_ID",
        "body":[
            "$NI_CALLBACK_ID"
        ],
        "description": "Built-in Variable: NI_CALLBACK_ID"
    },
    "NI_CALLBACK_TYPE":
    {
        "prefix": "NI_CALLBACK_TYPE",
        "body":[
            "$NI_CALLBACK_TYPE"
        ],
        "description": "Built-in Variable: NI_CALLBACK_TYPE"
    },
    "NI_CB_TYPE_ASYNC_OUT":
    {
        "prefix": "NI_CB_TYPE_ASYNC_OUT",
        "body":[
            "$NI_CB_TYPE_ASYNC_OUT"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_ASYNC_OUT"
    },
    "NI_CB_TYPE_CONTROLLER":
    {
        "prefix": "NI_CB_TYPE_CONTROLLER",
        "body":[
            "$NI_CB_TYPE_CONTROLLER"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_CONTROLLER"
    },
    "NI_CB_TYPE_INIT":
    {
        "prefix": "NI_CB_TYPE_INIT",
        "body":[
            "$NI_CB_TYPE_INIT"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_INIT"
    },
    "NI_CB_TYPE_LISTENER":
    {
        "prefix": "NI_CB_TYPE_LISTENER",
        "body":[
            "$NI_CB_TYPE_LISTENER"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_LISTENER"
    },
    "NI_CB_TYPE_MIDI_IN":
    {
        "prefix": "NI_CB_TYPE_MIDI_IN",
        "body":[
            "$NI_CB_TYPE_MIDI_IN"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_MIDI_IN"
    },
    "NI_CB_TYPE_NOTE":
    {
        "prefix": "NI_CB_TYPE_NOTE",
        "body":[
            "$NI_CB_TYPE_NOTE"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_NOTE"
    },
    "NI_CB_TYPE_PERSISTENCE_CHANGED":
    {
        "prefix": "NI_CB_TYPE_PERSISTENCE_CHANGED",
        "body":[
            "$NI_CB_TYPE_PERSISTENCE_CHANGED"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_PERSISTENCE_CHANGED"
    },
    "NI_CB_TYPE_PGS":
    {
        "prefix": "NI_CB_TYPE_PGS",
        "body":[
            "$NI_CB_TYPE_PGS"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_PGS"
    },
    "NI_CB_TYPE_POLY_AT":
    {
        "prefix": "NI_CB_TYPE_POLY_AT",
        "body":[
            "$NI_CB_TYPE_POLY_AT"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_POLY_AT"
    },
    "NI_CB_TYPE_RELEASE":
    {
        "prefix": "NI_CB_TYPE_RELEASE",
        "body":[
            "$NI_CB_TYPE_RELEASE"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_RELEASE"
    },
    "NI_CB_TYPE_RPN":
    {
        "prefix": "NI_CB_TYPE_RPN",
        "body":[
            "$NI_CB_TYPE_RPN"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_RPN"
    },
    "NI_CB_TYPE_NRPN":
    {
        "prefix": "NI_CB_TYPE_NRPN",
        "body":[
            "$NI_CB_TYPE_NRPN"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_NRPN"
    },
    "NI_CB_TYPE_UI_CONTROL":
    {
        "prefix": "NI_CB_TYPE_UI_CONTROL",
        "body":[
            "$NI_CB_TYPE_UI_CONTROL"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_UI_CONTROL"
    },
    "NI_CB_TYPE_UI_UPDATE":
    {
        "prefix": "NI_CB_TYPE_UI_UPDATE",
        "body":[
            "$NI_CB_TYPE_UI_UPDATE"
        ],
        "description": "Built-in Variable: NI_CB_TYPE_UI_UPDATE"
    },
    "NI_FILE_TYPE_ARRAY":
    {
        "prefix": "NI_FILE_TYPE_ARRAY",
        "body":[
            "$NI_FILE_TYPE_ARRAY"
        ],
        "description": "Built-in Variable: NI_FILE_TYPE_ARRAY"
    },
    "NI_FILE_TYPE_AUDIO":
    {
        "prefix": "NI_FILE_TYPE_AUDIO",
        "body":[
            "$NI_FILE_TYPE_AUDIO"
        ],
        "description": "Built-in Variable: NI_FILE_TYPE_AUDIO"
    },
    "NI_FILE_TYPE_MIDI":
    {
        "prefix": "NI_FILE_TYPE_MIDI",
        "body":[
            "$NI_FILE_TYPE_MIDI"
        ],
        "description": "Built-in Variable: NI_FILE_TYPE_MIDI"
    },
    "NI_KEY_TYPE_CONTROL":
    {
        "prefix": "NI_KEY_TYPE_CONTROL",
        "body":[
            "$NI_KEY_TYPE_CONTROL"
        ],
        "description": "Built-in Variable: NI_KEY_TYPE_CONTROL"
    },
    "NI_KEY_TYPE_DEFAULT":
    {
        "prefix": "NI_KEY_TYPE_DEFAULT",
        "body":[
            "$NI_KEY_TYPE_DEFAULT"
        ],
        "description": "Built-in Variable: NI_KEY_TYPE_DEFAULT"
    },
    "NI_KEY_TYPE_NONE":
    {
        "prefix": "NI_KEY_TYPE_NONE",
        "body":[
            "$NI_KEY_TYPE_NONE"
        ],
        "description": "Built-in Variable: NI_KEY_TYPE_NONE"
    },
    "NI_SIGNAL_TIMER_BEAT":
    {
        "prefix": "NI_SIGNAL_TIMER_BEAT",
        "body":[
            "$NI_SIGNAL_TIMER_BEAT"
        ],
        "description": "Built-in Variable: NI_SIGNAL_TIMER_BEAT"
    },
    "NI_SIGNAL_TIMER_MS":
    {
        "prefix": "NI_SIGNAL_TIMER_MS",
        "body":[
            "$NI_SIGNAL_TIMER_MS"
        ],
        "description": "Built-in Variable: NI_SIGNAL_TIMER_MS"
    },
    "NI_SIGNAL_TRANSP_START":
    {
        "prefix": "NI_SIGNAL_TRANSP_START",
        "body":[
            "$NI_SIGNAL_TRANSP_START"
        ],
        "description": "Built-in Variable: NI_SIGNAL_TRANSP_START"
    },
    "NI_SIGNAL_TRANSP_STOP":
    {
        "prefix": "NI_SIGNAL_TRANSP_STOP",
        "body":[
            "$NI_SIGNAL_TRANSP_STOP"
        ],
        "description": "Built-in Variable: NI_SIGNAL_TRANSP_STOP"
    },
    "NI_SIGNAL_TYPE":
    {
        "prefix": "NI_SIGNAL_TYPE",
        "body":[
            "$NI_SIGNAL_TYPE"
        ],
        "description": "Built-in Variable: NI_SIGNAL_TYPE"
    },
    "NI_SONG_POSITION":
    {
        "prefix": "NI_SONG_POSITION",
        "body":[
            "$NI_SONG_POSITION"
        ],
        "description": "Built-in Variable: NI_SONG_POSITION"
    },
    "NI_SYNC_UNIT_16TH":
    {
        "prefix": "NI_SYNC_UNIT_16TH",
        "body":[
            "$NI_SYNC_UNIT_16TH"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_16TH"
    },
    "NI_SYNC_UNIT_16TH_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_16TH_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_16TH_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_16TH_TRIPLET"
    },
    "NI_SYNC_UNIT_256TH":
    {
        "prefix": "NI_SYNC_UNIT_256TH",
        "body":[
            "$NI_SYNC_UNIT_256TH"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_256TH"
    },
    "NI_SYNC_UNIT_32ND":
    {
        "prefix": "NI_SYNC_UNIT_32ND",
        "body":[
            "$NI_SYNC_UNIT_32ND"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_32ND"
    },
    "NI_SYNC_UNIT_32ND_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_32ND_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_32ND_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_32ND_TRIPLET"
    },
    "NI_SYNC_UNIT_64TH":
    {
        "prefix": "NI_SYNC_UNIT_64TH",
        "body":[
            "$NI_SYNC_UNIT_64TH"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_64TH"
    },
    "NI_SYNC_UNIT_64TH_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_64TH_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_64TH_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_64TH_TRIPLET"
    },
    "NI_SYNC_UNIT_8TH":
    {
        "prefix": "NI_SYNC_UNIT_8TH",
        "body":[
            "$NI_SYNC_UNIT_8TH"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_8TH"
    },
    "NI_SYNC_UNIT_8TH_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_8TH_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_8TH_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_8TH_TRIPLET"
    },
    "NI_SYNC_UNIT_ABS":
    {
        "prefix": "NI_SYNC_UNIT_ABS",
        "body":[
            "$NI_SYNC_UNIT_ABS"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_ABS"
    },
    "NI_SYNC_UNIT_HALF":
    {
        "prefix": "NI_SYNC_UNIT_HALF",
        "body":[
            "$NI_SYNC_UNIT_HALF"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_HALF"
    },
    "NI_SYNC_UNIT_HALF_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_HALF_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_HALF_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_HALF_TRIPLET"
    },
    "NI_SYNC_UNIT_QUARTER":
    {
        "prefix": "NI_SYNC_UNIT_QUARTER",
        "body":[
            "$NI_SYNC_UNIT_QUARTER"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_QUARTER"
    },
    "NI_SYNC_UNIT_QUARTER_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_QUARTER_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_QUARTER_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_QUARTER_TRIPLET"
    },
    "NI_SYNC_UNIT_WHOLE":
    {
        "prefix": "NI_SYNC_UNIT_WHOLE",
        "body":[
            "$NI_SYNC_UNIT_WHOLE"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_WHOLE"
    },
    "NI_SYNC_UNIT_WHOLE_TRIPLET":
    {
        "prefix": "NI_SYNC_UNIT_WHOLE_TRIPLET",
        "body":[
            "$NI_SYNC_UNIT_WHOLE_TRIPLET"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_WHOLE_TRIPLET"
    },
    "NI_SYNC_UNIT_ZONE":
    {
        "prefix": "NI_SYNC_UNIT_ZONE",
        "body":[
            "$NI_SYNC_UNIT_ZONE"
        ],
        "description": "Built-in Variable: NI_SYNC_UNIT_ZONE"
    },
    "NI_TRANSPORT_RUNNING":
    {
        "prefix": "NI_TRANSPORT_RUNNING",
        "body":[
            "$NI_TRANSPORT_RUNNING"
        ],
        "description": "Built-in Variable: NI_TRANSPORT_RUNNING"
    },
    "NI_VL_TMPRO_STANDARD":
    {
        "prefix": "NI_VL_TMPRO_STANDARD",
        "body":[
            "$NI_VL_TMPRO_STANDARD"
        ],
        "description": "Built-in Variable: NI_VL_TMPRO_STANDARD"
    },
    "NI_VL_TMRPO_HQ":
    {
        "prefix": "NI_VL_TMRPO_HQ",
        "body":[
            "$NI_VL_TMRPO_HQ"
        ],
        "description": "Built-in Variable: NI_VL_TMRPO_HQ"
    },
    "NOTE_HELD":
    {
        "prefix": "NOTE_HELD",
        "body":[
            "$NOTE_HELD"
        ],
        "description": "Built-in Variable: NOTE_HELD"
    },
    "NUM_GROUPS":
    {
        "prefix": "NUM_GROUPS",
        "body":[
            "$NUM_GROUPS"
        ],
        "description": "Built-in Variable: NUM_GROUPS"
    },
    "NUM_OUTPUT_CHANNELS":
    {
        "prefix": "NUM_OUTPUT_CHANNELS",
        "body":[
            "$NUM_OUTPUT_CHANNELS"
        ],
        "description": "Built-in Variable: NUM_OUTPUT_CHANNELS"
    },
    "NUM_ZONES":
    {
        "prefix": "NUM_ZONES",
        "body":[
            "$NUM_ZONES"
        ],
        "description": "Built-in Variable: NUM_ZONES"
    },
    "PLAYED_VOICES_INST":
    {
        "prefix": "PLAYED_VOICES_INST",
        "body":[
            "$PLAYED_VOICES_INST"
        ],
        "description": "Built-in Variable: PLAYED_VOICES_INST"
    },
    "PLAYED_VOICES_TOTAL":
    {
        "prefix": "PLAYED_VOICES_TOTAL",
        "body":[
            "$PLAYED_VOICES_TOTAL"
        ],
        "description": "Built-in Variable: PLAYED_VOICES_TOTAL"
    },
    "POLY_AT_NUM":
    {
        "prefix": "POLY_AT_NUM",
        "body":[
            "$POLY_AT_NUM"
        ],
        "description": "Built-in Variable: POLY_AT_NUM"
    },
    "REF_GROUP_IDX":
    {
        "prefix": "REF_GROUP_IDX",
        "body":[
            "$REF_GROUP_IDX"
        ],
        "description": "Built-in Variable: REF_GROUP_IDX"
    },
    "RPN_ADDRESS":
    {
        "prefix": "RPN_ADDRESS",
        "body":[
            "$RPN_ADDRESS"
        ],
        "description": "Built-in Variable: RPN_ADDRESS"
    },
    "RPN_VALUE":
    {
        "prefix": "RPN_VALUE",
        "body":[
            "$RPN_VALUE"
        ],
        "description": "Built-in Variable: RPN_VALUE"
    },
    "SIGNATURE_DENOM":
    {
        "prefix": "SIGNATURE_DENOM",
        "body":[
            "$SIGNATURE_DENOM"
        ],
        "description": "Built-in Variable: SIGNATURE_DENOM"
    },
    "SIGNATURE_NUM":
    {
        "prefix": "SIGNATURE_NUM",
        "body":[
            "$SIGNATURE_NUM"
        ],
        "description": "Built-in Variable: SIGNATURE_NUM"
    },
    "START_CRITERIA_AND_NEXT":
    {
        "prefix": "START_CRITERIA_AND_NEXT",
        "body":[
            "$START_CRITERIA_AND_NEXT"
        ],
        "description": "Built-in Variable: START_CRITERIA_AND_NEXT"
    },
    "START_CRITERIA_AND_NOT_NEXT":
    {
        "prefix": "START_CRITERIA_AND_NOT_NEXT",
        "body":[
            "$START_CRITERIA_AND_NOT_NEXT"
        ],
        "description": "Built-in Variable: START_CRITERIA_AND_NOT_NEXT"
    },
    "START_CRITERIA_CYCLE_RANDOM":
    {
        "prefix": "START_CRITERIA_CYCLE_RANDOM",
        "body":[
            "$START_CRITERIA_CYCLE_RANDOM"
        ],
        "description": "Built-in Variable: START_CRITERIA_CYCLE_RANDOM"
    },
    "START_CRITERIA_CYCLE_ROUND_ROBIN":
    {
        "prefix": "START_CRITERIA_CYCLE_ROUND_ROBIN",
        "body":[
            "$START_CRITERIA_CYCLE_ROUND_ROBIN"
        ],
        "description": "Built-in Variable: START_CRITERIA_CYCLE_ROUND_ROBIN"
    },
    "START_CRITERIA_NONE":
    {
        "prefix": "START_CRITERIA_NONE",
        "body":[
            "$START_CRITERIA_NONE"
        ],
        "description": "Built-in Variable: START_CRITERIA_NONE"
    },
    "START_CRITERIA_ON_CONTROLLER":
    {
        "prefix": "START_CRITERIA_ON_CONTROLLER",
        "body":[
            "$START_CRITERIA_ON_CONTROLLER"
        ],
        "description": "Built-in Variable: START_CRITERIA_ON_CONTROLLER"
    },
    "START_CRITERIA_ON_KEY":
    {
        "prefix": "START_CRITERIA_ON_KEY",
        "body":[
            "$START_CRITERIA_ON_KEY"
        ],
        "description": "Built-in Variable: START_CRITERIA_ON_KEY"
    },
    "START_CRITERIA_OR_NEXT":
    {
        "prefix": "START_CRITERIA_OR_NEXT",
        "body":[
            "$START_CRITERIA_OR_NEXT"
        ],
        "description": "Built-in Variable: START_CRITERIA_OR_NEXT"
    },
    "START_CRITERIA_SLICE_TRIGGER":
    {
        "prefix": "START_CRITERIA_SLICE_TRIGGER",
        "body":[
            "$START_CRITERIA_SLICE_TRIGGER"
        ],
        "description": "Built-in Variable: START_CRITERIA_SLICE_TRIGGER"
    },
    "UI_WAVEFORM_TABLE_IS_BIPOLAR":
    {
        "prefix": "UI_WAVEFORM_TABLE_IS_BIPOLAR",
        "body":[
            "$UI_WAVEFORM_TABLE_IS_BIPOLAR"
        ],
        "description": "Built-in Variable: UI_WAVEFORM_TABLE_IS_BIPOLAR"
    },
    "UI_WAVEFORM_USE_MIDI_DRAG":
    {
        "prefix": "UI_WAVEFORM_USE_MIDI_DRAG",
        "body":[
            "$UI_WAVEFORM_USE_MIDI_DRAG"
        ],
        "description": "Built-in Variable: UI_WAVEFORM_USE_MIDI_DRAG"
    },
    "UI_WAVEFORM_USE_SLICES":
    {
        "prefix": "UI_WAVEFORM_USE_SLICES",
        "body":[
            "$UI_WAVEFORM_USE_SLICES"
        ],
        "description": "Built-in Variable: UI_WAVEFORM_USE_SLICES"
    },
    "UI_WAVEFORM_USE_TABLE":
    {
        "prefix": "UI_WAVEFORM_USE_TABLE",
        "body":[
            "$UI_WAVEFORM_USE_TABLE"
        ],
        "description": "Built-in Variable: UI_WAVEFORM_USE_TABLE"
    },
    "UI_WF_PROP_FLAGS":
    {
        "prefix": "UI_WF_PROP_FLAGS",
        "body":[
            "$UI_WF_PROP_FLAGS"
        ],
        "description": "Built-in Variable: UI_WF_PROP_FLAGS"
    },
    "UI_WF_PROP_MIDI_DRAG_START_NOTE":
    {
        "prefix": "UI_WF_PROP_MIDI_DRAG_START_NOTE",
        "body":[
            "$UI_WF_PROP_MIDI_DRAG_START_NOTE"
        ],
        "description": "Built-in Variable: UI_WF_PROP_MIDI_DRAG_START_NOTE"
    },
    "UI_WF_PROP_PLAY_CURSOR":
    {
        "prefix": "UI_WF_PROP_PLAY_CURSOR",
        "body":[
            "$UI_WF_PROP_PLAY_CURSOR"
        ],
        "description": "Built-in Variable: UI_WF_PROP_PLAY_CURSOR"
    },
    "UI_WF_PROP_TABLE_IDX_HIGHLIGHT":
    {
        "prefix": "UI_WF_PROP_TABLE_IDX_HIGHLIGHT",
        "body":[
            "$UI_WF_PROP_TABLE_IDX_HIGHLIGHT"
        ],
        "description": "Built-in Variable: UI_WF_PROP_TABLE_IDX_HIGHLIGHT"
    },
    "UI_WF_PROP_TABLE_VAL":
    {
        "prefix": "UI_WF_PROP_TABLE_VAL",
        "body":[
            "$UI_WF_PROP_TABLE_VAL"
        ],
        "description": "Built-in Variable: UI_WF_PROP_TABLE_VAL"
    },
    "VALUE_EDIT_MODE_NOTE_NAMES":
    {
        "prefix": "VALUE_EDIT_MODE_NOTE_NAMES",
        "body":[
            "$VALUE_EDIT_MODE_NOTE_NAMES"
        ],
        "description": "Built-in Variable: VALUE_EDIT_MODE_NOTE_NAMES"
    },
    "VCC_MONO_AT":
    {
        "prefix": "VCC_MONO_AT",
        "body":[
            "$VCC_MONO_AT"
        ],
        "description": "Built-in Variable: VCC_MONO_AT"
    },
    "VCC_PITCH_BEND":
    {
        "prefix": "VCC_PITCH_BEND",
        "body":[
            "$VCC_PITCH_BEND"
        ],
        "description": "Built-in Variable: VCC_PITCH_BEND"
    },
    "CC":
    {
        "prefix": "CC",
        "body":[
            "%CC[ ${1:<controller-number>} ]"
        ],
        "description": "Built-in Variable: CC"
    },
    "CC_TOUCHED":
    {
        "prefix": "CC_TOUCHED",
        "body":[
            "%CC_TOUCHED[ ${1:<controller-number>} ]"
        ],
        "description": "Built-in Variable: CC_TOUCHED"
    },
    "GROUPS_AFFECTED":
    {
        "prefix": "GROUPS_AFFECTED",
        "body":[
            "%GROUPS_AFFECTED[ ${1:<index>} ]"
        ],
        "description": "Built-in Variable: GROUPS_AFFECTED"
    },
    "GROUPS_SELECTED":
    {
        "prefix": "GROUPS_SELECTED",
        "body":[
            "%GROUPS_SELECTED[ ${1:<index>} ]"
        ],
        "description": "Built-in Variable: GROUPS_SELECTED"
    },
    "KEY_DOWN":
    {
        "prefix": "KEY_DOWN",
        "body":[
            "%KEY_DOWN[ ${1:<note-number>} ]"
        ],
        "description": "Built-in Variable: KEY_DOWN"
    },
    "KEY_DOWN_OCT":
    {
        "prefix": "KEY_DOWN_OCT",
        "body":[
            "%KEY_DOWN_OCT[ ${1:<note-number>} ]"
        ],
        "description": "Built-in Variable: KEY_DOWN_OCT"
    },
    "NOTE_DURATION":
    {
        "prefix": "NOTE_DURATION",
        "body":[
            "%NOTE_DURATION[ ${1:<note-number>} ]"
        ],
        "description": "Built-in Variable: NOTE_DURATION"
    },
    "POLY_AT":
    {
        "prefix": "POLY_AT",
        "body":[
            "%POLY_AT[ ${1:<note-number>} ]"
        ],
        "description": "Built-in Variable: POLY_AT"
    },
    "NI_MATH_E":
    {
        "prefix": "NI_MATH_E",
        "body":[
            "~NI_MATH_E"
        ],
        "description": "Built-in Variable: NI_MATH_E"
    },
    "NI_MATH_PI":
    {
        "prefix": "NI_MATH_PI",
        "body":[
            "~NI_MATH_PI"
        ],
        "description": "Built-in Variable: NI_MATH_PI"
    }
}
