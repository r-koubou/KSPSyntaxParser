{

"##---------------- Comment(Original) ----------------##":{},


    "separate_comment":
    {
        "prefix": "separate",
        "body":[
            "{--------------------------------------------------------------------------------}",
            ""
        ],
        "description": "Insert a comment as separator"
    },
    "section_comment":
    {
        "prefix": "section",
        "body":[
            "{--------------------------------------------------------------------------------}",
            "{",
            "    ${1:comment}",
            "}",
            "{--------------------------------------------------------------------------------}"
        ],
        "description": "Insert a comment for section"
    },
    "comment":
    {
        "prefix": "doc",
        "body":[
            "{",
            "    ${1:undocumented}",
            "}",
            ""
        ],
        "description": "Insert a document comment"
    },

"##---------------- Declare primitive variable(Original) ----------------##":{},

    "int":
    {
        "prefix": "int",
        "body":[  "declare \\$${1:name}" ],
        "description": "declare a user-defined variable to store a single integer value"
    },
    "inta":
    {
        "prefix": "int array",
        "body":[  "declare %${1:name}[ ${2:size} ]" ],
        "description": "declare a user-defined array to store single integer values at specific indices"
    },
    "real":
    {
        "prefix": "real",
        "body":[  "declare ~${1:name}" ],
        "description": "declare a user-defined variable to store a single real value"
    },
    "reala":
    {
        "prefix": "real array",
        "body":[  "declare ?${1:name}[ ${2:size} ]" ],
        "description": "declare a user-defined array to store single real values at specific indices"
    },
    "string":
    {
        "prefix": "string",
        "body":[  "declare @${1:name}" ],
        "description": "declare a user-defined string variable to store text"
    },
    "stringa":
    {
        "prefix": "string array",
        "body":[  "declare !${1:name}[ ${2:size} ]" ],
        "description": "declare a user-defined string array to store text strings at specified indices"
    },
    "polyphonicv":
    {
        "prefix": "polyphonic",
        "body":[  "declare polyphonic \\$${1:name}" ],
        "description": "declare a user-defined polyphonic variable to store a single integer value per note event"
    },


"##---------------- KSP Reference Manual Begin ----------------##":{},


"##---------------- Callbacks ----------------##":{},

    "on async_complete":
    {
        "prefix": "on async_complete",
        "body":[
            "{",
            "    ${1:async complete callback, triggered after the execution of any load/save command}",
            "}",
            "on async_complete",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "async complete callback, triggered after the execution of any load/save command"
    },
    "on controller":
    {
        "prefix": "on controller",
        "body":[
            "{",
            "    ${1:MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received}",
            "}",
            "on controller",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "MIDI controller callback, executed whenever a CC, pitch bend or channel pressure message is received"
    },
    "on init":
    {
        "prefix": "on init",
        "body":[
            "{",
            "    ${1:initialization callback, executed when the script was successfully analyzed}",
            "}",
            "on init",
            "    make_perfview",
            "    message(\"\")",
            "    set_script_title( \"${2:title}\" )",
            "    ${3:code...}",
            "end on",
            ""
        ],
        "description": "initialization callback, executed when the script was successfully analyzed"
    },
    "on listener":
    {
        "prefix": "on listener",
        "body":[
            "{",
            "    ${1:listener callback, executed at definable time intervals or whenever a transport command is received}",
            "}",
            "on listener",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "listener callback, executed at definable time intervals or whenever a transport command is received"
    },
    "on note":
    {
        "prefix": "on note",
        "body":[
            "{",
            "    ${1:note callback, executed whenever a note on message is received}",
            "}",
            "on note",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "note callback, executed whenever a note on message is received"
    },
    "on persistence_changed":
    {
        "prefix": "on persistence_changed",
        "body":[
            "{",
            "    ${1:executed after the init callback or whenever a snapshot has been loaded}",
            "}",
            "on persistence_changed",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "executed after the init callback or whenever a snapshot has been loaded"
    },
    "on pgs_changed":
    {
        "prefix": "on pgs_changed",
        "body":[
            "{",
            "    ${1:executed whenever any pgs_set_key_val() command is executed in any script}",
            "}",
            "on pgs_changed",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "executed whenever any pgs_set_key_val() command is executed in any script"
    },
    "on poly_at":
    {
        "prefix": "on poly_at",
        "body":[
            "{",
            "    ${1:polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received}",
            "}",
            "on poly_at",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "polyphonic aftertouch callback, executed whenever a polyphonic aftertouch message is received"
    },
    "on release":
    {
        "prefix": "on release",
        "body":[
            "{",
            "    ${1:release callback, executed whenever a note off message is received}",
            "}",
            "on release",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "release callback, executed whenever a note off message is received"
    },
    "on rpn":
    {
        "prefix": "on rpn",
        "body":[
            "{",
            "    ${1:rpn(registered parameter number) callback message is received}",
            "}",
            "on rpn",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "rpn(registered parameter number) callback message is received"
    },
    "on nrpn":
    {
        "prefix": "on nrpn",
        "body":[
            "{",
            "    ${1:nrpn(unregistered parameter number) callback message is received}",
            "}",
            "on nrpn",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "nrpn(unregistered parameter number) callback message is received"
    },
    "on ui_control":
    {
        "prefix": "on ui_control",
        "body":[
            "{",
            "    ${1:UI callback, executed whenever the user changes the respective UI element}",
            "}",
            "on ui_control( \\$${2:uiVariable} )",
            "    ${3:code...}",
            "end on",
            ""
        ],
        "description": "UI callback, executed whenever the user changes the respective UI element"
    },
    "on ui_update":
    {
        "prefix": "on ui_update",
        "body":[
            "{",
            "    ${1:UI update callback, executed with every GUI change in KONTAKT}",
            "}",
            "on ui_update",
            "    ${2:code...}",
            "end on",
            ""
        ],
        "description": "UI update callback, executed with every GUI change in KONTAKT"
    },

"##---------------- Variables ----------------##":{},

    "make_instr_persistent":
    {
        "prefix": "make_instr_persistent",
        "body":[
            "make_instr_persistent( ${1:variable} )"
        ],
        "description": "retain the value of a variable only with the instrument"
    },
    "make_persistent":
    {
        "prefix": "make_persistent",
        "body":[
            "make_persistent( ${1:variable} )"
        ],
        "description": "retain the value of a variable whith the instrument and snapshot"
    },
    "read_persistent_var":
    {
        "prefix": "read_persistent_var",
        "body":[
            "read_persistent_var( ${1:variable} )"
        ],
        "description": "instantly reloads the value of a variable that was saved via the make_persistent()command"
    },

"##---------------- User Interface Controls ----------------##":{},

    "ui_button":
    {
        "prefix": "ui_button",
        "body":[
            "declare ui_button \\$${1:<variable-name>}"
        ],
        "description": "create a user interface button"
    },
    "ui_knob":
    {
        "prefix": "ui_knob",
        "body":[
            "declare ui_knob \\$${1:<variable-name>}( ${2:<min>}, ${3:<max>}, ${4:<display-ratio>} )"
        ],
        "description": "create a user interface button"
    },
    "ui_file_selector":
    {
        "prefix": "ui_file_selector",
        "body":[
            "declare ui_file_selector \\$${1:<variable-name>}"
        ],
        "description": "create a user interface button"
    },
    "ui_label":
    {
        "prefix": "ui_label",
        "body":[
            "declare ui_label \\$${1:<variable-name>}( ${2:<width(unit=grid)>}, ${3:<height(unit=grid)>} )"
        ],
        "description": "create a user interface text label"
    },
    "ui_level_meter":
    {
        "prefix": "ui_level_meter",
        "body":[
            "declare ui_level_meter \\$${1:<variable-name>}"
        ],
        "description": "create a level meter"
    },
    "ui_menu":
    {
        "prefix": "ui_menu",
        "body":[
            "declare ui_menu \\$${1:<variable-name>}"
        ],
        "description": "create a user interface drop-down menu"
    },
    "ui_slider":
    {
        "prefix": "ui_slider",
        "body":[
            "declare ui_slider \\$${1:<variable-name>}( ${2:<min>}, ${3:<max>} )"
        ],
        "description": "create a user interface slider"
    },
    "ui_switch":
    {
        "prefix": "ui_switch",
        "body":[
            "declare ui_switch \\$${1:<variable-name>}"
        ],
        "description": "create a user interface switch"
    },
    "ui_table":
    {
        "prefix": "ui_table",
        "body":[
            "declare ui_table %${1:<array>}[${2:colmns}]( ${3:<width(unit=grid)>}, ${4:<height(unit=grid)>}, ${5:<range>} )"
        ],
        "description": "create a user interface switch"
    },
    "ui_text_edit":
    {
        "prefix": "ui_text_edit",
        "body":[
            "declare ui_text_edit @${1:<variable-name>}"
        ],
        "description": "create a text edit field"
    },
    "ui_value_edit":
    {
        "prefix": "ui_value_edit",
        "body":[
            "declare ui_value_edit \\$${1:<variable-name>}( ${2:<min>}, ${3:<max>}, ${4:display-ratio} )"
        ],
        "description": "create a user interface number box"
    },
    "ui_waveform":
    {
        "prefix": "ui_waveform",
        "body":[
            "declare ui_waveform \\$${1:<variable-name>}( ${2:<width(unit=grid)>}, ${3:<height(unit=grid)>} )"
        ],
        "description": "create a waveform control to display zones and slices. Can also be used to control specific parameters per slice and for MIDI drag & drop functionality."
    },

"##---------------- Control Statements ----------------##":{},

    "if":
    {
        "prefix": "if",
        "body":[
            "if( ${1:<condition>} )",
            "    ${2:code...}",
            "end if"
        ],
        "description": "if statement"
    },
    "ifelse":
    {
        "prefix": "ifelse",
        "body":[
            "if( ${1:<condition>} )",
            "    ${2:code...}",
            "else",
            "    ${3:code...}",
            "end if"
        ],
        "description": "if...else statement"
    },
    "select":
    {
        "prefix": "select",
        "body":[
            "select( ${1:<variable>} )",
            "    case ${2:case}:",
            "        ${3:code...}",
            "end select"
        ],
        "description": "if statement"
    },
    "while":
    {
        "prefix": "while",
        "body":[
            "while( ${1:<condition>} )",
            "    ${2:code...}",
            "end while"
        ],
        "description": "while statement"
    },
    "in_range":
    {
        "prefix": "in_range",
        "body":[
            "in_range( ${1:x}, ${2:y}, ${3:z} )"
        ],
        "description": "true if x is between y and z"
    },

"##---------------- Arithmetic Commands & Operators ----------------##":{},

    "inc":
    {
        "prefix": "inc",
        "body":[
            "inc( ${1:x} )"
        ],
        "description": "increment an expression by 1 (x + 1)"
    },
    "dec":
    {
        "prefix": "dec",
        "body":[
            "dec( ${1:x} )"
        ],
        "description": "decrement an expression by 1 (x – 1)"
    },
    "mod":
    {
        "prefix": "mod",
        "body":[
            "${1:x} mod ${2:y}"
        ],
        "description": "modulo; returns the remainder of a division"
    },
    "exp":
    {
        "prefix": "exp",
        "body":[
            "exp( ${1:x} )"
        ],
        "description": "exponential function (returns the value of e^x)"
    },
    "log":
    {
        "prefix": "log",
        "body":[
            "log( ${1:x} )"
        ],
        "description": "logarithmic function"
    },
    "pow":
    {
        "prefix": "pow",
        "body":[
            "pow( ${1:x}, ${2:y} )"
        ],
        "description": "power (returns the value of x^y)"
    },
    "sqrt":
    {
        "prefix": "sqrt",
        "body":[
            "sqrt( ${1:x} )"
        ],
        "description": "square root"
    },
    "ceil":
    {
        "prefix": "ceil",
        "body":[
            "ceil( ${1:x} )"
        ],
        "description": "ceiling (round up) ceil(2.3) = 3.0"
    },
    "floor":
    {
        "prefix": "floor",
        "body":[
            "floor( ${1:x} )"
        ],
        "description": "floor (round down) floor(2.8) = 2.0"
    },
    "round":
    {
        "prefix": "round",
        "body":[
            "round( ${1:x} )"
        ],
        "description": "round (round to nearest) round(2.3) = 2.0 round(2.8) = 3.0"
    },
    "cos":
    {
        "prefix": "cos",
        "body":[
            "cos( ${1:x} )"
        ],
        "description": "cosine function"
    },
    "sin":
    {
        "prefix": "sin",
        "body":[
            "sin( ${1:x} )"
        ],
        "description": "sine function"
    },
    "tan":
    {
        "prefix": "tan",
        "body":[
            "tan( ${1:x} )"
        ],
        "description": "tangent function"
    },
    "acos":
    {
        "prefix": "acos",
        "body":[
            "acos( ${1:x} )"
        ],
        "description": "arccosine function"
    },
    "asin":
    {
        "prefix": "asin",
        "body":[
            "asin( ${1:x} )"
        ],
        "description": "arcsine (inverse sine function)"
    },
    "atan":
    {
        "prefix": "atan",
        "body":[
            "atan( ${1:x} )"
        ],
        "description": "arctangent (inverse tangent function)"
    },
    "and":
    {
        "prefix": "and",
        "body":[
            "${1:x} .and. ${2:y}"
        ],
        "description": "bitwise and"
    },
    "or":
    {
        "prefix": "or",
        "body":[
            "${1:x} .or. ${2:y}"
        ],
        "description": "bitwise or"
    },
    "not":
    {
        "prefix": "not",
        "body":[
            ".not. ${1:x}"
        ],
        "description": "bitwise negation"
    },
    "sh_left":
    {
        "prefix": "sh_left",
        "body":[
            "sh_left( ${1:<expression>}, ${2:<shift-bits>} )"
        ],
        "description": "shifts the bits in <expression> by the amount of <shift-bits> to the left"
    },
    "sh_right":
    {
        "prefix": "sh_right",
        "body":[
            "sh_right( ${1:<expression>}, ${2:<shift-bits>} )"
        ],
        "description": "shifts the bits in <expression> by the amount of <shift-bits> to the right"
    },
    "random":
    {
        "prefix": "random",
        "body":[
            "random( ${1:<min>}, ${2:<max>} )"
        ],
        "description": "generate a random integer in the range <min> to <max>"
    },
    "int_to_real":
    {
        "prefix": "int_to_real",
        "body":[
            "int_to_real( ${1:<integer value>} )"
        ],
        "description": "converts an integer value into a real number"
    },
    "real_to_int":
    {
        "prefix": "real_to_int",
        "body":[
            "real_to_int( ${1:<real value>} )"
        ],
        "description": "converts a real number into an integer"
    },
    "msb":
    {
        "prefix": "msb",
        "body":[
            "msb( ${1:<value>} )"
        ],
        "description": "return the MSB portion (most significant byte) of a 14 bit value"
    },
    "lsb":
    {
        "prefix": "lsb",
        "body":[
            "lsb( ${1:<value>} )"
        ],
        "description": "return the LSB portion (least significant byte) of a 14 bit value"
    },

"##---------------- General Commands ----------------##":{},

    "exit":
    {
        "prefix": "exit",
        "body":[
            "exit"
        ],
        "description": "immediately stops a callback or exits a function"
    },
    "ignore_controller":
    {
        "prefix": "ignore_controller",
        "body":[
            "ignore_controller"
        ],
        "description": "ignore a controller event in a controller callback"
    },
    "message":
    {
        "prefix": "message",
        "body":[
            "message( ${1:<variable/text>} )"
        ],
        "description": "display text in the status line of KONTAKT"
    },
    "note_off":
    {
        "prefix": "note_off",
        "body":[
            "note_off( ${1:<ID-number>} )"
        ],
        "description": "send a note off message to a specific note"
    },
    "play_note":
    {
        "prefix": "play_note",
        "body":[
            "play_note( ${1:<note-number>}, ${2:<velocity>}, ${3:<sample-offset>}, ${4:<duration>} )"
        ],
        "description": "generate a MIDI note, i.e. generate a note on message followed by a note off message"
    },
    "set_controller":
    {
        "prefix": "set_controller",
        "body":[
            "set_controller( ${1:<MIDI CC number/\\$VCC_PITCH_BEND/\\$VCC_MONO>}, ${2:<value>} )"
        ],
        "description": "send a MIDI CC, pitchbend or channel pressure value"
    },
    "set_rpn":
    {
        "prefix": "set_rpn",
        "body":[
            "set_rpn( ${1:<address>}, ${2:<value>} )"
        ],
        "description": "send a rpn message"
    },
    "set_nrpn":
    {
        "prefix": "set_nrpn",
        "body":[
            "set_nrpn( ${1:<address>}, ${2:<value>} )"
        ],
        "description": "send a nrpn message"
    },

"##---------------- Event Commands ----------------##":{},

    "by_marks":
    {
        "prefix": "by_marks",
        "body":[
            "by_marks( ${1:<bit-mask>} )"
        ],
        "description": "a user defined group of events (or event IDs)"
    },
    "change_note":
    {
        "prefix": "change_note",
        "body":[
            "change_note( ${1:<ID-number>}, ${2:note-number} )"
        ],
        "description": "change the note number of a specific note event"
    },
    "change_pan":
    {
        "prefix": "change_pan",
        "body":[
            "change_pan( ${1:<ID-number>}, ${2:<panorama(-1000~1000)>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the pan position of a specific note event"
    },
    "change_tune":
    {
        "prefix": "change_tune",
        "body":[
            "change_tune( ${1:<ID-number>}, ${2:<tune-amount(millicents)>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the tuning of a specific note event in millicent"
    },
    "change_velo":
    {
        "prefix": "change_velo",
        "body":[
            "change_velo( ${1:<ID-number>}, ${2:<velocity>} )"
        ],
        "description": "change the velocity of a specific note event"
    },
    "change_vol":
    {
        "prefix": "change_vol",
        "body":[
            "change_vol( ${1:<ID-number>}, ${2:<volume>}, ${3:<relative-bit(0 or 1)>} )"
        ],
        "description": "change the volume of a specific note event in millidecibel"
    },
    "delete_event_mark":
    {
        "prefix": "delete_event_mark",
        "body":[
            "delete_event_mark( ${1:<ID-number>}, ${2:<bit-mark($MARK_1 ... $MARK_28)>} )"
        ],
        "description": "delete an event mark, i.e. ungroup the specified event from an event group"
    },
    "event_status":
    {
        "prefix": "event_status",
        "body":[
            "event_status( ${1:<ID-number>} )"
        ],
        "description": "retrieve the status of a particular note event (or MIDI event in the multi script)"
    },
    "fade_in":
    {
        "prefix": "fade_in",
        "body":[
            "fade_in( ${1:<ID-number>}, ${2:<fade-time>(microseconds)} )"
        ],
        "description": "perform a fade-in for a specific note event"
    },
    "fade_out":
    {
        "prefix": "fade_out",
        "body":[
            "fade_out( ${1:<ID-number>}, ${2:<fade-time>(microseconds)} )"
        ],
        "description": "perform a fade-out for a specific note event"
    },
    "get_event_ids":
    {
        "prefix": "get_event_ids",
        "body":[
            "get_event_ids( ${1:<array-name>} )"
        ],
        "description": "fills the specified array with all active event IDs."
    },
    "get_event_par":
    {
        "prefix": "get_event_par",
        "body":[
            "get_event_par( ${1:<ID-number>}, ${2:<parameter>} )"
        ],
        "description": "return the value of a specific event parameter of the specified event"
    },
    "get_event_par_arr":
    {
        "prefix": "get_event_par_arr",
        "body":[
            "get_event_par_arr( ${1:<ID-number>}, ${2:<parameter>}, ${3:<group-index>} )"
        ],
        "description": "special form of get_event_par(), used to retrieve the group allow state of the specified event"
    },
    "ignore_event":
    {
        "prefix": "ignore_event",
        "body":[
            "ignore_event( ${1:<ID-number>} )"
        ],
        "description": "ignore a note event in a note on or note off callback"
    },
    "set_event_mark":
    {
        "prefix": "set_event_mark",
        "body":[
            "set_event_mark( ${1:<ID-number>} ${2:<bit-mark($MARK_1 ... $MARK_28)>} )"
        ],
        "description": "ignore a note event in a note on or note off callback"
    },
    "set_event_par":
    {
        "prefix": "set_event_par",
        "body":[
            "set_event_par( ${1:<ID-number>}, ${2:<parameter>}, ${3:<value>} )"
        ],
        "description": "assign a parameter to a specific event"
    },
    "set_event_par_arr":
    {
        "prefix": "set_event_par_arr",
        "body":[
            "set_event_par_arr( ${1:<ID-number>}, ${2:<parameter>}, ${3:<value>}, ${4:group-index} )"
        ],
        "description": "special form of set_event_par(), used to set the group allow state of the specified event"
    },

"##---------------- Array Commands ----------------##":{},

    "array_equal":
    {
        "prefix": "array_equal",
        "body":[
            "array_equal( ${1:<array-variable>}, ${2:<array-variable>} )"
        ],
        "description": "checks the values of two arrays, true if all values are equal, false if not"
    },
    "num_elements":
    {
        "prefix": "num_elements",
        "body":[
            "num_elements( ${1:<array-variable>} )"
        ],
        "description": "returns the number of elements in an array"
    },
    "search":
    {
        "prefix": "search",
        "body":[
            "search( ${1:<array-variable>}, ${2:<value>} )"
        ],
        "description": "searches the specified array for the specified value and returns the index of its first position."
    },
    "sort":
    {
        "prefix": "sort",
        "body":[
            "sort( ${1:<array-variable>}, ${2:<direction(0=ascending/not 0=descending>} )"
        ],
        "description": "searches the specified array for the specified value and returns the index of its first position."
    },

"##---------------- Group Commands ----------------##":{},

    "allow_group":
    {
        "prefix": "allow_group",
        "body":[
            "allow_group( ${1:<group-index>} )"
        ],
        "description": "allows the specified group, i.e. makes it available for playback"
    },
    "disallow_group":
    {
        "prefix": "disallow_group",
        "body":[
            "disallow_group( ${1:<group-index>} )"
        ],
        "description": "disallows the specified group, i.e. makes it unavailable for playback"
    },
    "find_group":
    {
        "prefix": "find_group",
        "body":[
            "find_group( ${1:<group-name} )"
        ],
        "description": "returns the group index for the specified group name"
    },
    "get_purge_state":
    {
        "prefix": "get_purge_state",
        "body":[
            "get_purge_state( ${1:<group-index} )"
        ],
        "description": "returns the purge state of the specified group. 0=purged, 1=not purged"
    },
    "group_name":
    {
        "prefix": "group_name",
        "body":[
            "group_name( ${1:<group-index} )"
        ],
        "description": "returns the group name for the specified group"
    },
    "purge_group":
    {
        "prefix": "purge_group",
        "body":[
            "purge_group( ${1:<group-index}, ${2:<mode(0 or 1)>} )"
        ],
        "description": "purges (i.e. unloads from RAM) the samples of the specified group"
    },

"##---------------- Time-Related Commands ----------------##":{},

    "change_listener_par":
    {
        "prefix": "change_listener_par",
        "body":[
            "change_listener_par( ${1:<signal-type($NI_SIGNAL_TIMER_MS or $NI_SIGNAL_TIMER_BEAT)>}, ${2:<parameter>} )"
        ],
        "description": "changes the parameters of the on listener callback. Can be used in every callback."
    },
    "ms_to_ticks":
    {
        "prefix": "ms_to_ticks",
        "body":[
            "ms_to_ticks( ${1:<microseconds>} )"
        ],
        "description": "converts a microseconds value into a tempo dependent ticks value"
    },
    "set_listener":
    {
        "prefix": "set_listener",
        "body":[
            "set_listener( ${1:<signal-type>}, ${2:<parameter>} )"
        ],
        "description": "Sets the signals on which the listener callback should react to. Can only be used in the init callback."
    },
    "stop_wait":
    {
        "prefix": "stop_wait",
        "body":[
            "stop_wait( ${1:<callback-ID>}, ${2:<parameter(0 or 1)>} )"
        ],
        "description": "stops wait commands in the specified callback"
    },
    "reset_ksp_timer":
    {
        "prefix": "reset_ksp_timer",
        "body":[
            "reset_ksp_timer"
        ],
        "description": "resets the KSP timer ($KSP_TIMER) to zero"
    },
    "ticks_to_ms":
    {
        "prefix": "ticks_to_ms",
        "body":[
            "ticks_to_ms( ${1:<ticks>} )"
        ],
        "description": "converts a tempo dependent ticks value into a microseconds value"
    },
    "wait":
    {
        "prefix": "wait",
        "body":[
            "wait( ${1:<wait-time(microseconds)>} )"
        ],
        "description": "pauses the callback for the specified time in microseconds"
    },
    "wait_ticks":
    {
        "prefix": "wait_ticks",
        "body":[
            "wait_ticks( ${1:<wait-time(ticks)>} )"
        ],
        "description": "pauses the callback for the specified time in ticks"
    },

"##---------------- User Interface Commands ----------------##":{},

    "add_menu_item":
    {
        "prefix": "add_menu_item",
        "body":[
            "add_menu_item( ${1:<variable>}, ${2:<text>}, ${3:<value>} )"
        ],
        "description": "create a menu entry"
    },
    "add_text_line":
    {
        "prefix": "add_text_line",
        "body":[
            "add_text_line( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "add a new text line in the specified label without erasing existing text"
    },
    "attach_level_meter":
    {
        "prefix": "attach_level_meter",
        "body":[
            "attach_level_meter( ${1:<ui-ID>}, ${2:<group>}, ${3:<slot>}, ${4:<channel(0=left/1=right)>}, ${5:<bus>} )"
        ],
        "description": "attach a level meter to a certain position within the instrument to read volume data"
    },
    "attach_zone":
    {
        "prefix": "attach_zone",
        "body":[
            "attach_zone( ${1:<variable>}, ${2:<zone-id>}, ${3:<flags>} )"
        ],
        "description": "connects the corresponding zone to the waveform so that it shows up within the display"
    },
    "hide_part":
    {
        "prefix": "hide_part",
        "body":[
            "hide_part( ${1:<variable>}, ${2:<hide-mask>} )"
        ],
        "description": "hide specific parts of user interface controls"
    },
    "fs_get_filename":
    {
        "prefix": "fs_get_filename",
        "body":[
            "fs_get_filename( ${1:<ui-ID>}, ${2:<return-parameter(0 or 1 or 2)>} )"
        ],
        "description": "return the filename of the last selected file in the UI file browser."
    },
    "fs_navigate":
    {
        "prefix": "fs_navigate",
        "body":[
            "fs_navigate( ${1:<ui-ID>}, ${2:<direction(0 or 1)>} )"
        ],
        "description": "jump to the next/previous file in an ui file selector and trigger its callback."
    },
    "get_control_par":
    {
        "prefix": "get_control_par",
        "body":[
            "get_control_par( ${1:<ui-ID>}, ${2:<control-parameter>} )"
        ],
        "description": "retrieve various parameters of the specified gui control"
    },
    "get_menu_item_str":
    {
        "prefix": "get_menu_item_str",
        "body":[
            "get_menu_item_str( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns the string value of the menu's entry."
    },
    "get_menu_item_value":
    {
        "prefix": "get_menu_item_value",
        "body":[
            "get_menu_item_value( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns the value of the menu's entry."
    },
    "get_menu_item_visibility":
    {
        "prefix": "get_menu_item_visibility",
        "body":[
            "get_menu_item_visibility( ${1:<menu-ID>}, ${2:<index>} )"
        ],
        "description": "returns 1 if the menu entry is visible, otherwise 0."
    },
    "get_ui_id":
    {
        "prefix": "get_ui_id",
        "body":[
            "get_ui_id( ${1:<variable>} )"
        ],
        "description": "retrieve the ID number of an ui control"
    },
    "get_ui_wf_property":
    {
        "prefix": "get_ui_wf_property",
        "body":[
            "get_ui_wf_property( ${1:<variable>}, ${2:<property}>}, ${3:<index>} )"
        ],
        "description": "returns the value of the waveform’s different properties."
    },
    "make_perfview":
    {
        "prefix": "make_perfview",
        "body":[
            "make_perfview"
        ],
        "description": "activates the performance view for the respective script"
    },
    "move_control":
    {
        "prefix": "move_control",
        "body":[
            "move_control( ${1:<variable>}, ${2:<x-position(0 to 6)>}, ${3:<y-position(0 to 16)>} )"
        ],
        "description": "position ui elements in the standard KONTAKT grid"
    },
    "move_control_px":
    {
        "prefix": "move_control_px",
        "body":[
            "move_control_px( ${1:<variable>}, ${2:<x-position(px)>}, ${3:<y-position(px)>} )"
        ],
        "description": "position ui elements in pixels"
    },
    "set_control_help":
    {
        "prefix": "set_control_help",
        "body":[
            "set_control_help( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "assigns a text string to be displayed when hovering the ui control. The text will appear in KONTAKT's info pane."
    },
    "set_control_par":
    {
        "prefix": "set_control_par",
        "body":[
            "set_control_par( ${1:<ui-ID>}, ${2:<control-parameter>}, ${3:<value>} )"
        ],
        "description": "change various parameters of the specified gui control"
    },
    "set_knob_defval":
    {
        "prefix": "set_knob_defval",
        "body":[
            "set_knob_defval( ${1:<variable>}, ${2:<value>} )"
        ],
        "description": "assign a default value to a knob to which the knob is reset when Cmd-clicking (mac) or Ctrl-clicking (PC) the knob."
    },
    "set_knob_label":
    {
        "prefix": "set_knob_label",
        "body":[
            "set_knob_label( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "assign a text string to a knob"
    },
    "set_knob_unit":
    {
        "prefix": "set_knob_unit",
        "body":[
            "set_knob_unit( ${1:<variable>}, ${2:<knob-unit-constant>} )"
        ],
        "description": "assign a unit mark to a knob."
    },
    "set_menu_item_str":
    {
        "prefix": "set_menu_item_str",
        "body":[
            "set_menu_item_str( ${1:<menu-id>}, ${2:<index>}, ${3:<string>} )"
        ],
        "description": "sets the value of a menu entry."
    },
    "set_menu_item_value":
    {
        "prefix": "set_menu_item_value",
        "body":[
            "set_menu_item_value( ${1:<menu-id>}, ${2:<index>}, ${3:<value>} )"
        ],
        "description": "sets the value of a menu entry."
    },
    "set_menu_item_visibility":
    {
        "prefix": "set_menu_item_visibility",
        "body":[
            "set_menu_item_visibility( ${1:<menu-id>}, ${2:<index>}, ${3:<visibility(0=invisible/1=visible)>} )"
        ],
        "description": "sets the visibility of a menu entry."
    },
    "set_table_steps_shown":
    {
        "prefix": "set_table_steps_shown",
        "body":[
            "set_table_steps_shown( ${1:<variable>}, ${2:<num-of-steps>} )"
        ],
        "description": "changes the number of displayed columns in an ui table"
    },
    "set_script_title":
    {
        "prefix": "set_script_title",
        "body":[
            "set_script_title( ${1:<text>} )"
        ],
        "description": "set the script title"
    },
    "set_skin_offset":
    {
        "prefix": "set_skin_offset",
        "body":[
            "set_skin_offset( ${1:<offset-in-pixel>} )"
        ],
        "description": "offsets the chosen background picture file by the specified number of pixels"
    },
    "set_text":
    {
        "prefix": "set_text",
        "body":[
            "set_text( ${1:<variable>}, ${2:<text>} )"
        ],
        "description": "when applied to a label: delete the text currently visible in the specified label and add new text.\nwhen applied to knobs, buttons, switches and value edits: set the display name of the ui element."
    },
    "set_ui_color":
    {
        "prefix": "set_ui_color",
        "body":[
            "set_ui_color( ${1:<hex values(9\"RRGGBBh\"))>}, ${2:<text>} )"
        ],
        "description": "set the main background color of the performance view"
    },
    "set_ui_height":
    {
        "prefix": "set_ui_height",
        "body":[
            "set_ui_height( ${1:<height(1 to 8)> )"
        ],
        "description": "set the height of a script performance view in grid units"
    },
    "set_ui_height_px":
    {
        "prefix": "set_ui_height_px",
        "body":[
            "set_ui_height_px( ${1:<height(50px to 750px)> )"
        ],
        "description": "set the height of a script performance view in pixels"
    },
    "set_ui_width_px":
    {
        "prefix": "set_ui_width_px",
        "body":[
            "set_ui_width_px( ${1:<width(633px to 1000px)> )"
        ],
        "description": "set the width of a script performance view in pixels"
    },
    "set_ui_wf_property":
    {
        "prefix": "set_ui_wf_property",
        "body":[
            "set_ui_wf_property( ${1:<variable>}, ${2:<property>}, ${3:<index>}, ${4:<value> )"
        ],
        "description": "sets different properties for the waveform control"
    },

"##---------------- Keyboard Commands ----------------##":{},

    "get_key_color":
    {
        "prefix": "get_key_color",
        "body":[
            "get_key_color( ${1:<note-nr> )"
        ],
        "description": "returns the color constant of the specified note number"
    },
    "get_key_name":
    {
        "prefix": "get_key_name",
        "body":[
            "get_key_name( ${1:<note-nr> )"
        ],
        "description": "returns the name of the specified key"
    },
    "get_key_triggerstate":
    {
        "prefix": "get_key_triggerstate",
        "body":[
            "get_key_triggerstate( ${1:<note-nr> )"
        ],
        "description": "returns the pressed state of the specified note number (i.e. key) on the KONTAKT keyboard, can be either 1 (key pressed) or 0 (key released)"
    },
    "get_key_type":
    {
        "prefix": "get_key_type",
        "body":[
            "get_key_type( ${1:<note-nr> )"
        ],
        "description": "returns the key type constant of the specified key."
    },
    "get_keyrange_min_note":
    {
        "prefix": "get_keyrange_min_note",
        "body":[
            "get_keyrange_min_note( ${1:<note-nr> )"
        ],
        "description": "returns the lowest note of the specified key range"
    },
    "get_keyrange_max_note":
    {
        "prefix": "get_keyrange_max_note",
        "body":[
            "get_keyrange_max_note( ${1:<note-nr> )"
        ],
        "description": "returns the highest note of the specified key range"
    },
    "get_keyrange_name":
    {
        "prefix": "get_keyrange_name",
        "body":[
            "get_keyrange_name( ${1:<note-nr> )"
        ],
        "description": "returns the name of the specified key range"
    },
    "set_key_color":
    {
        "prefix": "set_key_color",
        "body":[
            "set_key_color( ${1:<note-nr>}, ${2:<key-color-constant>} )"
        ],
        "description": "sets the color of the specified key (i.e. MIDI note) on the KONTAKT keyboard. use $KEY_COLOR_****"
    },
    "set_key_name":
    {
        "prefix": "set_key_name",
        "body":[
            "set_key_name( ${1:<note-nr>}, ${2:<name>} )"
        ],
        "description": "assigns a text string to the specified key"
    },
    "set_key_pressed":
    {
        "prefix": "set_key_pressed",
        "body":[
            "set_key_pressed( ${1:<note-nr>}, ${2:<value>} )"
        ],
        "description": "sets the trigger state of the specified key on KONTAKT's keyboard either to pressed/on (1) or released/off (0)"
    },
    "set_key_pressed_support":
    {
        "prefix": "set_key_pressed_support",
        "body":[
            "set_key_pressed_support( ${1:<mode>} )"
        ],
        "description": "sets the pressed state support mode for KONTAKT'S keyboard. The available modes are:\n0: KONTAKT handles all pressed states, set_key_pressed() commands are ignored (default mode)\n1: KONTAKT's keyboard is only affected by set_key_pressed() commands"
    },
    "set_key_type":
    {
        "prefix": "set_key_type",
        "body":[
            "set_key_type( ${1:<note-nr>}, ${2:<key-type-constant>} )"
        ],
        "description": "assigns a key type to the specified key.\nThe following key types are available:\n$NI_KEY_TYPE_DEFAULT (i.e. normal mapped notes that produce sound)\n$NI_KEY_TYPE_CONTROL (i.e. key switches or other notes that do not produce sound)\n$NI_KEY_TYPE_NONE (resets the key to its normal KONTAKT behaviour)"
    },
    "set_keyrange":
    {
        "prefix": "set_keyrange",
        "body":[
            "set_keyrange( ${1:<min-note>}, ${2:<max-note>}, ${3:<name>} )"
        ],
        "description": "assigns a text string to the specified range of keys."
    },
    "remove_keyrange":
    {
        "prefix": "remove_keyrange",
        "body":[
            "remove_keyrange( ${1:<note-nr>} )"
        ],
        "description": "assigns a text string to the specified range of keys"
    },

"##---------------- Engine Parameter Commands ----------------##":{},

    "find_mod":
    {
        "prefix": "find_mod",
        "body":[
            "find_mod( ${1:<group-index>}, ${2:<mod-name>} )"
        ],
        "description": "returns the slot index of an internal modulator or external modulation slot"
    },
    "find_target":
    {
        "prefix": "find_target",
        "body":[
            "find_target( ${1:<group-index>}, ${2:<mod-index>}, ${3:<target-name>} )"
        ],
        "description": "returns the slot index of a modulation slot of an internal modulator"
    },
    "get_engine_par":
    {
        "prefix": "get_engine_par",
        "body":[
            "get_engine_par( ${1:<parameter>}, ${2:<group>}, ${3:<slot>}, ${4:<generic>} )"
        ],
        "description": "returns the value of a specific engine parameter"
    },
    "get_engine_par_disp":
    {
        "prefix": "get_engine_par_disp",
        "body":[
            "get_engine_par_disp( ${1:<parameter>}, ${2:<group>}, ${3:<slot>}, ${4:<generic>} )"
        ],
        "description": "returns the displayed string of a specific engine parameter"
    },
    "get_voice_limit":
    {
        "prefix": "get_voice_limit",
        "body":[
            "get_voice_limit( ${1:<voice-type>} )"
        ],
        "description": "retunrs the voice limit for the Time Machine Pro mode of the source module"
    },
    "output_channel_name":
    {
        "prefix": "output_channel_name",
        "body":[
            "output_channel_name( ${1:<output-number>} )"
        ],
        "description": "returns the channel name for the specified output"
    },
    "set_engine_par":
    {
        "prefix": "set_engine_par",
        "body":[
            "set_engine_par( ${1:<parameter>}, ${2:<value>}, ${3:<group>}, ${4:<slot>}, ${5:<generic>} )"
        ],
        "description": "control automatable KONTAKT parameters and bypass buttons"
    },
    "set_voice_limit":
    {
        "prefix": "set_voice_limit",
        "body":[
            "set_voice_limit( ${1:<voice-type>}, ${2:<value>} )"
        ],
        "description": "sets the voice limit for the Time Machine Pro mode of the source module"
    },

"##---------------- Load/Save Commands ----------------##":{},

    "get_folder":
    {
        "prefix": "get_folder",
        "body":[
            "get_folder( ${1:<path-variable>} )"
        ],
        "description": "returns the path specified with the built-in path variable"
    },
    "load_array":
    {
        "prefix": "load_array",
        "body":[
            "load_array( ${1:<array-variable>}, ${2:<mode>} )"
        ],
        "description": "loads an array from an external file (.nka file)"
    },
    "load_array_str":
    {
        "prefix": "load_array_str",
        "body":[
            "load_array_str( ${1:<array-variable>}, ${2:<path>} )"
        ],
        "description": "loads an array from an external file (.nka file) using the file's absolute path"
    },
    "load_ir_sample":
    {
        "prefix": "load_ir_sample",
        "body":[
            "load_ir_sample( ${1:<file-path>}, ${2:<slot>}, ${3:<generic>} )"
        ],
        "description": "loads an impulse response sample into KONTAKT's convolution effect"
    },
    "save_array":
    {
        "prefix": "save_array",
        "body":[
            "save_array( ${1:<array-variable>}, ${2:<mode>} )"
        ],
        "description": "saves an array to an external file (i.e. an .nka file)"
    },
    "save_array_str":
    {
        "prefix": "save_array_str",
        "body":[
            "save_array_str( ${1:<array-variable>}, ${2:<path>} )"
        ],
        "description": "saves an array to an external file (i.e. an .nka file), using the specified absolute path"
    },
    "save_midi_file":
    {
        "prefix": "save_midi_file",
        "body":[
            "save_midi_file( ${1:<path>} )"
        ],
        "description": "saves a MIDI file with a range specified by the mf_set_export_area() command."
    },

"##---------------- MIDI Object Commands ----------------##":{},

    "mf_insert_file":
    {
        "prefix": "mf_insert_file",
        "body":[
            "mf_insert_file( ${1:<path>}, ${2:<track-offset>}, ${3:<position-offset>}, ${4:<mode>} )"
        ],
        "description": "inserts a MIDI file into the MIDI object."
    },
    "mf_set_export_area":
    {
        "prefix": "mf_set_export_area",
        "body":[
            "mf_set_export_area( ${1:<name>}, ${2:<start-pos>}, ${3:<end-pos>}, ${4:<start-track>}, ${5:<end-track>} )"
        ],
        "description": "defines the part of the MIDI object that will be exported when using a drag and drop area, or the save_midi_file() command."
    },
    "mf_set_buffer_size":
    {
        "prefix": "mf_set_buffer_size",
        "body":[
            "mf_set_buffer_size( ${1:<size>} )"
        ],
        "description": "defines a number of inactive MIDI events, that can be activated and edited"
    },
    "mf_get_buffer_size":
    {
        "prefix": "mf_get_buffer_size",
        "body":[
            "mf_get_buffer_size()"
        ],
        "description": "returns the size of the MIDI event buffer"
    },
    "mf_reset":
    {
        "prefix": "mf_reset",
        "body":[
            "mf_reset()"
        ],
        "description": "resets the MIDI object, sets the event buffer to zero, and removes all events"
    },
    "mf_insert_event":
    {
        "prefix": "mf_insert_event",
        "body":[
            "mf_insert_event( ${1:<track>}, ${2:<pos>}, ${3:<command>}, ${4:<byte1>}, ${5:<byte2>} )"
        ],
        "description": "activates an inactive MIDI event in the MIDI object. However, because the command and position are defined in this command, it can be considered as an insertion."
    },
    "mf_remove_event":
    {
        "prefix": "mf_remove_event",
        "body":[
            "mf_remove_event( ${1:<event-id>} )"
        ],
        "description": "deactivates an event in the MIDI object, effectively removing it"
    },
    "mf_set_event_par":
    {
        "prefix": "mf_set_event_par",
        "body":[
            "mf_set_event_par( ${1:<event-id>}, ${2:<parameter>}, ${3:<value>} )"
        ],
        "description": "sets an event parameter"
    },
    "mf_get_event_par":
    {
        "prefix": "mf_get_event_par",
        "body":[
            "mf_get_event_par( ${1:<event-id>}, ${2:<parameter>} )"
        ],
        "description": "returns the value of an event parameter"
    },
    "mf_get_id":
    {
        "prefix": "mf_get_id",
        "body":[
            "mf_get_id()"
        ],
        "description": "returns the ID of the currently selected event (when using the navigation commands like mf_get_first(), and mf_get_next(), etc)"
    },
    "mf_set_mark":
    {
        "prefix": "mf_set_mark",
        "body":[
            "mf_set_mark( ${1:<event-id>}, ${2:<mark>}, ${3:<status>} )"
        ],
        "description": "marks an event, so that you may groups events together and process that group quickly"
    },
    "mf_get_mark":
    {
        "prefix": "mf_get_mark",
        "body":[
            "mf_get_mark( ${1:<event-id>}, ${2:<mark>} )"
        ],
        "description": "checks if an event is marked or not. Returns 1 if it is marked, or 0 if it is not."
    },
    "---------------- MEMO: by_marks() is already defined at 'Event Commands' ----------------":{},
    "by_track":
    {
        "prefix": "by_track",
        "body":[
            "by_track( ${1:<track>} )"
        ],
        "description": "can be used to group events by their track number"
    },
    "mf_get_first":
    {
        "prefix": "mf_get_first",
        "body":[
            "mf_get_first( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the first event in the MIDI track"
    },
    "mf_get_last":
    {
        "prefix": "mf_get_last",
        "body":[
            "mf_get_last( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the last event in the MIDI track"
    },
    "mf_get_next":
    {
        "prefix": "mf_get_next",
        "body":[
            "mf_get_next( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the next event in the MIDI track"
    },
    "mf_get_next_at":
    {
        "prefix": "mf_get_next_at",
        "body":[
            "mf_get_next_at( ${1:<track-index>}, ${2:<pos>} )"
        ],
        "description": "moves the position marker to the next event in the MIDI track right after the defined position."
    },
    "mf_get_prev":
    {
        "prefix": "mf_get_prev",
        "body":[
            "mf_get_prev( ${1:<track-index>} )"
        ],
        "description": "moves the position marker to the previous event in the MIDI track"
    },
    "mf_get_prev_at":
    {
        "prefix": "mf_get_prev_at",
        "body":[
            "mf_get_prev_at( ${1:<track-index>}, ${2:<pos>} )"
        ],
        "description": "moves the position marker to the first event before the defined position"
    },
    "mf_get_num_tracks":
    {
        "prefix": "mf_get_num_tracks",
        "body":[
            "mf_get_num_tracks()"
        ],
        "description": "returns the number of tracks in a MIDI object."
    },

"##---------------- Built-in Variables and Constants ----------------##":{}

}
